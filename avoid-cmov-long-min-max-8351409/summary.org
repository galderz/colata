#+STARTUP: overview
#+TODO: TODO IN-PROGRESS WAITING CANCELLED REASSIGNED DEFERRED DUPLICATE DONE

* 19.5.25
** lt CondBranch
#+begin_src bash
Benchmark                                                             (probability)  (size)   Mode  Cnt      Score    Error     Units
MinMaxVector.longReductionMultiplyMax                                           100    2048  thrpt    4   1446.449 ± 47.243    ops/ms
MinMaxVector.longReductionMultiplyMax:BRANCH_COND_MISPRED_NONSPEC               100    2048  thrpt           0.033               #/op
MinMaxVector.longReductionMultiplyMax:BRANCH_MISPRED_NONSPEC                    100    2048  thrpt           0.034               #/op
MinMaxVector.longReductionMultiplyMax:Branch miss ratio                         100    2048  thrpt          ≈ 10⁻⁵           miss/brs
MinMaxVector.longReductionMultiplyMax:INST_ALL                                  100    2048  thrpt       11983.805               #/op
MinMaxVector.longReductionMultiplyMax:INST_BRANCH                               100    2048  thrpt        2560.708               #/op
MinMaxVector.longReductionMultiplyMax:INST_BRANCH density (of insns)            100    2048  thrpt           0.214             #/insn
#+end_src
** ge CondBranch
#+begin_src bash
Benchmark                                                             (probability)  (size)   Mode  Cnt      Score    Error     Units
MinMaxVector.longReductionMultiplyMax                                           100    2048  thrpt    4   2354.700 ± 69.609    ops/ms
MinMaxVector.longReductionMultiplyMax:BRANCH_COND_MISPRED_NONSPEC               100    2048  thrpt           1.001               #/op
MinMaxVector.longReductionMultiplyMax:BRANCH_MISPRED_NONSPEC                    100    2048  thrpt           1.002               #/op
MinMaxVector.longReductionMultiplyMax:Branch miss ratio                         100    2048  thrpt          ≈ 10⁻³           miss/brs
MinMaxVector.longReductionMultiplyMax:INST_ALL                                  100    2048  thrpt       11822.844               #/op
MinMaxVector.longReductionMultiplyMax:INST_BRANCH                               100    2048  thrpt        2568.671               #/op
MinMaxVector.longReductionMultiplyMax:INST_BRANCH density (of insns)            100    2048  thrpt           0.217             #/insn
#+end_src
* 14.5.25
** linux/aarch64
*** ge perfnorm branch-misses/br_mis_pred,inst_retired
#+begin_src bash
Benchmark                                            (probability)  (size)   Mode  Cnt      Score    Error      Units
MinMaxVector.longReductionMultiplyMax                          100    2048  thrpt    4    268.964 ± 44.313     ops/ms
MinMaxVector.longReductionMultiplyMax:CPI                      100    2048  thrpt           0.533           clks/insn
MinMaxVector.longReductionMultiplyMax:IPC                      100    2048  thrpt           1.875           insns/clk
MinMaxVector.longReductionMultiplyMax:br_mis_pred              100    2048  thrpt           1.182                #/op
MinMaxVector.longReductionMultiplyMax:branch-misses            100    2048  thrpt           1.182                #/op
MinMaxVector.longReductionMultiplyMax:cycles                   100    2048  thrpt        6334.979                #/op
MinMaxVector.longReductionMultiplyMax:inst_retired             100    2048  thrpt       11875.027                #/op
MinMaxVector.longReductionMultiplyMax:instructions             100    2048  thrpt       11875.025                #/op
#+end_src
*** lt perfnorm branch-misses/br_mis_pred,inst_retired
#+begin_src bash
Benchmark                                            (probability)  (size)   Mode  Cnt      Score    Error      Units
MinMaxVector.longReductionMultiplyMax                          100    2048  thrpt    4    141.539 ± 24.556     ops/ms
MinMaxVector.longReductionMultiplyMax:CPI                      100    2048  thrpt           0.991           clks/insn
MinMaxVector.longReductionMultiplyMax:IPC                      100    2048  thrpt           1.009           insns/clk
MinMaxVector.longReductionMultiplyMax:br_mis_pred              100    2048  thrpt         222.361                #/op
MinMaxVector.longReductionMultiplyMax:branch-misses            100    2048  thrpt         222.361                #/op
MinMaxVector.longReductionMultiplyMax:cycles                   100    2048  thrpt       12038.018                #/op
MinMaxVector.longReductionMultiplyMax:inst_retired             100    2048  thrpt       12144.339                #/op
MinMaxVector.longReductionMultiplyMax:instructions             100    2048  thrpt       12144.342                #/op
#+end_src
*** ge llvm-mca bottleneck
#+begin_src bash
[nix-shell:~/tmp/avoid-cmov-long-min-max/1405]$ llvm-mca --bottleneck-analysis ge-linux-aarch64.s
Iterations:        100
Instructions:      2600
Total Cycles:      913
Total uOps:        2700

Dispatch Width:    3
uOps Per Cycle:    2.96
IPC:               2.85
Block RThroughput: 9.0


No resource or data dependency bottlenecks discovered.


Instruction Info:
[1]: #uOps
[2]: Latency
[3]: RThroughput
[4]: MayLoad
[5]: MayStore
[6]: HasSideEffects (U)

[1]    [2]    [3]    [4]    [5]    [6]    Instructions:
 1      2     1.00                        add	x4, x7, w11, sxtw #3
 2      4     1.00    *                   ldp	x6, x21, [x4, #16]
 1      4     1.00    *                   ldr	x22, [x4, #32]
 1      5     1.00                        mul	x6, x6, x0
 1      4     1.00    *                   ldr	x4, [x4, #40]
 1      5     1.00                        mul	x21, x21, x0
 1      5     1.00                        mul	x22, x22, x0
 1      1     0.50                        mov	x23, x6
 1      1     0.50                        cmp	x6, x5
 1      1     1.00                        b.ge	br1
 1      1     0.50                        mov	x23, x5
 1      5     1.00                        mul	x4, x4, x0
 1      1     0.50                        mov	x5, x21
 1      1     0.50                        cmp	x21, x23
 1      1     1.00                        b.ge	br2
 1      1     0.50                        mov	x5, x23
 1      1     0.50                        mov	x6, x22
 1      1     0.50                        cmp	x22, x5
 1      1     1.00                        b.ge	br3
 1      1     0.50                        mov	x6, x5
 1      1     0.50                        add	w11, w11, #4
 1      1     0.50                        mov	x5, x4
 1      1     0.50                        cmp	x4, x6
 1      1     1.00                        b.ge	br4
 1      1     0.50                        mov	x5, x6
 1      1     0.50                        cmp	w11, w13


Resources:
[0]   - A57UnitB
[1.0] - A57UnitI
[1.1] - A57UnitI
[2]   - A57UnitL
[3]   - A57UnitM
[4]   - A57UnitS
[5]   - A57UnitW
[6]   - A57UnitX


Resource pressure per iteration:
[0]    [1.0]  [1.1]  [2]    [3]    [4]    [5]    [6]
4.00   7.00   7.00   3.00   5.00    -      -      -

Resource pressure by instruction:
[0]    [1.0]  [1.1]  [2]    [3]    [4]    [5]    [6]    Instructions:
 -      -      -      -     1.00    -      -      -     add	x4, x7, w11, sxtw #3
 -      -      -     1.00    -      -      -      -     ldp	x6, x21, [x4, #16]
 -      -      -     1.00    -      -      -      -     ldr	x22, [x4, #32]
 -      -      -      -     1.00    -      -      -     mul	x6, x6, x0
 -      -      -     1.00    -      -      -      -     ldr	x4, [x4, #40]
 -      -      -      -     1.00    -      -      -     mul	x21, x21, x0
 -      -      -      -     1.00    -      -      -     mul	x22, x22, x0
 -     0.33   0.67    -      -      -      -      -     mov	x23, x6
 -     0.67   0.33    -      -      -      -      -     cmp	x6, x5
1.00    -      -      -      -      -      -      -     b.ge	br1
 -      -     1.00    -      -      -      -      -     mov	x23, x5
 -      -      -      -     1.00    -      -      -     mul	x4, x4, x0
 -     0.33   0.67    -      -      -      -      -     mov	x5, x21
 -     0.67   0.33    -      -      -      -      -     cmp	x21, x23
1.00    -      -      -      -      -      -      -     b.ge	br2
 -     0.83   0.17    -      -      -      -      -     mov	x5, x23
 -     0.33   0.67    -      -      -      -      -     mov	x6, x22
 -     0.67   0.33    -      -      -      -      -     cmp	x22, x5
1.00    -      -      -      -      -      -      -     b.ge	br3
 -     0.18   0.82    -      -      -      -      -     mov	x6, x5
 -     0.82   0.18    -      -      -      -      -     add	w11, w11, #4
 -     0.33   0.67    -      -      -      -      -     mov	x5, x4
 -     0.67   0.33    -      -      -      -      -     cmp	x4, x6
1.00    -      -      -      -      -      -      -     b.ge	br4
 -     0.35   0.65    -      -      -      -      -     mov	x5, x6
 -     0.82   0.18    -      -      -      -      -     cmp	w11, w13
#+end_src
*** lt llvm-mca bottleneck
#+begin_src bash
[nix-shell:~/tmp/avoid-cmov-long-min-max/1405]$ llvm-mca --bottleneck-analysis lt-linux-aarch64.s
Iterations:        100
Instructions:      2600
Total Cycles:      913
Total uOps:        2700

Dispatch Width:    3
uOps Per Cycle:    2.96
IPC:               2.85
Block RThroughput: 9.0


No resource or data dependency bottlenecks discovered.


Instruction Info:
[1]: #uOps
[2]: Latency
[3]: RThroughput
[4]: MayLoad
[5]: MayStore
[6]: HasSideEffects (U)

[1]    [2]    [3]    [4]    [5]    [6]    Instructions:
 1      2     1.00                        add	x4, x7, w11, sxtw #3
 2      4     1.00    *                   ldp	x6, x21, [x4, #16]
 1      4     1.00    *                   ldr	x22, [x4, #32]
 1      5     1.00                        mul	x6, x6, x0
 1      4     1.00    *                   ldr	x4, [x4, #40]
 1      5     1.00                        mul	x21, x21, x0
 1      5     1.00                        mul	x22, x22, x0
 1      1     0.50                        mov	x23, x6
 1      1     0.50                        cmp	x5, x6
 1      1     1.00                        b.lt	br1
 1      1     0.50                        mov	x23, x5
 1      5     1.00                        mul	x4, x4, x0
 1      1     0.50                        mov	x5, x21
 1      1     0.50                        cmp	x23, x21
 1      1     1.00                        b.lt	br2
 1      1     0.50                        mov	x5, x23
 1      1     0.50                        mov	x6, x22
 1      1     0.50                        cmp	x5, x22
 1      1     1.00                        b.lt	br3
 1      1     0.50                        mov	x6, x5
 1      1     0.50                        add	w11, w11, #4
 1      1     0.50                        mov	x5, x4
 1      1     0.50                        cmp	x6, x4
 1      1     1.00                        b.lt	br4
 1      1     0.50                        mov	x5, x6
 1      1     0.50                        cmp	w11, w13


Resources:
[0]   - A57UnitB
[1.0] - A57UnitI
[1.1] - A57UnitI
[2]   - A57UnitL
[3]   - A57UnitM
[4]   - A57UnitS
[5]   - A57UnitW
[6]   - A57UnitX


Resource pressure per iteration:
[0]    [1.0]  [1.1]  [2]    [3]    [4]    [5]    [6]
4.00   7.00   7.00   3.00   5.00    -      -      -

Resource pressure by instruction:
[0]    [1.0]  [1.1]  [2]    [3]    [4]    [5]    [6]    Instructions:
 -      -      -      -     1.00    -      -      -     add	x4, x7, w11, sxtw #3
 -      -      -     1.00    -      -      -      -     ldp	x6, x21, [x4, #16]
 -      -      -     1.00    -      -      -      -     ldr	x22, [x4, #32]
 -      -      -      -     1.00    -      -      -     mul	x6, x6, x0
 -      -      -     1.00    -      -      -      -     ldr	x4, [x4, #40]
 -      -      -      -     1.00    -      -      -     mul	x21, x21, x0
 -      -      -      -     1.00    -      -      -     mul	x22, x22, x0
 -     0.33   0.67    -      -      -      -      -     mov	x23, x6
 -     0.67   0.33    -      -      -      -      -     cmp	x5, x6
1.00    -      -      -      -      -      -      -     b.lt	br1
 -      -     1.00    -      -      -      -      -     mov	x23, x5
 -      -      -      -     1.00    -      -      -     mul	x4, x4, x0
 -     0.33   0.67    -      -      -      -      -     mov	x5, x21
 -     0.67   0.33    -      -      -      -      -     cmp	x23, x21
1.00    -      -      -      -      -      -      -     b.lt	br2
 -     0.83   0.17    -      -      -      -      -     mov	x5, x23
 -     0.33   0.67    -      -      -      -      -     mov	x6, x22
 -     0.67   0.33    -      -      -      -      -     cmp	x5, x22
1.00    -      -      -      -      -      -      -     b.lt	br3
 -     0.18   0.82    -      -      -      -      -     mov	x6, x5
 -     0.82   0.18    -      -      -      -      -     add	w11, w11, #4
 -     0.33   0.67    -      -      -      -      -     mov	x5, x4
 -     0.67   0.33    -      -      -      -      -     cmp	x6, x4
1.00    -      -      -      -      -      -      -     b.lt	br4
 -     0.35   0.65    -      -      -      -      -     mov	x5, x6
 -     0.82   0.18    -      -      -      -      -     cmp	w11, w13
#+end_src
*** ge llvm-mca
#+begin_src bash
[nix-shell:~/tmp/avoid-cmov-long-min-max/1405]$ llvm-mca ge-linux-aarch64.s
Iterations:        100
Instructions:      2600
Total Cycles:      913
Total uOps:        2700

Dispatch Width:    3
uOps Per Cycle:    2.96
IPC:               2.85
Block RThroughput: 9.0


Instruction Info:
[1]: #uOps
[2]: Latency
[3]: RThroughput
[4]: MayLoad
[5]: MayStore
[6]: HasSideEffects (U)

[1]    [2]    [3]    [4]    [5]    [6]    Instructions:
 1      2     1.00                        add	x4, x7, w11, sxtw #3
 2      4     1.00    *                   ldp	x6, x21, [x4, #16]
 1      4     1.00    *                   ldr	x22, [x4, #32]
 1      5     1.00                        mul	x6, x6, x0
 1      4     1.00    *                   ldr	x4, [x4, #40]
 1      5     1.00                        mul	x21, x21, x0
 1      5     1.00                        mul	x22, x22, x0
 1      1     0.50                        mov	x23, x6
 1      1     0.50                        cmp	x6, x5
 1      1     1.00                        b.ge	br1
 1      1     0.50                        mov	x23, x5
 1      5     1.00                        mul	x4, x4, x0
 1      1     0.50                        mov	x5, x21
 1      1     0.50                        cmp	x21, x23
 1      1     1.00                        b.ge	br2
 1      1     0.50                        mov	x5, x23
 1      1     0.50                        mov	x6, x22
 1      1     0.50                        cmp	x22, x5
 1      1     1.00                        b.ge	br3
 1      1     0.50                        mov	x6, x5
 1      1     0.50                        add	w11, w11, #4
 1      1     0.50                        mov	x5, x4
 1      1     0.50                        cmp	x4, x6
 1      1     1.00                        b.ge	br4
 1      1     0.50                        mov	x5, x6
 1      1     0.50                        cmp	w11, w13


Resources:
[0]   - A57UnitB
[1.0] - A57UnitI
[1.1] - A57UnitI
[2]   - A57UnitL
[3]   - A57UnitM
[4]   - A57UnitS
[5]   - A57UnitW
[6]   - A57UnitX


Resource pressure per iteration:
[0]    [1.0]  [1.1]  [2]    [3]    [4]    [5]    [6]
4.00   7.00   7.00   3.00   5.00    -      -      -

Resource pressure by instruction:
[0]    [1.0]  [1.1]  [2]    [3]    [4]    [5]    [6]    Instructions:
 -      -      -      -     1.00    -      -      -     add	x4, x7, w11, sxtw #3
 -      -      -     1.00    -      -      -      -     ldp	x6, x21, [x4, #16]
 -      -      -     1.00    -      -      -      -     ldr	x22, [x4, #32]
 -      -      -      -     1.00    -      -      -     mul	x6, x6, x0
 -      -      -     1.00    -      -      -      -     ldr	x4, [x4, #40]
 -      -      -      -     1.00    -      -      -     mul	x21, x21, x0
 -      -      -      -     1.00    -      -      -     mul	x22, x22, x0
 -     0.33   0.67    -      -      -      -      -     mov	x23, x6
 -     0.67   0.33    -      -      -      -      -     cmp	x6, x5
1.00    -      -      -      -      -      -      -     b.ge	br1
 -      -     1.00    -      -      -      -      -     mov	x23, x5
 -      -      -      -     1.00    -      -      -     mul	x4, x4, x0
 -     0.33   0.67    -      -      -      -      -     mov	x5, x21
 -     0.67   0.33    -      -      -      -      -     cmp	x21, x23
1.00    -      -      -      -      -      -      -     b.ge	br2
 -     0.83   0.17    -      -      -      -      -     mov	x5, x23
 -     0.33   0.67    -      -      -      -      -     mov	x6, x22
 -     0.67   0.33    -      -      -      -      -     cmp	x22, x5
1.00    -      -      -      -      -      -      -     b.ge	br3
 -     0.18   0.82    -      -      -      -      -     mov	x6, x5
 -     0.82   0.18    -      -      -      -      -     add	w11, w11, #4
 -     0.33   0.67    -      -      -      -      -     mov	x5, x4
 -     0.67   0.33    -      -      -      -      -     cmp	x4, x6
1.00    -      -      -      -      -      -      -     b.ge	br4
 -     0.35   0.65    -      -      -      -      -     mov	x5, x6
 -     0.82   0.18    -      -      -      -      -     cmp	w11, w13
#+end_src
*** lt llvm-mca
#+begin_src bash
[nix-shell:~/tmp/avoid-cmov-long-min-max/1405]$ llvm-mca lt-linux-aarch64.s
Iterations:        100
Instructions:      2600
Total Cycles:      913
Total uOps:        2700

Dispatch Width:    3
uOps Per Cycle:    2.96
IPC:               2.85
Block RThroughput: 9.0


Instruction Info:
[1]: #uOps
[2]: Latency
[3]: RThroughput
[4]: MayLoad
[5]: MayStore
[6]: HasSideEffects (U)

[1]    [2]    [3]    [4]    [5]    [6]    Instructions:
 1      2     1.00                        add	x4, x7, w11, sxtw #3
 2      4     1.00    *                   ldp	x6, x21, [x4, #16]
 1      4     1.00    *                   ldr	x22, [x4, #32]
 1      5     1.00                        mul	x6, x6, x0
 1      4     1.00    *                   ldr	x4, [x4, #40]
 1      5     1.00                        mul	x21, x21, x0
 1      5     1.00                        mul	x22, x22, x0
 1      1     0.50                        mov	x23, x6
 1      1     0.50                        cmp	x5, x6
 1      1     1.00                        b.lt	br1
 1      1     0.50                        mov	x23, x5
 1      5     1.00                        mul	x4, x4, x0
 1      1     0.50                        mov	x5, x21
 1      1     0.50                        cmp	x23, x21
 1      1     1.00                        b.lt	br2
 1      1     0.50                        mov	x5, x23
 1      1     0.50                        mov	x6, x22
 1      1     0.50                        cmp	x5, x22
 1      1     1.00                        b.lt	br3
 1      1     0.50                        mov	x6, x5
 1      1     0.50                        add	w11, w11, #4
 1      1     0.50                        mov	x5, x4
 1      1     0.50                        cmp	x6, x4
 1      1     1.00                        b.lt	br4
 1      1     0.50                        mov	x5, x6
 1      1     0.50                        cmp	w11, w13


Resources:
[0]   - A57UnitB
[1.0] - A57UnitI
[1.1] - A57UnitI
[2]   - A57UnitL
[3]   - A57UnitM
[4]   - A57UnitS
[5]   - A57UnitW
[6]   - A57UnitX


Resource pressure per iteration:
[0]    [1.0]  [1.1]  [2]    [3]    [4]    [5]    [6]
4.00   7.00   7.00   3.00   5.00    -      -      -

Resource pressure by instruction:
[0]    [1.0]  [1.1]  [2]    [3]    [4]    [5]    [6]    Instructions:
 -      -      -      -     1.00    -      -      -     add	x4, x7, w11, sxtw #3
 -      -      -     1.00    -      -      -      -     ldp	x6, x21, [x4, #16]
 -      -      -     1.00    -      -      -      -     ldr	x22, [x4, #32]
 -      -      -      -     1.00    -      -      -     mul	x6, x6, x0
 -      -      -     1.00    -      -      -      -     ldr	x4, [x4, #40]
 -      -      -      -     1.00    -      -      -     mul	x21, x21, x0
 -      -      -      -     1.00    -      -      -     mul	x22, x22, x0
 -     0.33   0.67    -      -      -      -      -     mov	x23, x6
 -     0.67   0.33    -      -      -      -      -     cmp	x5, x6
1.00    -      -      -      -      -      -      -     b.lt	br1
 -      -     1.00    -      -      -      -      -     mov	x23, x5
 -      -      -      -     1.00    -      -      -     mul	x4, x4, x0
 -     0.33   0.67    -      -      -      -      -     mov	x5, x21
 -     0.67   0.33    -      -      -      -      -     cmp	x23, x21
1.00    -      -      -      -      -      -      -     b.lt	br2
 -     0.83   0.17    -      -      -      -      -     mov	x5, x23
 -     0.33   0.67    -      -      -      -      -     mov	x6, x22
 -     0.67   0.33    -      -      -      -      -     cmp	x5, x22
1.00    -      -      -      -      -      -      -     b.lt	br3
 -     0.18   0.82    -      -      -      -      -     mov	x6, x5
 -     0.82   0.18    -      -      -      -      -     add	w11, w11, #4
 -     0.33   0.67    -      -      -      -      -     mov	x5, x4
 -     0.67   0.33    -      -      -      -      -     cmp	x6, x4
1.00    -      -      -      -      -      -      -     b.lt	br4
 -     0.35   0.65    -      -      -      -      -     mov	x5, x6
 -     0.82   0.18    -      -      -      -      -     cmp	w11, w13
#+end_src
*** ge assembly
#+begin_src asm
   add	x4, x7, w11, sxtw #3
   ldp		x6, x21, [x4, #0x10]
   ldr		x22, [x4, #0x20]
   mul		x6, x6, x0
   ldr		x4, [x4, #0x28]
   mul		x21, x21, x0
   mul		x22, x22, x0
   mov		x23, x6
   cmp		x6, x5
   b.ge	b1
   mov		x23, x5
b1:
   mul	x4, x4, x0
   mov		x5, x21
   cmp		x21, x23
   b.ge	b2
   mov		x5, x23
b2:
   mov	x6, x22
   cmp		x22, x5
   b.ge	b3
   mov		x6, x5
b3:
   add	w11, w11, #4
   mov		x5, x4
   cmp		x4, x6
   b.ge	b4
   mov		x5, x6
b4:
   cmp	w11, w13
   b.lt	#0xffff9caf6ab0
#+end_src
*** lt assembly
#+begin_src asm
   add		x4, x7, w11, sxtw #3
   ldp		x6, x21, [x4, #0x10]
   ldr		x22, [x4, #0x20]
   mul		x6, x6, x0
   ldr		x4, [x4, #0x28]
   mul		x21, x21, x0
   mul		x22, x22, x0
   mov		x23, x6
   cmp		x5, x6
   b.lt		b1
   mov		x23, x5
b1:
   mul		x4, x4, x0
   mov		x5, x21
   cmp		x23, x21
   b.lt		b2
   mov		x5, x23
b2:
   mov		x6, x22
   cmp		x5, x22
   b.lt		b3
   mov		x6, x5
b3:
   add		w11, w11, #4
   mov		x5, x4
   cmp		x6, x4
   b.lt		b4
   mov		x5, x6
b4:
   cmp		w11, w13
   b.lt		#0xffff88af49b0
#+end_src
*** ge perfnorm cycles/instructions
#+begin_src bash
Benchmark                                             (probability)  (size)   Mode  Cnt      Score   Error      Units
MinMaxVector.longReductionMultiplyMax                           100    2048  thrpt    4    271.768 ± 0.251     ops/ms
MinMaxVector.longReductionMultiplyMax:CPI                       100    2048  thrpt           0.527          clks/insn
MinMaxVector.longReductionMultiplyMax:IPC                       100    2048  thrpt           1.899          insns/clk
MinMaxVector.longReductionMultiplyMax:cycles:u                  100    2048  thrpt        6232.475               #/op
MinMaxVector.longReductionMultiplyMax:instructions:u            100    2048  thrpt       11836.351               #/op
#+end_src
*** lt perfnorm
#+begin_src bash
Benchmark                                             (probability)  (size)   Mode  Cnt      Score   Error      Units
MinMaxVector.longReductionMultiplyMax                           100    2048  thrpt    4    150.169 ± 4.693     ops/ms
MinMaxVector.longReductionMultiplyMax:CPI                       100    2048  thrpt           0.935          clks/insn
MinMaxVector.longReductionMultiplyMax:IPC                       100    2048  thrpt           1.069          insns/clk
MinMaxVector.longReductionMultiplyMax:cycles:u                  100    2048  thrpt       11254.151               #/op
MinMaxVector.longReductionMultiplyMax:instructions:u            100    2048  thrpt       12033.363               #/op
#+end_src
*** ge
**** release
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt    Score   Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  272.786 ± 3.109  ops/ms
#+end_src
**** asm
#+begin_src asm
....[Hottest Region 1]..............................................................................
c2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 1058

                      0x0000ffff9caf69c4:   str		xzr, [x19, #0x20]   ;*putfield realTime {reexecute=0 rethrow=0 return_oop=0}
                                                                                ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@48 (line 128)
                      0x0000ffff9caf69c8:   str		x0, [x19, #0x30]    ;*putfield stopTime {reexecute=0 rethrow=0 return_oop=0}
                                                                                ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@42 (line 127)
                      0x0000ffff9caf69cc:   ldp		x29, x30, [sp, #0x40]
                      0x0000ffff9caf69d0:   add		sp, sp, #0x50
                      0x0000ffff9caf69d4:   ldr		x8, [x28, #0x28]    ;   {poll_return}
                      0x0000ffff9caf69d8:   cmp		sp, x8
                      0x0000ffff9caf69dc:   b.hi		#0xffff9caf6c14
                      0x0000ffff9caf69e0:   ret
   0.04%   ↗          0x0000ffff9caf69e4:   mov		x5, x13             ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
           │                                                                    ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
           │                                                                    ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   0.01%   │          0x0000ffff9caf69e8:   add		x12, x7, w11, sxtw #3
           │          0x0000ffff9caf69ec:   ldr		x12, [x12, #0x10]
           │          0x0000ffff9caf69f0:   mul		x12, x12, x0
           │          0x0000ffff9caf69f4:   add		w11, w11, #1        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
           │                                                                    ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
           │                                                                    ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
           │          0x0000ffff9caf69f8:   mov		x13, x5
   0.03%   │          0x0000ffff9caf69fc:   cmp		x5, x12
          ╭│          0x0000ffff9caf6a00:   b.ge		#0xffff9caf6a08
          ││          0x0000ffff9caf6a04:   mov		x13, x12            ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
          ││                                                                    ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
          ││                                                                    ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
          ↘│          0x0000ffff9caf6a08:   cmp		w11, w14
           ╰          0x0000ffff9caf6a0c:   b.lt		#0xffff9caf69e4     ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                                ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                                ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   0.15%              0x0000ffff9caf6a10:   ldarb		w12, [x2]           ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
                                                                                ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@32 (line 126)
   0.09%              0x0000ffff9caf6a14:   ldr		x14, [x28, #0x30]
                      0x0000ffff9caf6a18:   add		x20, x20, #1        ; ImmutableOopMap {r15=Oop r16=Oop r17=Oop c_rarg3=Oop c_rarg2=Derived_oop_c_rarg3 r19=Oop }
                                                                                ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                                                                                ; - (reexecute) org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@35 (line 126)
   0.07%              0x0000ffff9caf6a1c:   ldr		wzr, [x14]          ;   {poll}
                      0x0000ffff9caf6a20:   cbnz		w12, #0xffff9caf6998;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                                                ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@38 (line 127)
   0.00%              0x0000ffff9caf6a24:   ldr		w14, [x16, #0xc]    ;*getfield size {reexecute=0 rethrow=0 return_oop=0}
                                                                                ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@8 (line 284)
                                                                                ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
                      0x0000ffff9caf6a28:   cmp		w14, #0
                      0x0000ffff9caf6a2c:   b.le		#0xffff9caf6b3c     ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                                ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                                ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   0.01%              0x0000ffff9caf6a30:   ldr		w13, [x16, #0x2c]   ;*getfield maxLongA {reexecute=0 rethrow=0 return_oop=0}
                                                                                ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@18 (line 285)
                                                                                ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
                      0x0000ffff9caf6a34:   ldr		w5, [x13, #0xc]     ; implicit exception: dispatches to 0x0000ffff9caf6b44
                                                                                ;*laload {reexecute=0 rethrow=0 return_oop=0}
                                                                                ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
                                                                                ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
                      0x0000ffff9caf6a38:   sxtw		x11, w14
                      0x0000ffff9caf6a3c:   sub		x12, x11, #3
                      0x0000ffff9caf6a40:   mov		x6, x12
   0.02%              0x0000ffff9caf6a44:   cmp		x12, x1
            ╭         0x0000ffff9caf6a48:   b.ge		#0xffff9caf6a50
            │         0x0000ffff9caf6a4c:   mov		x6, x1
            ↘         0x0000ffff9caf6a50:   mov		x7, x13             ;*getfield maxLongA {reexecute=0 rethrow=0 return_oop=0}
                                                                                ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@18 (line 285)
                                                                                ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
                      0x0000ffff9caf6a54:   sxtw		x4, w5
                      0x0000ffff9caf6a58:   sub		x11, x11, #1
                      0x0000ffff9caf6a5c:   mov		w12, w6
   0.01%              0x0000ffff9caf6a60:   cbz		w5, #0xffff9caf6b44
   0.01%              0x0000ffff9caf6a64:   cmp		x11, x4
                      0x0000ffff9caf6a68:   b.hs	#0xffff9caf6b44
   0.03%              0x0000ffff9caf6a6c:   ldr		x11, [x13, #0x10]
                      0x0000ffff9caf6a70:   mul		x11, x11, x0
                      0x0000ffff9caf6a74:   mov		x5, x11
                      0x0000ffff9caf6a78:   cmp		x11, x18
             ╭        0x0000ffff9caf6a7c:   b.ge	#0xffff9caf6a84
             │        0x0000ffff9caf6a80:   mov		x5, x18             ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
             │                                                                  ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
             │                                                                  ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   0.05%     ↘        0x0000ffff9caf6a84:   cmp	w12, #1
                      0x0000ffff9caf6a88:   b.le	#0xffff9caf6b6c
                      0x0000ffff9caf6a8c:   mov		w11, #1
                   ↗  0x0000ffff9caf6a90:   cmp	w12, w11
                   │  0x0000ffff9caf6a94:   sub		w4, w12, w11
                   │  0x0000ffff9caf6a98:   csel	w13, wzr, w4, lt
   0.01%           │  0x0000ffff9caf6a9c:   cmp		w13, #0xfa0
                   │  0x0000ffff9caf6aa0:   csel	w4, w10, w13, hi
                   │  0x0000ffff9caf6aa4:   add		w13, w4, w11
                   │  0x0000ffff9caf6aa8:   nop
   0.04%           │  0x0000ffff9caf6aac:   nop		                    ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
                   │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
                   │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
                  ↗│  0x0000ffff9caf6ab0:   add	x4, x7, w11, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
                  ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
                  ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   8.46%          ││  0x0000ffff9caf6ab4:   ldp		x6, x21, [x4, #0x10]
   0.18%          ││  0x0000ffff9caf6ab8:   ldr		x22, [x4, #0x20]
                  ││  0x0000ffff9caf6abc:   mul		x6, x6, x0
   7.66%          ││  0x0000ffff9caf6ac0:   ldr		x4, [x4, #0x28]
                  ││  0x0000ffff9caf6ac4:   mul		x21, x21, x0
                  ││  0x0000ffff9caf6ac8:   mul		x22, x22, x0
                  ││  0x0000ffff9caf6acc:   mov		x23, x6
                  ││  0x0000ffff9caf6ad0:   cmp		x6, x5
              ╭   ││  0x0000ffff9caf6ad4:   b.ge	#0xffff9caf6adc
              │   ││  0x0000ffff9caf6ad8:   mov		x23, x5
   7.94%      ↘   ││  0x0000ffff9caf6adc:   mul	x4, x4, x0
                  ││  0x0000ffff9caf6ae0:   mov		x5, x21
                  ││  0x0000ffff9caf6ae4:   cmp		x21, x23
               ╭  ││  0x0000ffff9caf6ae8:   b.ge	#0xffff9caf6af0
               │  ││  0x0000ffff9caf6aec:   mov		x5, x23
  22.19%       ↘  ││  0x0000ffff9caf6af0:   mov	x6, x22
                  ││  0x0000ffff9caf6af4:   cmp		x22, x5
                ╭ ││  0x0000ffff9caf6af8:   b.ge	#0xffff9caf6b00
                │ ││  0x0000ffff9caf6afc:   mov		x6, x5
  24.20%        ↘ ││  0x0000ffff9caf6b00:   add	w11, w11, #4        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                  ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
                  ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
                  ││  0x0000ffff9caf6b04:   mov		x5, x4
                  ││  0x0000ffff9caf6b08:   cmp		x4, x6
                 ╭││  0x0000ffff9caf6b0c:   b.ge	#0xffff9caf6b14
                 │││  0x0000ffff9caf6b10:   mov		x5, x6              ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
                 │││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
                 │││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
  26.47%         ↘││  0x0000ffff9caf6b14:   cmp	w11, w13
                  ╰│  0x0000ffff9caf6b18:   b.lt	#0xffff9caf6ab0     ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                   │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                   │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   0.25%           │  0x0000ffff9caf6b1c:   ldr		x4, [x28, #0x30]    ; ImmutableOopMap {r15=Oop r16=Oop r17=Oop c_rarg3=Oop c_rarg2=Derived_oop_c_rarg3 c_rarg7=Oop r19=Oop }
                   │                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                   │                                                            ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                   │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   0.27%           │  0x0000ffff9caf6b20:   ldr		wzr, [x4]           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                   │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                   │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
                   │                                                            ;   {poll}
                   │  0x0000ffff9caf6b24:   cmp		w11, w12
                   ╰  0x0000ffff9caf6b28:   b.lt	#0xffff9caf6a90
                      0x0000ffff9caf6b2c:   cmp		w11, w14
                      0x0000ffff9caf6b30:   b.lt	#0xffff9caf69e8
....................................................................................................
  98.20%  <total for region 1>
#+end_src
*** lt
**** release
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt    Score   Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  150.761 ± 6.003  ops/ms
#+end_src
**** asm
#+begin_src asm
....[Hottest Region 1]..............................................................................
c2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 1053

   0.06%          0x0000ffff88af4984:   cmp		w12, #1
                  0x0000ffff88af4988:   b.le		#0xffff88af4a6c
                  0x0000ffff88af498c:   mov		w11, #1
               ↗  0x0000ffff88af4990:   cmp		w12, w11
               │  0x0000ffff88af4994:   sub		w4, w12, w11
               │  0x0000ffff88af4998:   csel		w13, wzr, w4, lt
               │  0x0000ffff88af499c:   cmp		w13, #0xfa0
               │  0x0000ffff88af49a0:   csel		w4, w10, w13, hi
               │  0x0000ffff88af49a4:   add		w13, w4, w11
               │  0x0000ffff88af49a8:   nop
   0.01%       │  0x0000ffff88af49ac:   nop		                    ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
               │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
               │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   3.22%      ↗│  0x0000ffff88af49b0:   add		x4, x7, w11, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
              ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
              ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
  12.69%      ││  0x0000ffff88af49b4:   ldp		x6, x21, [x4, #0x10]
   1.66%      ││  0x0000ffff88af49b8:   ldr		x22, [x4, #0x20]
              ││  0x0000ffff88af49bc:   mul		x6, x6, x0
   4.46%      ││  0x0000ffff88af49c0:   ldr		x4, [x4, #0x28]
              ││  0x0000ffff88af49c4:   mul		x21, x21, x0
              ││  0x0000ffff88af49c8:   mul		x22, x22, x0
              ││  0x0000ffff88af49cc:   mov		x23, x6
   0.01%      ││  0x0000ffff88af49d0:   cmp		x5, x6
          ╭   ││  0x0000ffff88af49d4:   b.lt		#0xffff88af49dc
   5.11%  │   ││  0x0000ffff88af49d8:   mov		x23, x5
  10.12%  ↘   ││  0x0000ffff88af49dc:   mul		x4, x4, x0
              ││  0x0000ffff88af49e0:   mov		x5, x21
              ││  0x0000ffff88af49e4:   cmp		x23, x21
           ╭  ││  0x0000ffff88af49e8:   b.lt		#0xffff88af49f0
   5.70%   │  ││  0x0000ffff88af49ec:   mov		x5, x23
  13.10%   ↘  ││  0x0000ffff88af49f0:   mov		x6, x22
              ││  0x0000ffff88af49f4:   cmp		x5, x22
            ╭ ││  0x0000ffff88af49f8:   b.lt		#0xffff88af4a00
   9.09%    │ ││  0x0000ffff88af49fc:   mov		x6, x5
  12.90%    ↘ ││  0x0000ffff88af4a00:   add		w11, w11, #4        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
              ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
              ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
              ││  0x0000ffff88af4a04:   mov		x5, x4
              ││  0x0000ffff88af4a08:   cmp		x6, x4
             ╭││  0x0000ffff88af4a0c:   b.lt		#0xffff88af4a14
   5.00%     │││  0x0000ffff88af4a10:   mov		x5, x6              ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
             │││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
             │││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
  13.41%     ↘││  0x0000ffff88af4a14:   cmp		w11, w13
              ╰│  0x0000ffff88af4a18:   b.lt		#0xffff88af49b0     ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
               │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
               │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   0.05%       │  0x0000ffff88af4a1c:   ldr		x4, [x28, #0x30]    ; ImmutableOopMap {r15=Oop r16=Oop r17=Oop c_rarg3=Oop c_rarg2=Derived_oop_c_rarg3 c_rarg7=Oop r19=Oop }
               │                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
               │                                                            ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
               │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   0.03%       │  0x0000ffff88af4a20:   ldr		wzr, [x4]           ;*goto {reexecute=0 rethrow=0 return_oop=0}
               │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
               │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
               │                                                            ;   {poll}
               │  0x0000ffff88af4a24:   cmp		w11, w12
               ╰  0x0000ffff88af4a28:   b.lt		#0xffff88af4990
                  0x0000ffff88af4a2c:   cmp		w11, w14
                  0x0000ffff88af4a30:   b.lt		#0xffff88af48e8
....................................................................................................
  96.58%  <total for region 1>
#+end_src
* 7.5.25
** pipeline stalls
*** ge
#+begin_src bash
Benchmark                                                          (probability)  (size)   Mode  Cnt      Score     Error      Units
MinMaxVector.longReductionMultiplyMax                                        100    2048  thrpt    4   2002.891 ± 622.302     ops/ms
MinMaxVector.longReductionMultiplyMax:BRANCH_COND_MISPRED_NONSPEC            100    2048  thrpt           0.977                 #/op
MinMaxVector.longReductionMultiplyMax:CORE_ACTIVE_CYCLE                      100    2048  thrpt        1935.728                 #/op
MinMaxVector.longReductionMultiplyMax:CPI                                    100    2048  thrpt           0.168            clks/insn
MinMaxVector.longReductionMultiplyMax:INST_ALL                               100    2048  thrpt       11507.732                 #/op
MinMaxVector.longReductionMultiplyMax:IPC                                    100    2048  thrpt           5.945            insns/clk
MinMaxVector.longReductionMultiplyMax:MAP_DISPATCH_BUBBLE                    100    2048  thrpt           0.717                 #/op
MinMaxVector.longReductionMultiplyMax:MAP_DISPATCH_BUBBLE_IC                 100    2048  thrpt           0.151                 #/op
MinMaxVector.longReductionMultiplyMax:MAP_DISPATCH_BUBBLE_ITLB               100    2048  thrpt           0.020                 #/op
MinMaxVector.longReductionMultiplyMax:MAP_STALL_DISPATCH                     100    2048  thrpt           0.160                 #/op
MinMaxVector.longReductionMultiplyMax:RETIRE_UOP                             100    2048  thrpt       10244.432                 #/op
#+end_src
*** lt
#+begin_src bash
Benchmark                                                          (probability)  (size)   Mode  Cnt      Score    Error      Units
MinMaxVector.longReductionMultiplyMax                                        100    2048  thrpt    4   1358.165 ± 71.286     ops/ms
MinMaxVector.longReductionMultiplyMax:BRANCH_COND_MISPRED_NONSPEC            100    2048  thrpt           0.060                #/op
MinMaxVector.longReductionMultiplyMax:CORE_ACTIVE_CYCLE                      100    2048  thrpt        2903.718                #/op
MinMaxVector.longReductionMultiplyMax:CPI                                    100    2048  thrpt           0.245           clks/insn
MinMaxVector.longReductionMultiplyMax:INST_ALL                               100    2048  thrpt       11831.397                #/op
MinMaxVector.longReductionMultiplyMax:IPC                                    100    2048  thrpt           4.075           insns/clk
MinMaxVector.longReductionMultiplyMax:MAP_DISPATCH_BUBBLE                    100    2048  thrpt         483.435                #/op
MinMaxVector.longReductionMultiplyMax:MAP_DISPATCH_BUBBLE_IC                 100    2048  thrpt           0.803                #/op
MinMaxVector.longReductionMultiplyMax:MAP_DISPATCH_BUBBLE_ITLB               100    2048  thrpt           0.134                #/op
MinMaxVector.longReductionMultiplyMax:MAP_STALL_DISPATCH                     100    2048  thrpt           0.790                #/op
MinMaxVector.longReductionMultiplyMax:RETIRE_UOP                             100    2048  thrpt       10023.440                #/op
#+end_src
** pipeline cond branch
*** ge
#+begin_src bash
Benchmark                                                          (probability)  (size)   Mode  Cnt      Score     Error      Units
MinMaxVector.longReductionMultiplyMax                                        100    2048  thrpt    4   2370.269 ± 894.659     ops/ms
MinMaxVector.longReductionMultiplyMax:BRANCH_COND_MISPRED_NONSPEC            100    2048  thrpt           0.989                 #/op
MinMaxVector.longReductionMultiplyMax:CORE_ACTIVE_CYCLE                      100    2048  thrpt        1657.699                 #/op
MinMaxVector.longReductionMultiplyMax:CPI                                    100    2048  thrpt           0.143            clks/insn
MinMaxVector.longReductionMultiplyMax:INST_ALL                               100    2048  thrpt       11600.537                 #/op
MinMaxVector.longReductionMultiplyMax:IPC                                    100    2048  thrpt           6.998            insns/clk
MinMaxVector.longReductionMultiplyMax:MAP_DISPATCH_BUBBLE                    100    2048  thrpt           0.562                 #/op
MinMaxVector.longReductionMultiplyMax:MAP_STALL                              100    2048  thrpt           0.316                 #/op
MinMaxVector.longReductionMultiplyMax:RETIRE_UOP                             100    2048  thrpt       10740.165                 #/op
#+end_src
*** lt
#+begin_src bash
Benchmark                                                          (probability)  (size)   Mode  Cnt      Score    Error      Units
MinMaxVector.longReductionMultiplyMax                                        100    2048  thrpt    4   1367.168 ± 22.211     ops/ms
MinMaxVector.longReductionMultiplyMax:BRANCH_COND_MISPRED_NONSPEC            100    2048  thrpt           0.025                #/op
MinMaxVector.longReductionMultiplyMax:CORE_ACTIVE_CYCLE                      100    2048  thrpt        2886.518                #/op
MinMaxVector.longReductionMultiplyMax:CPI                                    100    2048  thrpt           0.244           clks/insn
MinMaxVector.longReductionMultiplyMax:INST_ALL                               100    2048  thrpt       11839.732                #/op
MinMaxVector.longReductionMultiplyMax:IPC                                    100    2048  thrpt           4.102           insns/clk
MinMaxVector.longReductionMultiplyMax:MAP_DISPATCH_BUBBLE                    100    2048  thrpt         472.260                #/op
MinMaxVector.longReductionMultiplyMax:MAP_STALL                              100    2048  thrpt           0.415                #/op
MinMaxVector.longReductionMultiplyMax:RETIRE_UOP                             100    2048  thrpt       10028.665                #/op
#+end_src
** Exploring performance monitoring counters in macos
Memory Order Violation Density:
<Ev ST_MEMORY_ORDER_VIOLATION_NONSPEC> / <Ev ST_UNIT_UOP>
Proportion retired stores that caused a pipeline flush
and replay of loads and subsequent instructions of all
stores.

ST_UNIT_UOP Uops that flowed through the Store Unit
ST_MEMORY_ORDER_VIOLATION_NONSPEC Retired stores that triggered memory order violations

MAP_DISPATCH_BUBBLE Cycles while the Map Unit was not stalled and Decode Unit did not send any uops
MAP_STALL Cycles while the Map Unit was stalled for any reason
SCHEDULE_UOP Uops issued by the scheduler to any execution unit
RETIRE_UOP All retired uops
CORE_ACTIVE_CYCLE Cycles while the core was active
IPC
BRANCH_COND_MISPRED_NONSPEC Retired conditional branch instructions that mispredicted
INST_ALL All retired instructions
* 6.5.25
** comparison
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt     Score     Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  2175.597 ± 128.123  ops/ms # ge, loop unroll
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  1281.837 ±  82.221  ops/ms # le, loop unroll
#+end_src

asm, ge, loop unroll
#+begin_src bash
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 820

                 0x000000010e96b290:   cmp		w17, w12
                 0x000000010e96b294:   sub		w11, w17, w12
                 0x000000010e96b298:   csel		w10, wzr, w11, lt
                 0x000000010e96b29c:   cmp		w10, #0xfa0
                 0x000000010e96b2a0:   csel		w11, w14, w10, hi
                 0x000000010e96b2a4:   add		w10, w11, w12
                 0x000000010e96b2a8:   nop
                 0x000000010e96b2ac:   nop		                    ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.00%      ↗  0x000000010e96b2b0:   add		x11, x6, w12, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
              │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
              │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.00%      │  0x000000010e96b2b4:   ldp		x21, x22, [x11, #0x10]
              │  0x000000010e96b2b8:   ldr		x23, [x11, #0x20]
              │  0x000000010e96b2bc:   mul		x21, x21, x16
  35.87%      │  0x000000010e96b2c0:   ldr		x11, [x11, #0x28]
              │  0x000000010e96b2c4:   mul		x22, x22, x16
              │  0x000000010e96b2c8:   mul		x23, x23, x16
              │  0x000000010e96b2cc:   mov		x24, x21
   1.32%      │  0x000000010e96b2d0:   cmp		x21, x7
          ╭   │  0x000000010e96b2d4:   b.ge		#0x10e96b2dc
          │   │  0x000000010e96b2d8:   mov		x24, x7
   7.22%  ↘   │  0x000000010e96b2dc:   mul		x11, x11, x16
              │  0x000000010e96b2e0:   mov		x7, x22
              │  0x000000010e96b2e4:   cmp		x22, x24
           ╭  │  0x000000010e96b2e8:   b.ge		#0x10e96b2f0
           │  │  0x000000010e96b2ec:   mov		x7, x24
  19.64%   ↘  │  0x000000010e96b2f0:   mov		x21, x23
   2.35%      │  0x000000010e96b2f4:   cmp		x23, x7
   1.13%    ╭ │  0x000000010e96b2f8:   b.ge		#0x10e96b300
            │ │  0x000000010e96b2fc:   mov		x21, x7
   6.24%    ↘ │  0x000000010e96b300:   add		w12, w12, #4        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
              │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
              │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
              │  0x000000010e96b304:   mov		x7, x11
              │  0x000000010e96b308:   cmp		x11, x21
             ╭│  0x000000010e96b30c:   b.ge		#0x10e96b314
             ││  0x000000010e96b310:   mov		x7, x21             ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
             ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
             ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
  24.82%     ↘│  0x000000010e96b314:   cmp		w12, w10
              ╰  0x000000010e96b318:   b.lt		#0x10e96b2b0        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.74%         0x000000010e96b31c:   ldr		x21, [x28, #0x30]   ; ImmutableOopMap {c_rarg0=Oop c_rarg2=Oop c_rarg3=Oop c_rarg5=Oop c_rarg4=Derived_oop_c_rarg5 c_rarg6=Oop r19=Oop }
                                                                           ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                           ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.09%         0x000000010e96b320:   ldr		wzr, [x21]          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                                                                           ;   {poll}
                 0x000000010e96b324:   cmp		w12, w17
                 0x000000010e96b328:   b.lt		#0x10e96b290
                 0x000000010e96b32c:   cmp		w12, w13
                 0x000000010e96b330:   b.lt		#0x10e96b1e8
#+end_src

asm, lt, loop unroll
#+begin_src bash
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 842

                 0x000000010cde2690:   cmp		w17, w12
                 0x000000010cde2694:   sub		w11, w17, w12
                 0x000000010cde2698:   csel		w10, wzr, w11, lt
                 0x000000010cde269c:   cmp		w10, #0xfa0
                 0x000000010cde26a0:   csel		w11, w14, w10, hi
                 0x000000010cde26a4:   add		w10, w11, w12
                 0x000000010cde26a8:   nop
                 0x000000010cde26ac:   nop		                    ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   2.90%      ↗  0x000000010cde26b0:   add		x11, x6, w12, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
              │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
              │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
              │  0x000000010cde26b4:   ldp		x21, x22, [x11, #0x10]
              │  0x000000010cde26b8:   ldr		x23, [x11, #0x20]
              │  0x000000010cde26bc:   mul		x21, x21, x16
  20.85%      │  0x000000010cde26c0:   ldr		x11, [x11, #0x28]
              │  0x000000010cde26c4:   mul		x22, x22, x16
              │  0x000000010cde26c8:   mul		x23, x23, x16
              │  0x000000010cde26cc:   mov		x24, x21
   0.01%      │  0x000000010cde26d0:   cmp		x7, x21
   0.00%  ╭   │  0x000000010cde26d4:   b.lt		#0x10cde26dc
   0.88%  │   │  0x000000010cde26d8:   mov		x24, x7
  15.39%  ↘   │  0x000000010cde26dc:   mul		x11, x11, x16
              │  0x000000010cde26e0:   mov		x7, x22
              │  0x000000010cde26e4:   cmp		x24, x22
           ╭  │  0x000000010cde26e8:   b.lt		#0x10cde26f0
   1.63%   │  │  0x000000010cde26ec:   mov		x7, x24
  18.11%   ↘  │  0x000000010cde26f0:   mov		x21, x23
              │  0x000000010cde26f4:   cmp		x7, x23
            ╭ │  0x000000010cde26f8:   b.lt		#0x10cde2700
   2.03%    │ │  0x000000010cde26fc:   mov		x21, x7
  17.38%    ↘ │  0x000000010cde2700:   add		w12, w12, #4        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
              │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
              │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.02%      │  0x000000010cde2704:   mov		x7, x11
              │  0x000000010cde2708:   cmp		x21, x11
             ╭│  0x000000010cde270c:   b.lt		#0x10cde2714
   0.97%     ││  0x000000010cde2710:   mov		x7, x21             ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
             ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
             ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
  19.15%     ↘│  0x000000010cde2714:   cmp		w12, w10
   0.07%      ╰  0x000000010cde2718:   b.lt		#0x10cde26b0        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.03%         0x000000010cde271c:   ldr		x21, [x28, #0x30]   ; ImmutableOopMap {c_rarg0=Oop c_rarg2=Oop c_rarg3=Oop c_rarg5=Oop c_rarg4=Derived_oop_c_rarg5 c_rarg6=Oop r19=Oop }
                                                                           ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                           ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.06%         0x000000010cde2720:   ldr		wzr, [x21]          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                                                                           ;   {poll}
                 0x000000010cde2724:   cmp		w12, w17
                 0x000000010cde2728:   b.lt		#0x10cde2690
                 0x000000010cde272c:   cmp		w12, w13
                 0x000000010cde2730:   b.lt		#0x10cde25e8
#+end_src
** ge
*** loop unroll
**** release
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt     Score     Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  2175.597 ± 128.123  ops/ms
#+end_src
**** asm
#+begin_src bash
Secondary result "org.openjdk.bench.java.lang.MinMaxVector.longReductionMultiplyMax:asm":
PrintAssembly processed: 218848 total address lines.
Perf output processed (skipped 20.133 seconds):
 Column 1: sampled_pc (20047 events)

Hottest code regions (>10.00% "sampled_pc" events):
 Event counts are percents of total event count.

....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 820

                 0x000000010e96b290:   cmp		w17, w12
                 0x000000010e96b294:   sub		w11, w17, w12
                 0x000000010e96b298:   csel		w10, wzr, w11, lt
                 0x000000010e96b29c:   cmp		w10, #0xfa0
                 0x000000010e96b2a0:   csel		w11, w14, w10, hi
                 0x000000010e96b2a4:   add		w10, w11, w12
                 0x000000010e96b2a8:   nop
                 0x000000010e96b2ac:   nop		                    ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.00%      ↗  0x000000010e96b2b0:   add		x11, x6, w12, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
              │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
              │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.00%      │  0x000000010e96b2b4:   ldp		x21, x22, [x11, #0x10]
              │  0x000000010e96b2b8:   ldr		x23, [x11, #0x20]
              │  0x000000010e96b2bc:   mul		x21, x21, x16
  35.87%      │  0x000000010e96b2c0:   ldr		x11, [x11, #0x28]
              │  0x000000010e96b2c4:   mul		x22, x22, x16
              │  0x000000010e96b2c8:   mul		x23, x23, x16
              │  0x000000010e96b2cc:   mov		x24, x21
   1.32%      │  0x000000010e96b2d0:   cmp		x21, x7
          ╭   │  0x000000010e96b2d4:   b.ge		#0x10e96b2dc
          │   │  0x000000010e96b2d8:   mov		x24, x7
   7.22%  ↘   │  0x000000010e96b2dc:   mul		x11, x11, x16
              │  0x000000010e96b2e0:   mov		x7, x22
              │  0x000000010e96b2e4:   cmp		x22, x24
           ╭  │  0x000000010e96b2e8:   b.ge		#0x10e96b2f0
           │  │  0x000000010e96b2ec:   mov		x7, x24
  19.64%   ↘  │  0x000000010e96b2f0:   mov		x21, x23
   2.35%      │  0x000000010e96b2f4:   cmp		x23, x7
   1.13%    ╭ │  0x000000010e96b2f8:   b.ge		#0x10e96b300
            │ │  0x000000010e96b2fc:   mov		x21, x7
   6.24%    ↘ │  0x000000010e96b300:   add		w12, w12, #4        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
              │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
              │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
              │  0x000000010e96b304:   mov		x7, x11
              │  0x000000010e96b308:   cmp		x11, x21
             ╭│  0x000000010e96b30c:   b.ge		#0x10e96b314
             ││  0x000000010e96b310:   mov		x7, x21             ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
             ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
             ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
  24.82%     ↘│  0x000000010e96b314:   cmp		w12, w10
              ╰  0x000000010e96b318:   b.lt		#0x10e96b2b0        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.74%         0x000000010e96b31c:   ldr		x21, [x28, #0x30]   ; ImmutableOopMap {c_rarg0=Oop c_rarg2=Oop c_rarg3=Oop c_rarg5=Oop c_rarg4=Derived_oop_c_rarg5 c_rarg6=Oop r19=Oop }
                                                                           ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                           ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.09%         0x000000010e96b320:   ldr		wzr, [x21]          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                                                                           ;   {poll}
                 0x000000010e96b324:   cmp		w12, w17
                 0x000000010e96b328:   b.lt		#0x10e96b290
                 0x000000010e96b32c:   cmp		w12, w13
                 0x000000010e96b330:   b.lt		#0x10e96b1e8
....................................................................................................
  99.42%  <total for region 1>

....[Hottest Regions]...............................................................................
  99.42%               C2, level 4  org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 820
   0.35%               C2, level 4  org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 820
   0.04%    libsystem_kernel.dylib  write
   0.04%    libsystem_kernel.dylib  __write_nocancel
   0.03%    libsystem_kernel.dylib  _kernelrpc_mach_port_deallocate_trap
   0.03%    libsystem_kernel.dylib  thread_self_trap
   0.02%    libsystem_kernel.dylib  __psynch_cvwait
   0.01%                      dyld  dyld3::MachOLoaded::findClosestSymbol(unsigned long long, char const**, unsigned long long*) const
   0.00%              libjvm.dylib  IntervalWalker::allocator() const
   0.00%              libjvm.dylib  CompileQueue::get(CompilerThread*)
   0.00%              libjvm.dylib  TypedMethodOptionMatcher::match(methodHandle const&, CompileCommandEnum)
   0.00%              libjvm.dylib  outputStream::update_position(char const*, unsigned long)
   0.00%               interpreter  invokevirtual  182 invokevirtual
   0.00%         libsystem_c.dylib  __sflush
   0.00%    libsystem_kernel.dylib  __psynch_mutexdrop
   0.00%  libsystem_platform.dylib  _platform_strcmp$VARIANT$Base
   0.00%                            <unknown>
....................................................................................................
 100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
  99.77%               C2, level 4  org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 820
   0.04%    libsystem_kernel.dylib  write
   0.04%    libsystem_kernel.dylib  __write_nocancel
   0.03%    libsystem_kernel.dylib  _kernelrpc_mach_port_deallocate_trap
   0.03%    libsystem_kernel.dylib  thread_self_trap
   0.02%    libsystem_kernel.dylib  __psynch_cvwait
   0.01%                      dyld  dyld3::MachOLoaded::findClosestSymbol(unsigned long long, char const**, unsigned long long*) const
   0.00%              libjvm.dylib  TypedMethodOptionMatcher::match(methodHandle const&, CompileCommandEnum)
   0.00%               interpreter  invokevirtual  182 invokevirtual
   0.00%              libjvm.dylib  IntervalWalker::allocator() const
   0.00%    libsystem_kernel.dylib  __psynch_mutexdrop
   0.00%         libsystem_c.dylib  __sflush
   0.00%                            <unknown>
   0.00%              libjvm.dylib  outputStream::update_position(char const*, unsigned long)
   0.00%              libjvm.dylib  CompileQueue::get(CompilerThread*)
   0.00%  libsystem_platform.dylib  _platform_strcmp$VARIANT$Base
....................................................................................................
 100.00%  <totals>

....[Distribution by Source]........................................................................
  99.77%               C2, level 4
   0.17%    libsystem_kernel.dylib
   0.02%              libjvm.dylib
   0.01%                      dyld
   0.00%
   0.00%         libsystem_c.dylib
   0.00%               interpreter
   0.00%  libsystem_platform.dylib
....................................................................................................
 100.00%  <totals>



# Run complete. Total time: 00:00:53

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                  (probability)  (size)   Mode  Cnt     Score     Error   Units
MinMaxVector.longReductionMultiplyMax                100    2048  thrpt    4  2042.190 ± 840.609  ops/ms
MinMaxVector.longReductionMultiplyMax:asm            100    2048  thrpt            NaN               ---
#+end_src
*** no loop unroll
**** release
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  1397.960 ± 19.726  ops/ms
#+end_src
**** asm
#+begin_src bash
Secondary result "org.openjdk.bench.java.lang.MinMaxVector.longReductionMultiplyMax:asm":
PrintAssembly processed: 209288 total address lines.
Perf output processed (skipped 18.708 seconds):
 Column 1: sampled_pc (20052 events)

Hottest code regions (>10.00% "sampled_pc" events):
 Event counts are percents of total event count.

....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 810

                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@48 (line 109)
              0x000000010e8d8560:   str		x0, [x19, #0x30]    ;*putfield stopTime {reexecute=0 rethrow=0 return_oop=0}
                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@42 (line 108)
              0x000000010e8d8564:   ldp		x29, x30, [sp, #0x50]
              0x000000010e8d8568:   add		sp, sp, #0x60
              0x000000010e8d856c:   ldr		x8, [x28, #0x28]    ;   {poll_return}
              0x000000010e8d8570:   cmp		sp, x8
              0x000000010e8d8574:   b.hi		#0x10e8d86ec
              0x000000010e8d8578:   ret
              0x000000010e8d857c:   nop
   0.18%   ↗  0x000000010e8d8580:   mov		x13, x6             ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
           │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
           │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.04%   │  0x000000010e8d8584:   add		x4, x5, w11, sxtw #3
  57.74%   │  0x000000010e8d8588:   ldr		x4, [x4, #0x10]
           │  0x000000010e8d858c:   mul		x4, x4, x17
   0.01%   │  0x000000010e8d8590:   add		w11, w11, #1        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
           │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
           │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
           │  0x000000010e8d8594:   mov		x6, x13
           │  0x000000010e8d8598:   cmp		x13, x4
          ╭│  0x000000010e8d859c:   b.ge		#0x10e8d85a4
  16.34%  ││  0x000000010e8d85a0:   mov		x6, x4              ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
          ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
  25.00%  ↘│  0x000000010e8d85a4:   cmp		w11, w1
           ╰  0x000000010e8d85a8:   b.lt		#0x10e8d8580        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                        ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.07%      0x000000010e8d85ac:   ldr		x1, [x28, #0x30]    ; ImmutableOopMap {r14=Oop r15=Oop r16=Oop c_rarg3=Oop c_rarg2=Derived_oop_c_rarg3 c_rarg5=Oop r19=Oop }
                                                                        ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                        ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.16%      0x000000010e8d85b0:   ldr		wzr, [x1]           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                        ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                                                                        ;   {poll}
              0x000000010e8d85b4:   cmp		w11, w10
              0x000000010e8d85b8:   b.ge		#0x10e8d85e0
              0x000000010e8d85bc:   mov		x13, x6             ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
                                                                        ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
....................................................................................................
  99.55%  <total for region 1>

....[Hottest Regions]...............................................................................
  99.55%               C2, level 4  org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 810
   0.20%               C2, level 4  org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 810
   0.06%    libsystem_kernel.dylib  write
   0.04%    libsystem_kernel.dylib  __write_nocancel
   0.03%    libsystem_kernel.dylib  _kernelrpc_mach_port_deallocate_trap
   0.02%    libsystem_kernel.dylib  thread_self_trap
   0.01%         libsystem_c.dylib  __sfvwrite
   0.00%   libcapstone.5.0.5.dylib  DYLD-STUB$$strcmp
   0.00%              libjvm.dylib  NullCheck::visit(InstructionVisitor*)
   0.00%              libjvm.dylib  TypedMethodOptionMatcher::match(methodHandle const&, CompileCommandEnum)
   0.00%                            <unknown>
   0.00%              libjvm.dylib  BacktraceBuilder::push(Method*, int, JavaThread*)
   0.00%              libjvm.dylib  DYLD-STUB$$write
   0.00%               interpreter  method entry point (kind = zerolocals)
   0.00%                            <unknown>
   0.00%               interpreter  fast_aputfield  211 fast_aputfield
   0.00%         libsystem_c.dylib  fwrite
   0.00%    libsystem_kernel.dylib  __gettimeofday
   0.00%   libsystem_pthread.dylib  pthread_mutex_unlock
   0.00%   libsystem_pthread.dylib  _pthread_mutex_firstfit_unlock_slow
   0.01%  <...other 2 warm regions...>
....................................................................................................
 100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
  99.75%               C2, level 4  org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 810
   0.06%    libsystem_kernel.dylib  write
   0.04%    libsystem_kernel.dylib  __write_nocancel
   0.03%    libsystem_kernel.dylib  _kernelrpc_mach_port_deallocate_trap
   0.02%    libsystem_kernel.dylib  thread_self_trap
   0.01%                            <unknown>
   0.01%         libsystem_c.dylib  __sfvwrite
   0.00%              libjvm.dylib  TypedMethodOptionMatcher::match(methodHandle const&, CompileCommandEnum)
   0.00%   libsystem_pthread.dylib  pthread_mutex_unlock
   0.00%              libjvm.dylib  NullCheck::visit(InstructionVisitor*)
   0.00%              libjvm.dylib  DYLD-STUB$$write
   0.00%               interpreter  fast_aputfield  211 fast_aputfield
   0.00%         libsystem_c.dylib  fwrite
   0.00%              libjvm.dylib  BacktraceBuilder::push(Method*, int, JavaThread*)
   0.00%  libsystem_platform.dylib  _platform_memmove
   0.00%  libsystem_platform.dylib  _platform_strcmp$VARIANT$Base
   0.00%               interpreter  method entry point (kind = zerolocals)
   0.00%   libcapstone.5.0.5.dylib  DYLD-STUB$$strcmp
   0.00%    libsystem_kernel.dylib  __gettimeofday
   0.00%   libsystem_pthread.dylib  _pthread_mutex_firstfit_unlock_slow
....................................................................................................
 100.00%  <totals>

....[Distribution by Source]........................................................................
  99.75%               C2, level 4
   0.16%    libsystem_kernel.dylib
   0.02%              libjvm.dylib
   0.01%         libsystem_c.dylib
   0.01%
   0.01%               interpreter
   0.01%  libsystem_platform.dylib
   0.01%   libsystem_pthread.dylib
   0.00%   libcapstone.5.0.5.dylib
....................................................................................................
 100.00%  <totals>



# Run complete. Total time: 00:00:47

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                  (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionMultiplyMax                100    2048  thrpt    4  1393.026 ± 21.161  ops/ms
MinMaxVector.longReductionMultiplyMax:asm            100    2048  thrpt            NaN              ---
#+end_src
** lt
*** loop unroll
**** release
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  1281.837 ± 82.221  ops/ms
#+end_src
**** asm
#+begin_src bash
Secondary result "org.openjdk.bench.java.lang.MinMaxVector.longReductionMultiplyMax:asm":
PrintAssembly processed: 225882 total address lines.
Perf output processed (skipped 20.030 seconds):
 Column 1: sampled_pc (20053 events)

Hottest code regions (>10.00% "sampled_pc" events):
 Event counts are percents of total event count.

....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 842

                 0x000000010cde2690:   cmp		w17, w12
                 0x000000010cde2694:   sub		w11, w17, w12
                 0x000000010cde2698:   csel		w10, wzr, w11, lt
                 0x000000010cde269c:   cmp		w10, #0xfa0
                 0x000000010cde26a0:   csel		w11, w14, w10, hi
                 0x000000010cde26a4:   add		w10, w11, w12
                 0x000000010cde26a8:   nop
                 0x000000010cde26ac:   nop		                    ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   2.90%      ↗  0x000000010cde26b0:   add		x11, x6, w12, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
              │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
              │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
              │  0x000000010cde26b4:   ldp		x21, x22, [x11, #0x10]
              │  0x000000010cde26b8:   ldr		x23, [x11, #0x20]
              │  0x000000010cde26bc:   mul		x21, x21, x16
  20.85%      │  0x000000010cde26c0:   ldr		x11, [x11, #0x28]
              │  0x000000010cde26c4:   mul		x22, x22, x16
              │  0x000000010cde26c8:   mul		x23, x23, x16
              │  0x000000010cde26cc:   mov		x24, x21
   0.01%      │  0x000000010cde26d0:   cmp		x7, x21
   0.00%  ╭   │  0x000000010cde26d4:   b.lt		#0x10cde26dc
   0.88%  │   │  0x000000010cde26d8:   mov		x24, x7
  15.39%  ↘   │  0x000000010cde26dc:   mul		x11, x11, x16
              │  0x000000010cde26e0:   mov		x7, x22
              │  0x000000010cde26e4:   cmp		x24, x22
           ╭  │  0x000000010cde26e8:   b.lt		#0x10cde26f0
   1.63%   │  │  0x000000010cde26ec:   mov		x7, x24
  18.11%   ↘  │  0x000000010cde26f0:   mov		x21, x23
              │  0x000000010cde26f4:   cmp		x7, x23
            ╭ │  0x000000010cde26f8:   b.lt		#0x10cde2700
   2.03%    │ │  0x000000010cde26fc:   mov		x21, x7
  17.38%    ↘ │  0x000000010cde2700:   add		w12, w12, #4        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
              │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
              │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.02%      │  0x000000010cde2704:   mov		x7, x11
              │  0x000000010cde2708:   cmp		x21, x11
             ╭│  0x000000010cde270c:   b.lt		#0x10cde2714
   0.97%     ││  0x000000010cde2710:   mov		x7, x21             ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
             ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
             ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
  19.15%     ↘│  0x000000010cde2714:   cmp		w12, w10
   0.07%      ╰  0x000000010cde2718:   b.lt		#0x10cde26b0        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.03%         0x000000010cde271c:   ldr		x21, [x28, #0x30]   ; ImmutableOopMap {c_rarg0=Oop c_rarg2=Oop c_rarg3=Oop c_rarg5=Oop c_rarg4=Derived_oop_c_rarg5 c_rarg6=Oop r19=Oop }
                                                                           ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                           ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.06%         0x000000010cde2720:   ldr		wzr, [x21]          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                                                                           ;   {poll}
                 0x000000010cde2724:   cmp		w12, w17
                 0x000000010cde2728:   b.lt		#0x10cde2690
                 0x000000010cde272c:   cmp		w12, w13
                 0x000000010cde2730:   b.lt		#0x10cde25e8
....................................................................................................
  99.51%  <total for region 1>

....[Hottest Regions]...............................................................................
  99.51%               C2, level 4  org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 842
   0.27%               C2, level 4  org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 842
   0.05%    libsystem_kernel.dylib  __write_nocancel
   0.02%    libsystem_kernel.dylib  _kernelrpc_mach_port_deallocate_trap
   0.02%    libsystem_kernel.dylib  write
   0.01%    libsystem_kernel.dylib  thread_self_trap
   0.01%    libsystem_kernel.dylib  __gettimeofday
   0.00%   libcapstone.5.0.5.dylib  decodeInstruction_4
   0.00%   libcapstone.5.0.5.dylib  printInstruction
   0.00%              libjvm.dylib  TypedMethodOptionMatcher::match(methodHandle const&, CompileCommandEnum)
   0.00%              libjvm.dylib  TypedMethodOptionMatcher::next()
   0.00%              libjvm.dylib  Klass::is_subtype_of(Klass*) const
   0.00%              libjvm.dylib  WatcherThread::sleep() const
   0.00%              libjvm.dylib  PlatformMonitor::wait(unsigned long long)
   0.00%              libjvm.dylib  outputStream::update_position(char const*, unsigned long)
   0.00%              libjvm.dylib  StubCodeDesc::contains(unsigned char*) const
   0.00%              libjvm.dylib  xmlStream::write_text(char const*, unsigned long)
   0.00%               C1, level 3  java.net.URL::&lt;init&gt;, version 1, compile id 820
   0.00%                            <unknown>
   0.00%                      dyld  dyld3::MachOLoaded::findClosestSymbol(unsigned long long, char const**, unsigned long long*) const
   0.03%  <...other 7 warm regions...>
....................................................................................................
 100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
  99.78%               C2, level 4  org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 842
   0.05%    libsystem_kernel.dylib  __write_nocancel
   0.02%    libsystem_kernel.dylib  _kernelrpc_mach_port_deallocate_trap
   0.02%    libsystem_kernel.dylib  write
   0.01%    libsystem_kernel.dylib  thread_self_trap
   0.01%    libsystem_kernel.dylib  __gettimeofday
   0.00%   libsystem_pthread.dylib  _pthread_mutex_lock_init_slow
   0.00%    libsystem_kernel.dylib  mach_absolute_time
   0.00%    libsystem_kernel.dylib  madvise
   0.00%   libcapstone.5.0.5.dylib  printInstruction
   0.00%                            <unknown>
   0.00%  libsystem_platform.dylib  _platform_strcmp$VARIANT$Base
   0.00%              libjvm.dylib  TypedMethodOptionMatcher::match(methodHandle const&, CompileCommandEnum)
   0.00%   libcapstone.5.0.5.dylib  decodeInstruction_4
   0.00%              libjvm.dylib  WatcherThread::sleep() const
   0.00%              libjvm.dylib  StubCodeDesc::contains(unsigned char*) const
   0.00%              libjvm.dylib  Klass::is_subtype_of(Klass*) const
   0.00%              libjvm.dylib  TypedMethodOptionMatcher::next()
   0.00%              libjvm.dylib  outputStream::update_position(char const*, unsigned long)
   0.00%    libsystem_kernel.dylib  __psynch_cvwait
   0.03%  <...other 6 warm methods...>
....................................................................................................
 100.00%  <totals>

....[Distribution by Source]........................................................................
  99.78%               C2, level 4
   0.13%    libsystem_kernel.dylib
   0.04%              libjvm.dylib
   0.01%   libcapstone.5.0.5.dylib
   0.01%   libsystem_pthread.dylib
   0.00%
   0.00%                      dyld
   0.00%         libsystem_c.dylib
   0.00%  libsystem_platform.dylib
   0.00%               C1, level 3
....................................................................................................
 100.00%  <totals>



# Run complete. Total time: 00:00:50

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                  (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionMultiplyMax                100    2048  thrpt    4  1337.965 ± 35.920  ops/ms
MinMaxVector.longReductionMultiplyMax:asm            100    2048  thrpt            NaN              ---
#+end_src
*** no loop unroll
**** release
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  1457.104 ± 17.062  ops/ms
#+end_src
**** asm
#+begin_src bash
Secondary result "org.openjdk.bench.java.lang.MinMaxVector.longReductionMultiplyMax:asm":
PrintAssembly processed: 220234 total address lines.
Perf output processed (skipped 19.166 seconds):
 Column 1: sampled_pc (20048 events)

Hottest code regions (>10.00% "sampled_pc" events):
 Event counts are percents of total event count.

....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 825

                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@48 (line 109)
              0x000000010a929f60:   str		x0, [x19, #0x30]    ;*putfield stopTime {reexecute=0 rethrow=0 return_oop=0}
                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@42 (line 108)
              0x000000010a929f64:   ldp		x29, x30, [sp, #0x50]
              0x000000010a929f68:   add		sp, sp, #0x60
              0x000000010a929f6c:   ldr		x8, [x28, #0x28]    ;   {poll_return}
              0x000000010a929f70:   cmp		sp, x8
              0x000000010a929f74:   b.hi		#0x10a92a0ec
              0x000000010a929f78:   ret
              0x000000010a929f7c:   nop
   1.08%   ↗  0x000000010a929f80:   mov		x13, x6             ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
           │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
           │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.06%   │  0x000000010a929f84:   add		x4, x5, w11, sxtw #3
  70.47%   │  0x000000010a929f88:   ldr		x4, [x4, #0x10]
   0.01%   │  0x000000010a929f8c:   mul		x4, x4, x17
           │  0x000000010a929f90:   add		w11, w11, #1        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
           │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
           │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
           │  0x000000010a929f94:   mov		x6, x13
           │  0x000000010a929f98:   cmp		x4, x13
          ╭│  0x000000010a929f9c:   b.lt		#0x10a929fa4
  23.43%  ││  0x000000010a929fa0:   mov		x6, x4              ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
          ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.09%  ↘│  0x000000010a929fa4:   cmp		w11, w1
           ╰  0x000000010a929fa8:   b.lt		#0x10a929f80        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                        ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   4.17%      0x000000010a929fac:   ldr		x1, [x28, #0x30]    ; ImmutableOopMap {r14=Oop r15=Oop r16=Oop c_rarg3=Oop c_rarg2=Derived_oop_c_rarg3 c_rarg5=Oop r19=Oop }
                                                                        ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                        ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.25%      0x000000010a929fb0:   ldr		wzr, [x1]           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                        ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                                                                        ;   {poll}
              0x000000010a929fb4:   cmp		w11, w10
              0x000000010a929fb8:   b.ge		#0x10a929fe0
              0x000000010a929fbc:   mov		x13, x6             ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
                                                                        ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
....................................................................................................
  99.57%  <total for region 1>

....[Hottest Regions]...............................................................................
  99.57%              C2, level 4  org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 825
   0.23%              C2, level 4  org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 825
   0.05%   libsystem_kernel.dylib  write
   0.02%   libsystem_kernel.dylib  _kernelrpc_mach_port_deallocate_trap
   0.02%   libsystem_kernel.dylib  thread_self_trap
   0.00%  libcapstone.5.0.5.dylib  AArch64_printInst
   0.00%             libjvm.dylib  TypedMethodOptionMatcher::match(methodHandle const&, CompileCommandEnum)
   0.00%                           <unknown>
   0.00%             libjvm.dylib  outputStream::update_position(char const*, unsigned long)
   0.00%             libjvm.dylib  PeriodicTask::execute_if_pending(int)
   0.00%             libjvm.dylib  xmlStream::write_text(char const*, unsigned long)
   0.00%              interpreter  fast_aload_0  220 fast_aload_0
   0.00%                     dyld  dyld3::MachOLoaded::findClosestSymbol(unsigned long long, char const**, unsigned long long*) const
   0.00%        libsystem_c.dylib  __vfprintf
   0.00%        libsystem_c.dylib  DYLD-STUB$$__error
....................................................................................................
  99.96%  <totals>

....[Hottest Methods (after inlining)]..............................................................
  99.81%              C2, level 4  org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 825
   0.05%   libsystem_kernel.dylib  write
   0.02%   libsystem_kernel.dylib  _kernelrpc_mach_port_deallocate_trap
   0.02%   libsystem_kernel.dylib  thread_self_trap
   0.00%             libjvm.dylib  TypedMethodOptionMatcher::match(methodHandle const&, CompileCommandEnum)
   0.00%        libsystem_c.dylib  DYLD-STUB$$__error
   0.00%             libjvm.dylib  PeriodicTask::execute_if_pending(int)
   0.00%              interpreter  fast_aload_0  220 fast_aload_0
   0.00%  libcapstone.5.0.5.dylib  AArch64_printInst
   0.00%                           <unknown>
   0.00%             libjvm.dylib  outputStream::update_position(char const*, unsigned long)
   0.00%        libsystem_c.dylib  __vfprintf
   0.00%                     dyld  dyld3::MachOLoaded::findClosestSymbol(unsigned long long, char const**, unsigned long long*) const
   0.00%             libjvm.dylib  xmlStream::write_text(char const*, unsigned long)
....................................................................................................
  99.96%  <totals>

....[Distribution by Source]........................................................................
  99.81%              C2, level 4
   0.10%   libsystem_kernel.dylib
   0.02%             libjvm.dylib
   0.01%        libsystem_c.dylib
   0.00%
   0.00%                     dyld
   0.00%  libcapstone.5.0.5.dylib
   0.00%              interpreter
....................................................................................................
  99.96%  <totals>



# Run complete. Total time: 00:00:52

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                  (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionMultiplyMax                100    2048  thrpt    4  1530.472 ± 94.707  ops/ms
MinMaxVector.longReductionMultiplyMax:asm            100    2048  thrpt            NaN              ---
#+end_src
* 10.4.25
** xtracenorm
BRANCH_MISPRED_NONSPEC (203, 0xcb): Retired branch instructions including calls and returns that mispredicted
INST_ALL (140, 0x8c): All retired instructions
INST_BRANCH (141, 0x8d): Retired branch instructions including calls and returns
*** lt
#+begin_src bash
Benchmark                                                             (probability)  (size)   Mode  Cnt      Score    Error      Units
MinMaxVector.longReductionMultiplyMax                                           100    2048  thrpt    8   1441.373 ± 80.991     ops/ms
MinMaxVector.longReductionMultiplyMax:BRANCH_MISPRED_NONSPEC                    100    2048  thrpt    2      0.035                #/op
MinMaxVector.longReductionMultiplyMax:Branch miss ratio                         100    2048  thrpt    2     ≈ 10⁻⁵            miss/brs
MinMaxVector.longReductionMultiplyMax:CORE_ACTIVE_CYCLE                         100    2048  thrpt    2   2967.064                #/op
MinMaxVector.longReductionMultiplyMax:CPI                                       100    2048  thrpt    2      0.248           clks/insn
MinMaxVector.longReductionMultiplyMax:INST_ALL                                  100    2048  thrpt    2  11955.330                #/op
MinMaxVector.longReductionMultiplyMax:INST_BRANCH                               100    2048  thrpt    2   2554.370                #/op
MinMaxVector.longReductionMultiplyMax:INST_BRANCH density (of insns)            100    2048  thrpt    2      0.214              #/insn
MinMaxVector.longReductionMultiplyMax:IPC                                       100    2048  thrpt    2      4.030           insns/clk
#+end_src
*** ge
#+begin_src bash
Benchmark                                                             (probability)  (size)   Mode  Cnt      Score     Error      Units
MinMaxVector.longReductionMultiplyMax                                           100    2048  thrpt    8   2445.192 ± 156.219     ops/ms
MinMaxVector.longReductionMultiplyMax:BRANCH_MISPRED_NONSPEC                    100    2048  thrpt           0.900                 #/op
MinMaxVector.longReductionMultiplyMax:Branch miss ratio                         100    2048  thrpt          ≈ 10⁻³             miss/brs
MinMaxVector.longReductionMultiplyMax:CORE_ACTIVE_CYCLE                         100    2048  thrpt        1540.935                 #/op
MinMaxVector.longReductionMultiplyMax:CPI                                       100    2048  thrpt           0.148            clks/insn
MinMaxVector.longReductionMultiplyMax:INST_ALL                                  100    2048  thrpt       10444.169                 #/op
MinMaxVector.longReductionMultiplyMax:INST_BRANCH                               100    2048  thrpt        2269.059                 #/op
MinMaxVector.longReductionMultiplyMax:INST_BRANCH density (of insns)            100    2048  thrpt           0.217               #/insn
MinMaxVector.longReductionMultiplyMax:IPC                                       100    2048  thrpt           6.778            insns/clk
#+end_src
* 9.4.25
** aarch64 0408.branch-never-ge vs 0408.branch-never-lt
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt     Score     Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  2168.467 ± 213.914  ops/ms # ge
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  1398.860 ±  95.932  ops/ms # le
#+end_src

ge assembly:
#+begin_src asm
  0x000000010d70c604:   mov		x0, x14
  0x000000010d70c608:   cmp		x14, x16
  0x000000010d70c60c:   b.ge		#0x10d70c614
  0x000000010d70c610:   mov		x0, x16             ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@25 (line 25)
#+end_src

lt assembly:
#+begin_src asm
  0x000000010d70c604:   mov		x0, x14
  0x000000010d70c608:   cmp		x16, x14
  0x000000010d70c60c:   b.lt		#0x10d70c614
  0x000000010d70c610:   mov		x0, x16             ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@25 (line 25)#+end_src
#+end_src
*** xtraceperfasm ge
#+begin_src asm
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 794

                 0x000000010c3c5b1c:   cmp		w10, #0xfa0
                 0x000000010c3c5b20:   csel		w11, w14, w10, hi
                 0x000000010c3c5b24:   add		w10, w11, w12
                 0x000000010c3c5b28:   nop
                 0x000000010c3c5b2c:   nop		                    ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
              ↗  0x000000010c3c5b30:   add		x11, x6, w12, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
              │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
              │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.14%      │  0x000000010c3c5b34:   ldp		x21, x22, [x11, #0x10]
   0.03%      │  0x000000010c3c5b38:   ldr		x23, [x11, #0x20]
              │  0x000000010c3c5b3c:   mul		x21, x21, x16
  25.97%      │  0x000000010c3c5b40:   ldr		x11, [x11, #0x28]
              │  0x000000010c3c5b44:   mul		x22, x22, x16
              │  0x000000010c3c5b48:   mul		x23, x23, x16
              │  0x000000010c3c5b4c:   mov		x24, x21
   5.25%      │  0x000000010c3c5b50:   cmp		x21, x7
          ╭   │  0x000000010c3c5b54:   b.ge		#0x10c3c5b5c
          │   │  0x000000010c3c5b58:   mov		x24, x7
   3.99%  ↘   │  0x000000010c3c5b5c:   mul		x11, x11, x16
              │  0x000000010c3c5b60:   mov		x7, x22
              │  0x000000010c3c5b64:   cmp		x22, x24
           ╭  │  0x000000010c3c5b68:   b.ge		#0x10c3c5b70
           │  │  0x000000010c3c5b6c:   mov		x7, x24
  24.96%   ↘  │  0x000000010c3c5b70:   mov		x21, x23
   0.22%      │  0x000000010c3c5b74:   cmp		x23, x7
   5.12%    ╭ │  0x000000010c3c5b78:   b.ge		#0x10c3c5b80
            │ │  0x000000010c3c5b7c:   mov		x21, x7
   2.72%    ↘ │  0x000000010c3c5b80:   add		w12, w12, #4        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
              │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
              │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
              │  0x000000010c3c5b84:   mov		x7, x11
              │  0x000000010c3c5b88:   cmp		x11, x21
             ╭│  0x000000010c3c5b8c:   b.ge		#0x10c3c5b94
             ││  0x000000010c3c5b90:   mov		x7, x21             ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
             ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
             ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
  29.91%     ↘│  0x000000010c3c5b94:   cmp		w12, w10
              ╰  0x000000010c3c5b98:   b.lt		#0x10c3c5b30        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.84%         0x000000010c3c5b9c:   ldr		x21, [x28, #0x30]   ; ImmutableOopMap {c_rarg0=Oop c_rarg2=Oop c_rarg3=Oop c_rarg5=Oop c_rarg4=Derived_oop_c_rarg5 c_rarg6=Oop r19=Oop }
                                                                           ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                           ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.07%         0x000000010c3c5ba0:   ldr		wzr, [x21]          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                                                                           ;   {poll}
                 0x000000010c3c5ba4:   cmp		w12, w17
                 0x000000010c3c5ba8:   b.lt		#0x10c3c5b10
                 0x000000010c3c5bac:   cmp		w12, w13
                 0x000000010c3c5bb0:   b.lt		#0x10c3c5a68
....................................................................................................
  99.24%  <total for region 1>

Benchmark                                  (probability)  (size)   Mode  Cnt     Score     Error   Units
MinMaxVector.longReductionMultiplyMax                100    2048  thrpt    4  2454.071 ± 774.462  ops/ms
MinMaxVector.longReductionMultiplyMax:asm            100    2048  thrpt            NaN               ---
#+end_src
*** xtraceperfasm lt
#+begin_src asm
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 811

                 0x000000010e938590:   cmp		w17, w12
                 0x000000010e938594:   sub		w11, w17, w12
                 0x000000010e938598:   csel		w10, wzr, w11, lt
                 0x000000010e93859c:   cmp		w10, #0xfa0
                 0x000000010e9385a0:   csel		w11, w14, w10, hi
                 0x000000010e9385a4:   add		w10, w11, w12
                 0x000000010e9385a8:   nop
                 0x000000010e9385ac:   nop		                    ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   1.69%      ↗  0x000000010e9385b0:   add		x11, x6, w12, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
              │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
              │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.21%      │  0x000000010e9385b4:   ldp		x21, x22, [x11, #0x10]
              │  0x000000010e9385b8:   ldr		x23, [x11, #0x20]
              │  0x000000010e9385bc:   mul		x21, x21, x16
  19.36%      │  0x000000010e9385c0:   ldr		x11, [x11, #0x28]
              │  0x000000010e9385c4:   mul		x22, x22, x16
              │  0x000000010e9385c8:   mul		x23, x23, x16
              │  0x000000010e9385cc:   mov		x24, x21
              │  0x000000010e9385d0:   cmp		x7, x21
          ╭   │  0x000000010e9385d4:   b.lt		#0x10e9385dc
   3.29%  │   │  0x000000010e9385d8:   mov		x24, x7
  15.79%  ↘   │  0x000000010e9385dc:   mul		x11, x11, x16
              │  0x000000010e9385e0:   mov		x7, x22
              │  0x000000010e9385e4:   cmp		x24, x22
           ╭  │  0x000000010e9385e8:   b.lt		#0x10e9385f0
   3.08%   │  │  0x000000010e9385ec:   mov		x7, x24
  16.17%   ↘  │  0x000000010e9385f0:   mov		x21, x23
              │  0x000000010e9385f4:   cmp		x7, x23
            ╭ │  0x000000010e9385f8:   b.lt		#0x10e938600
   2.15%    │ │  0x000000010e9385fc:   mov		x21, x7
  17.68%    ↘ │  0x000000010e938600:   add		w12, w12, #4        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
              │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
              │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
              │  0x000000010e938604:   mov		x7, x11
              │  0x000000010e938608:   cmp		x21, x11
             ╭│  0x000000010e93860c:   b.lt		#0x10e938614
   1.82%     ││  0x000000010e938610:   mov		x7, x21             ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
             ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
             ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
  18.20%     ↘│  0x000000010e938614:   cmp		w12, w10
              ╰  0x000000010e938618:   b.lt		#0x10e9385b0        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.04%         0x000000010e93861c:   ldr		x21, [x28, #0x30]   ; ImmutableOopMap {c_rarg0=Oop c_rarg2=Oop c_rarg3=Oop c_rarg5=Oop c_rarg4=Derived_oop_c_rarg5 c_rarg6=Oop r19=Oop }
                                                                           ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                           ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.04%         0x000000010e938620:   ldr		wzr, [x21]          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                                                                           ;   {poll}
                 0x000000010e938624:   cmp		w12, w17
                 0x000000010e938628:   b.lt		#0x10e938590
   0.00%         0x000000010e93862c:   cmp		w12, w13
                 0x000000010e938630:   b.lt		#0x10e9384e8
                 0x000000010e938634:   mov		x17, x7
                 0x000000010e938638:   b		#0x10e938510
                 0x000000010e93863c:   mov		x17, xzr
                 0x000000010e938640:   b		#0x10e938510        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                 0x000000010e938644:   mov		w1, #-0x92
                 0x000000010e938648:   mov		x29, x5
                 0x000000010e93864c:   stp		x2, x20, [sp, #0x10]
....................................................................................................
  99.53%  <total for region 1>

Benchmark                                  (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionMultiplyMax                100    2048  thrpt    4  1443.658 ± 41.721  ops/ms
MinMaxVector.longReductionMultiplyMax:asm            100    2048  thrpt            NaN              ---
#+end_src
** aarch64 0317.branch-never vs 0408.branch-never
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt     Score     Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  2160.492 ± 414.693  ops/ms # 0317.branch-never
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  2265.233 ± 410.039  ops/ms # 0408.branch-never
#+end_src
** aarch64 1.4 vs 9.4 topic.avoid-cmov-long-min-max.0327.branch-never
*** comparison
**** 1.4 profile longReductionMultiplyMax
#+begin_src asm
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 561

                 0x0000000117b6fddc:   cmp		w10, #0xfa0
                 0x0000000117b6fde0:   csel		w11, w14, w10, hi
                 0x0000000117b6fde4:   add		w10, w11, w12
                 0x0000000117b6fde8:   nop
                 0x0000000117b6fdec:   nop		                    ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
              ?  0x0000000117b6fdf0:   add		x11, x6, w12, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
              ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
              ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.03%      ?  0x0000000117b6fdf4:   ldp		x21, x22, [x11, #0x10]
   0.01%      ?  0x0000000117b6fdf8:   ldr		x23, [x11, #0x20]
              ?  0x0000000117b6fdfc:   mul		x21, x21, x16
  27.63%      ?  0x0000000117b6fe00:   ldr		x11, [x11, #0x28]
              ?  0x0000000117b6fe04:   mul		x22, x22, x16
              ?  0x0000000117b6fe08:   mul		x23, x23, x16
              ?  0x0000000117b6fe0c:   mov		x24, x21
   2.30%      ?  0x0000000117b6fe10:   cmp		x21, x7
          ?   ?  0x0000000117b6fe14:   b.ge		#0x117b6fe1c
          ?   ?  0x0000000117b6fe18:   mov		x24, x7
  17.59%  ?   ?  0x0000000117b6fe1c:   mul		x11, x11, x16
              ?  0x0000000117b6fe20:   mov		x7, x22
              ?  0x0000000117b6fe24:   cmp		x22, x24
           ?  ?  0x0000000117b6fe28:   b.ge		#0x117b6fe30
           ?  ?  0x0000000117b6fe2c:   mov		x7, x24
  14.37%   ?  ?  0x0000000117b6fe30:   mov		x21, x23
   0.11%      ?  0x0000000117b6fe34:   cmp		x23, x7
   2.30%    ? ?  0x0000000117b6fe38:   b.ge		#0x117b6fe40
            ? ?  0x0000000117b6fe3c:   mov		x21, x7
  15.95%    ? ?  0x0000000117b6fe40:   add		w12, w12, #4        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
              ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
              ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
              ?  0x0000000117b6fe44:   mov		x7, x11
              ?  0x0000000117b6fe48:   cmp		x11, x21
             ??  0x0000000117b6fe4c:   b.ge		#0x117b6fe54
             ??  0x0000000117b6fe50:   mov		x7, x21             ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
             ??                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
             ??                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
  18.36%     ??  0x0000000117b6fe54:   cmp		w12, w10
              ?  0x0000000117b6fe58:   b.lt		#0x117b6fdf0        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.73%         0x0000000117b6fe5c:   ldr		x21, [x28, #0x30]   ; ImmutableOopMap {c_rarg0=Oop c_rarg2=Oop c_rarg3=Oop c_rarg5=Oop c_rarg4=Derived_oop_c_rarg5 c_rarg6=Oop r19=Oop }
                                                                           ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                           ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.09%         0x0000000117b6fe60:   ldr		wzr, [x21]          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                                                                           ;   {poll}
                 0x0000000117b6fe64:   cmp		w12, w17
                 0x0000000117b6fe68:   b.lt		#0x117b6fdd0
                 0x0000000117b6fe6c:   cmp		w12, w13
                 0x0000000117b6fe70:   b.lt		#0x117b6fd28
....................................................................................................
  99.47%  <total for region 1>
#+end_src
**** 9.4 profile longReductionMultiplyMax
#+begin_src asm
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 806

                 0x000000010a849a50:   cmp		w17, w12
                 0x000000010a849a54:   sub		w11, w17, w12
                 0x000000010a849a58:   csel		w10, wzr, w11, lt
                 0x000000010a849a5c:   cmp		w10, #0xfa0
                 0x000000010a849a60:   csel		w11, w14, w10, hi
                 0x000000010a849a64:   add		w10, w11, w12
                 0x000000010a849a68:   nop
                 0x000000010a849a6c:   nop		                    ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   2.09%      ↗  0x000000010a849a70:   add		x11, x6, w12, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
              │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
              │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.07%      │  0x000000010a849a74:   ldp		x21, x22, [x11, #0x10]
              │  0x000000010a849a78:   ldr		x23, [x11, #0x20]
              │  0x000000010a849a7c:   mul		x21, x21, x16
  19.90%      │  0x000000010a849a80:   ldr		x11, [x11, #0x28]
              │  0x000000010a849a84:   mul		x22, x22, x16
              │  0x000000010a849a88:   mul		x23, x23, x16
              │  0x000000010a849a8c:   mov		x24, x21
              │  0x000000010a849a90:   cmp		x7, x21
          ╭   │  0x000000010a849a94:   b.lt		#0x10a849a9c
   0.03%  │   │  0x000000010a849a98:   mov		x24, x7
  15.98%  ↘   │  0x000000010a849a9c:   mul		x11, x11, x16
              │  0x000000010a849aa0:   mov		x7, x22
              │  0x000000010a849aa4:   cmp		x24, x22
           ╭  │  0x000000010a849aa8:   b.lt		#0x10a849ab0
   3.84%   │  │  0x000000010a849aac:   mov		x7, x24
  18.23%   ↘  │  0x000000010a849ab0:   mov		x21, x23
              │  0x000000010a849ab4:   cmp		x7, x23
            ╭ │  0x000000010a849ab8:   b.lt		#0x10a849ac0
   1.47%    │ │  0x000000010a849abc:   mov		x21, x7
  17.49%    ↘ │  0x000000010a849ac0:   add		w12, w12, #4        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
              │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
              │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
              │  0x000000010a849ac4:   mov		x7, x11
   0.01%      │  0x000000010a849ac8:   cmp		x21, x11
             ╭│  0x000000010a849acc:   b.lt		#0x10a849ad4
   1.40%     ││  0x000000010a849ad0:   mov		x7, x21             ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
             ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
             ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
  18.91%     ↘│  0x000000010a849ad4:   cmp		w12, w10
              ╰  0x000000010a849ad8:   b.lt		#0x10a849a70        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.04%         0x000000010a849adc:   ldr		x21, [x28, #0x30]   ; ImmutableOopMap {c_rarg0=Oop c_rarg2=Oop c_rarg3=Oop c_rarg5=Oop c_rarg4=Derived_oop_c_rarg5 c_rarg6=Oop r19=Oop }
                                                                           ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                           ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.06%         0x000000010a849ae0:   ldr		wzr, [x21]          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                                                                           ;   {poll}
                 0x000000010a849ae4:   cmp		w12, w17
                 0x000000010a849ae8:   b.lt		#0x10a849a50
                 0x000000010a849aec:   cmp		w12, w13
                 0x000000010a849af0:   b.lt		#0x10a8499a8
....................................................................................................
  99.52%  <total for region 1>
#+end_src
*** 1.4
**** release
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt     Score     Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  2321.742 ? 289.782  ops/ms
MinMaxVector.longReductionSimpleMax              100    2048  thrpt    8  3637.567 ?  84.313  ops/ms
#+end_src
**** profile
#+begin_src bash
Benchmark                                  (probability)  (size)   Mode  Cnt     Score      Error   Units
MinMaxVector.longReductionMultiplyMax                100    2048  thrpt    4  2303.509 ? 1103.018  ops/ms
MinMaxVector.longReductionMultiplyMax:asm            100    2048  thrpt            NaN                ---
MinMaxVector.longReductionSimpleMax                  100    2048  thrpt    4  3634.028 ? 112.144  ops/ms
MinMaxVector.longReductionSimpleMax:asm              100    2048  thrpt            NaN               ---
#+end_src
***** longReductionMultiplyMax
#+begin_src asm
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 561

                 0x0000000117b6fddc:   cmp		w10, #0xfa0
                 0x0000000117b6fde0:   csel		w11, w14, w10, hi
                 0x0000000117b6fde4:   add		w10, w11, w12
                 0x0000000117b6fde8:   nop
                 0x0000000117b6fdec:   nop		                    ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
              ?  0x0000000117b6fdf0:   add		x11, x6, w12, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
              ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
              ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.03%      ?  0x0000000117b6fdf4:   ldp		x21, x22, [x11, #0x10]
   0.01%      ?  0x0000000117b6fdf8:   ldr		x23, [x11, #0x20]
              ?  0x0000000117b6fdfc:   mul		x21, x21, x16
  27.63%      ?  0x0000000117b6fe00:   ldr		x11, [x11, #0x28]
              ?  0x0000000117b6fe04:   mul		x22, x22, x16
              ?  0x0000000117b6fe08:   mul		x23, x23, x16
              ?  0x0000000117b6fe0c:   mov		x24, x21
   2.30%      ?  0x0000000117b6fe10:   cmp		x21, x7
          ?   ?  0x0000000117b6fe14:   b.ge		#0x117b6fe1c
          ?   ?  0x0000000117b6fe18:   mov		x24, x7
  17.59%  ?   ?  0x0000000117b6fe1c:   mul		x11, x11, x16
              ?  0x0000000117b6fe20:   mov		x7, x22
              ?  0x0000000117b6fe24:   cmp		x22, x24
           ?  ?  0x0000000117b6fe28:   b.ge		#0x117b6fe30
           ?  ?  0x0000000117b6fe2c:   mov		x7, x24
  14.37%   ?  ?  0x0000000117b6fe30:   mov		x21, x23
   0.11%      ?  0x0000000117b6fe34:   cmp		x23, x7
   2.30%    ? ?  0x0000000117b6fe38:   b.ge		#0x117b6fe40
            ? ?  0x0000000117b6fe3c:   mov		x21, x7
  15.95%    ? ?  0x0000000117b6fe40:   add		w12, w12, #4        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
              ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
              ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
              ?  0x0000000117b6fe44:   mov		x7, x11
              ?  0x0000000117b6fe48:   cmp		x11, x21
             ??  0x0000000117b6fe4c:   b.ge		#0x117b6fe54
             ??  0x0000000117b6fe50:   mov		x7, x21             ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
             ??                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
             ??                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
  18.36%     ??  0x0000000117b6fe54:   cmp		w12, w10
              ?  0x0000000117b6fe58:   b.lt		#0x117b6fdf0        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.73%         0x0000000117b6fe5c:   ldr		x21, [x28, #0x30]   ; ImmutableOopMap {c_rarg0=Oop c_rarg2=Oop c_rarg3=Oop c_rarg5=Oop c_rarg4=Derived_oop_c_rarg5 c_rarg6=Oop r19=Oop }
                                                                           ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                           ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.09%         0x0000000117b6fe60:   ldr		wzr, [x21]          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                                                                           ;   {poll}
                 0x0000000117b6fe64:   cmp		w12, w17
                 0x0000000117b6fe68:   b.lt		#0x117b6fdd0
                 0x0000000117b6fe6c:   cmp		w12, w13
                 0x0000000117b6fe70:   b.lt		#0x117b6fd28
....................................................................................................
  99.47%  <total for region 1>
#+end_src
***** longReductionSimpleMax
#+begin_src asm
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub, version 5, compile id 542

                                 0x0000000113951b4c:   stp		x17, x15, [sp, #0x10]
                                 0x0000000113951b50:   str		x20, [sp, #0x60]
                                 0x0000000113951b54:   nop
                                 0x0000000113951b58:   nop
                                 0x0000000113951b5c:   nop		                    ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@14 (line 295)
                                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                          ?      0x0000000113951b60:   add		x27, x24, w12, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
                          ?                                                                ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
                          ?                                                                ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   5.80%                  ?      0x0000000113951b64:   ldr		x15, [x27, #0x10]
   0.05%                  ?      0x0000000113951b68:   mov		x29, x25
   0.04%                  ?      0x0000000113951b6c:   cmp		x25, x15
   0.13%  ?               ?      0x0000000113951b70:   b.ge		#0x113951b78
          ?               ?      0x0000000113951b74:   mov		x29, x15
   5.50%  ?               ?      0x0000000113951b78:   ldr		x16, [x27, #0x18]
   0.14%                  ?      0x0000000113951b7c:   mov		x15, x29
   0.19%                  ?      0x0000000113951b80:   cmp		x29, x16
   0.15%   ?              ?      0x0000000113951b84:   b.ge		#0x113951b8c
           ?              ?      0x0000000113951b88:   mov		x15, x16
   5.22%   ?              ?      0x0000000113951b8c:   ldr		x17, [x27, #0x20]
   0.07%                  ?      0x0000000113951b90:   mov		x16, x15
   0.03%                  ?      0x0000000113951b94:   cmp		x15, x17
   0.07%    ?             ?      0x0000000113951b98:   b.ge		#0x113951ba0
            ?             ?      0x0000000113951b9c:   mov		x16, x17
   5.39%    ?             ?      0x0000000113951ba0:   ldr		x0, [x27, #0x28]
   0.07%                  ?      0x0000000113951ba4:   mov		x15, x16
   0.16%                  ?      0x0000000113951ba8:   cmp		x16, x0
   0.11%     ?            ?      0x0000000113951bac:   b.ge		#0x113951bb4
             ?            ?      0x0000000113951bb0:   mov		x15, x0
   5.31%     ?            ?      0x0000000113951bb4:   ldr		x1, [x27, #0x30]
   0.04%                  ?      0x0000000113951bb8:   mov		x16, x15
   0.11%                  ?      0x0000000113951bbc:   cmp		x15, x1
   0.03%      ?           ?      0x0000000113951bc0:   b.ge		#0x113951bc8
              ?           ?      0x0000000113951bc4:   mov		x16, x1
   5.33%      ?           ?      0x0000000113951bc8:   ldr		x2, [x27, #0x38]
   0.08%                  ?      0x0000000113951bcc:   mov		x15, x16
   0.17%                  ?      0x0000000113951bd0:   cmp		x16, x2
   0.11%       ?          ?      0x0000000113951bd4:   b.ge		#0x113951bdc
               ?          ?      0x0000000113951bd8:   mov		x15, x2
   5.79%       ?          ?      0x0000000113951bdc:   ldr		x3, [x27, #0x40]
   0.07%                  ?      0x0000000113951be0:   mov		x16, x15
   0.04%                  ?      0x0000000113951be4:   cmp		x15, x3
   0.02%        ?         ?      0x0000000113951be8:   b.ge		#0x113951bf0
                ?         ?      0x0000000113951bec:   mov		x16, x3
   5.32%        ?         ?      0x0000000113951bf0:   ldr		x4, [x27, #0x48]
   0.08%                  ?      0x0000000113951bf4:   mov		x15, x16
   0.07%                  ?      0x0000000113951bf8:   cmp		x16, x4
   0.07%         ?        ?      0x0000000113951bfc:   b.ge		#0x113951c04
   0.00%         ?        ?      0x0000000113951c00:   mov		x15, x4
   5.77%         ?        ?      0x0000000113951c04:   ldr		x5, [x27, #0x50]
   0.08%                  ?      0x0000000113951c08:   mov		x16, x15
   0.04%                  ?      0x0000000113951c0c:   cmp		x15, x5
   0.04%          ?       ?      0x0000000113951c10:   b.ge		#0x113951c18
                  ?       ?      0x0000000113951c14:   mov		x16, x5
   5.42%          ?       ?      0x0000000113951c18:   ldr		x6, [x27, #0x58]
   0.09%                  ?      0x0000000113951c1c:   mov		x15, x16
   0.15%                  ?      0x0000000113951c20:   cmp		x16, x6
   0.08%           ?      ?      0x0000000113951c24:   b.ge		#0x113951c2c
                   ?      ?      0x0000000113951c28:   mov		x15, x6
   5.49%           ?      ?      0x0000000113951c2c:   ldr		x7, [x27, #0x60]
   0.11%                  ?      0x0000000113951c30:   mov		x16, x15
   0.06%                  ?      0x0000000113951c34:   cmp		x15, x7
   0.06%            ?     ?      0x0000000113951c38:   b.ge		#0x113951c40
                    ?     ?      0x0000000113951c3c:   mov		x16, x7
   5.89%            ?     ?      0x0000000113951c40:   ldr		x20, [x27, #0x68]
   0.07%                  ?      0x0000000113951c44:   mov		x15, x16
   0.17%                  ?      0x0000000113951c48:   cmp		x16, x20
   0.02%             ?    ?      0x0000000113951c4c:   b.ge		#0x113951c54
                     ?    ?      0x0000000113951c50:   mov		x15, x20
   5.52%             ?    ?      0x0000000113951c54:   ldr		x22, [x27, #0x70]
   0.07%                  ?      0x0000000113951c58:   mov		x16, x15
   0.10%                  ?      0x0000000113951c5c:   cmp		x15, x22
   0.01%              ?   ?      0x0000000113951c60:   b.ge		#0x113951c68
                      ?   ?      0x0000000113951c64:   mov		x16, x22
   5.53%              ?   ?      0x0000000113951c68:   ldr		x23, [x27, #0x78]
   0.06%                  ?      0x0000000113951c6c:   mov		x15, x16
   0.14%                  ?      0x0000000113951c70:   cmp		x16, x23
   0.12%               ?  ?      0x0000000113951c74:   b.ge		#0x113951c7c
                       ?  ?      0x0000000113951c78:   mov		x15, x23
   5.58%               ?  ?      0x0000000113951c7c:   ldr		x26, [x27, #0x80]
   0.13%                  ?      0x0000000113951c80:   mov		x16, x15
   0.07%                  ?      0x0000000113951c84:   cmp		x15, x26
   0.14%                ? ?      0x0000000113951c88:   b.ge		#0x113951c90
                        ? ?      0x0000000113951c8c:   mov		x16, x26
   5.28%                ? ?      0x0000000113951c90:   ldr		x27, [x27, #0x88]
   0.04%                  ?      0x0000000113951c94:   add		w12, w12, #0x10     ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                          ?                                                                ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@30 (line 294)
                          ?                                                                ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.14%                  ?      0x0000000113951c98:   mov		x25, x16
   0.03%                  ?      0x0000000113951c9c:   cmp		x16, x27
   0.12%                 ??      0x0000000113951ca0:   b.ge		#0x113951ca8
   4.94%                 ??      0x0000000113951ca4:   mov		x25, x27            ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
                         ??                                                                ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
                         ??                                                                ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.79%                 ??      0x0000000113951ca8:   cmp		w12, w11
   0.00%                  ?      0x0000000113951cac:   b.lt		#0x113951b60        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
                                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                                 0x0000000113951cb0:   ldr		x11, [x28, #0x30]   ; ImmutableOopMap {rlocals=Oop [0]=Oop [8]=Oop rdispatch=Derived_oop_[8] [16]=Oop [24]=Oop [96]=Oop }
                                                                                           ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                                           ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
                                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.02%                         0x0000000113951cb4:   ldr		wzr, [x11]          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
                                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                                                                                           ;   {poll}
                                 0x0000000113951cb8:   cmp		w12, w10
                                 0x0000000113951cbc:   b.lt		#0x113951b20
                                 0x0000000113951cc0:   ldp		x16, x0, [sp]
                                 0x0000000113951cc4:   ldp		x17, x15, [sp, #0x10]
   0.02%                         0x0000000113951cc8:   ldr		x20, [sp, #0x60]
                                 0x0000000113951ccc:   cmp		w12, w14
                                 0x0000000113951cd0:   b.lt		#0x113951af8
                                 0x0000000113951cd4:   mov		x11, x25            ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
                                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.01%                      ?  0x0000000113951cd8:   ldarb		w14, [x21]          ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
                              ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@32 (line 107)
                              ?  0x0000000113951cdc:   ldr		x1, [x28, #0x30]
                              ?  0x0000000113951ce0:   add		x19, x19, #1        ; ImmutableOopMap {r15=Oop r16=Oop r17=Oop c_rarg0=Oop rdispatch=Derived_oop_c_rarg0 resp=Oop }
                              ?                                                            ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                              ?                                                            ; - (reexecute) org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@35 (line 107)
   0.03%                      ?  0x0000000113951ce4:   ldr		wzr, [x1]           ;   {poll}
                              ?  0x0000000113951ce8:   cbnz		w14, #0x113951aa8   ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                              ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@38 (line 108)
   0.00%                      ?  0x0000000113951cec:   ldr		w14, [x15, #0xc]    ;*getfield size {reexecute=0 rethrow=0 return_oop=0}
                              ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@8 (line 294)
                              ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                              ?  0x0000000113951cf0:   cmp		w14, #0
                           ?  ?  0x0000000113951cf4:   b.le		#0x113951d60        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                           ?  ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
                           ?  ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                           ?  ?  0x0000000113951cf8:   ldr		w10, [x15, #0x2c]
                           ?  ?  0x0000000113951cfc:   lsl		x24, x10, #3        ;*getfield maxLongA {reexecute=0 rethrow=0 return_oop=0}
                           ?  ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@15 (line 295)
                           ?  ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.04%                   ?  ?  0x0000000113951d00:   ldr		w10, [x24, #0xc]    ; implicit exception: dispatches to 0x0000000113951d68
                           ?  ?                                                            ;*laload {reexecute=0 rethrow=0 return_oop=0}
                           ?  ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
                           ?  ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                           ?  ?  0x0000000113951d04:   sxtw		x11, w14
                           ?  ?  0x0000000113951d08:   sub		x1, x11, #0xf
                           ?  ?  0x0000000113951d0c:   sxtw		x12, w10
                           ?  ?  0x0000000113951d10:   sub		x11, x11, #1
                           ?  ?  0x0000000113951d14:   cbz		w10, #0x113951d68
   0.01%                   ?  ?  0x0000000113951d18:   cmp		x11, x12
                           ?  ?  0x0000000113951d1c:   b.hs		#0x113951d68
   0.05%                   ?  ?  0x0000000113951d20:   ldr		x11, [x24, #0x10]
   0.00%                   ?  ?  0x0000000113951d24:   mov		x12, #-0x80000000
                           ?  ?  0x0000000113951d28:   mov		x10, x1
                           ?  ?  0x0000000113951d2c:   cmp		x1, x12
                           ?? ?  0x0000000113951d30:   b.ge		#0x113951d38
                           ?? ?  0x0000000113951d34:   mov		x10, x12
   0.01%                   ?? ?  0x0000000113951d38:   mov		x12, xzr
                           ?  ?  0x0000000113951d3c:   mov		w10, w10
                           ?  ?  0x0000000113951d40:   mov		x25, x11
                           ?  ?  0x0000000113951d44:   cmp		x11, x12
                           ? ??  0x0000000113951d48:   b.ge		#0x113951d50
                           ? ??  0x0000000113951d4c:   mov		x25, x12            ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
                           ? ??                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
                           ? ??                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.04%                   ? ??  0x0000000113951d50:   cmp		w10, #1
                           ?  ?  0x0000000113951d54:   b.le		#0x113951d90
                           ?  ?  0x0000000113951d58:   mov		w12, #1
                           ?  ?  0x0000000113951d5c:   b		#0x113951b2c
                           ?  ?  0x0000000113951d60:   mov		x11, xzr
                              ?  0x0000000113951d64:   b		#0x113951cd8        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
                                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                                 0x0000000113951d68:   mov		w1, #-0x92
....................................................................................................
  98.45%  <total for region 1>
#+end_src
*** 9.4
**** release
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  1399.006 ± 33.211  ops/ms
MinMaxVector.longReductionSimpleMax              100    2048  thrpt    8  3719.712 ± 87.950  ops/ms
#+end_src
**** profile
#+begin_src bash
Benchmark                                  (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionMultiplyMax                100    2048  thrpt    4  1390.658 ± 99.802  ops/ms
MinMaxVector.longReductionMultiplyMax:asm            100    2048  thrpt            NaN              ---
MinMaxVector.longReductionSimpleMax                  100    2048  thrpt    4  3673.639 ± 65.184  ops/ms
MinMaxVector.longReductionSimpleMax:asm              100    2048  thrpt            NaN              ---
#+end_src
***** longReductionMultiplyMax
#+begin_src asm
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 806

                 0x000000010a849a50:   cmp		w17, w12
                 0x000000010a849a54:   sub		w11, w17, w12
                 0x000000010a849a58:   csel		w10, wzr, w11, lt
                 0x000000010a849a5c:   cmp		w10, #0xfa0
                 0x000000010a849a60:   csel		w11, w14, w10, hi
                 0x000000010a849a64:   add		w10, w11, w12
                 0x000000010a849a68:   nop
                 0x000000010a849a6c:   nop		                    ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   2.09%      ↗  0x000000010a849a70:   add		x11, x6, w12, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
              │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
              │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.07%      │  0x000000010a849a74:   ldp		x21, x22, [x11, #0x10]
              │  0x000000010a849a78:   ldr		x23, [x11, #0x20]
              │  0x000000010a849a7c:   mul		x21, x21, x16
  19.90%      │  0x000000010a849a80:   ldr		x11, [x11, #0x28]
              │  0x000000010a849a84:   mul		x22, x22, x16
              │  0x000000010a849a88:   mul		x23, x23, x16
              │  0x000000010a849a8c:   mov		x24, x21
              │  0x000000010a849a90:   cmp		x7, x21
          ╭   │  0x000000010a849a94:   b.lt		#0x10a849a9c
   0.03%  │   │  0x000000010a849a98:   mov		x24, x7
  15.98%  ↘   │  0x000000010a849a9c:   mul		x11, x11, x16
              │  0x000000010a849aa0:   mov		x7, x22
              │  0x000000010a849aa4:   cmp		x24, x22
           ╭  │  0x000000010a849aa8:   b.lt		#0x10a849ab0
   3.84%   │  │  0x000000010a849aac:   mov		x7, x24
  18.23%   ↘  │  0x000000010a849ab0:   mov		x21, x23
              │  0x000000010a849ab4:   cmp		x7, x23
            ╭ │  0x000000010a849ab8:   b.lt		#0x10a849ac0
   1.47%    │ │  0x000000010a849abc:   mov		x21, x7
  17.49%    ↘ │  0x000000010a849ac0:   add		w12, w12, #4        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
              │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
              │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
              │  0x000000010a849ac4:   mov		x7, x11
   0.01%      │  0x000000010a849ac8:   cmp		x21, x11
             ╭│  0x000000010a849acc:   b.lt		#0x10a849ad4
   1.40%     ││  0x000000010a849ad0:   mov		x7, x21             ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
             ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
             ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
  18.91%     ↘│  0x000000010a849ad4:   cmp		w12, w10
              ╰  0x000000010a849ad8:   b.lt		#0x10a849a70        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.04%         0x000000010a849adc:   ldr		x21, [x28, #0x30]   ; ImmutableOopMap {c_rarg0=Oop c_rarg2=Oop c_rarg3=Oop c_rarg5=Oop c_rarg4=Derived_oop_c_rarg5 c_rarg6=Oop r19=Oop }
                                                                           ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                           ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.06%         0x000000010a849ae0:   ldr		wzr, [x21]          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                                                                           ;   {poll}
                 0x000000010a849ae4:   cmp		w12, w17
                 0x000000010a849ae8:   b.lt		#0x10a849a50
                 0x000000010a849aec:   cmp		w12, w13
                 0x000000010a849af0:   b.lt		#0x10a8499a8
....................................................................................................
  99.52%  <total for region 1>
#+end_src
***** longReductionSimpleMax
#+begin_src asm
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub, version 5, compile id 810

                             0x000000010e5e90c0:   csel		w1, w13, w1, hi
                             0x000000010e5e90c4:   add		w11, w1, w12
                             0x000000010e5e90c8:   stp		x16, x0, [sp]
                             0x000000010e5e90cc:   stp		x17, x15, [sp, #0x10]
                             0x000000010e5e90d0:   str		x20, [sp, #0x60]
                             0x000000010e5e90d4:   nop
                             0x000000010e5e90d8:   nop
                             0x000000010e5e90dc:   nop		                    ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                                                       ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@14 (line 295)
                                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.00%                  ↗  0x000000010e5e90e0:   add		x27, x24, w12, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
                          │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
                          │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   5.02%                  │  0x000000010e5e90e4:   ldr		x15, [x27, #0x10]
   0.14%                  │  0x000000010e5e90e8:   mov		x29, x25
   0.17%                  │  0x000000010e5e90ec:   cmp		x15, x25
   0.20%  ╭               │  0x000000010e5e90f0:   b.lt		#0x10e5e90f8
          │               │  0x000000010e5e90f4:   mov		x29, x15
   4.56%  ↘               │  0x000000010e5e90f8:   ldr		x16, [x27, #0x18]
   0.16%                  │  0x000000010e5e90fc:   mov		x15, x29
   0.25%                  │  0x000000010e5e9100:   cmp		x16, x29
   0.20%   ╭              │  0x000000010e5e9104:   b.lt		#0x10e5e910c
           │              │  0x000000010e5e9108:   mov		x15, x16
   5.34%   ↘              │  0x000000010e5e910c:   ldr		x17, [x27, #0x20]
   0.23%                  │  0x000000010e5e9110:   mov		x16, x15
   0.20%                  │  0x000000010e5e9114:   cmp		x17, x15
   0.16%    ╭             │  0x000000010e5e9118:   b.lt		#0x10e5e9120
   0.00%    │             │  0x000000010e5e911c:   mov		x16, x17
   5.03%    ↘             │  0x000000010e5e9120:   ldr		x0, [x27, #0x28]
   0.12%                  │  0x000000010e5e9124:   mov		x15, x16
   0.13%                  │  0x000000010e5e9128:   cmp		x0, x16
   0.16%     ╭            │  0x000000010e5e912c:   b.lt		#0x10e5e9134
   0.02%     │            │  0x000000010e5e9130:   mov		x15, x0
   5.64%     ↘            │  0x000000010e5e9134:   ldr		x1, [x27, #0x30]
   0.20%                  │  0x000000010e5e9138:   mov		x16, x15
   0.16%                  │  0x000000010e5e913c:   cmp		x1, x15
   0.25%      ╭           │  0x000000010e5e9140:   b.lt		#0x10e5e9148
              │           │  0x000000010e5e9144:   mov		x16, x1
   5.09%      ↘           │  0x000000010e5e9148:   ldr		x2, [x27, #0x38]
   0.20%                  │  0x000000010e5e914c:   mov		x15, x16
   0.23%                  │  0x000000010e5e9150:   cmp		x2, x16
   0.23%       ╭          │  0x000000010e5e9154:   b.lt		#0x10e5e915c
               │          │  0x000000010e5e9158:   mov		x15, x2
   5.32%       ↘          │  0x000000010e5e915c:   ldr		x3, [x27, #0x40]
   0.13%                  │  0x000000010e5e9160:   mov		x16, x15
   0.15%                  │  0x000000010e5e9164:   cmp		x3, x15
   0.23%        ╭         │  0x000000010e5e9168:   b.lt		#0x10e5e9170
                │         │  0x000000010e5e916c:   mov		x16, x3
   5.18%        ↘         │  0x000000010e5e9170:   ldr		x4, [x27, #0x48]
   0.14%                  │  0x000000010e5e9174:   mov		x15, x16
   0.27%                  │  0x000000010e5e9178:   cmp		x4, x16
   0.14%         ╭        │  0x000000010e5e917c:   b.lt		#0x10e5e9184
                 │        │  0x000000010e5e9180:   mov		x15, x4
   5.22%         ↘        │  0x000000010e5e9184:   ldr		x5, [x27, #0x50]
   0.20%                  │  0x000000010e5e9188:   mov		x16, x15
   0.20%                  │  0x000000010e5e918c:   cmp		x5, x15
   0.16%          ╭       │  0x000000010e5e9190:   b.lt		#0x10e5e9198
                  │       │  0x000000010e5e9194:   mov		x16, x5
   4.99%          ↘       │  0x000000010e5e9198:   ldr		x6, [x27, #0x58]
   0.28%                  │  0x000000010e5e919c:   mov		x15, x16
   0.17%                  │  0x000000010e5e91a0:   cmp		x6, x16
   0.22%           ╭      │  0x000000010e5e91a4:   b.lt		#0x10e5e91ac
   0.01%           │      │  0x000000010e5e91a8:   mov		x15, x6
   5.25%           ↘      │  0x000000010e5e91ac:   ldr		x7, [x27, #0x60]
   0.24%                  │  0x000000010e5e91b0:   mov		x16, x15
   0.19%                  │  0x000000010e5e91b4:   cmp		x7, x15
   0.18%            ╭     │  0x000000010e5e91b8:   b.lt		#0x10e5e91c0
                    │     │  0x000000010e5e91bc:   mov		x16, x7
   5.21%            ↘     │  0x000000010e5e91c0:   ldr		x20, [x27, #0x68]
   0.14%                  │  0x000000010e5e91c4:   mov		x15, x16
   0.22%                  │  0x000000010e5e91c8:   cmp		x20, x16
   0.20%             ╭    │  0x000000010e5e91cc:   b.lt		#0x10e5e91d4
                     │    │  0x000000010e5e91d0:   mov		x15, x20
   5.50%             ↘    │  0x000000010e5e91d4:   ldr		x22, [x27, #0x70]
   0.15%                  │  0x000000010e5e91d8:   mov		x16, x15
   0.15%                  │  0x000000010e5e91dc:   cmp		x22, x15
   0.21%              ╭   │  0x000000010e5e91e0:   b.lt		#0x10e5e91e8
                      │   │  0x000000010e5e91e4:   mov		x16, x22
   5.31%              ↘   │  0x000000010e5e91e8:   ldr		x23, [x27, #0x78]
   0.19%                  │  0x000000010e5e91ec:   mov		x15, x16
   0.14%                  │  0x000000010e5e91f0:   cmp		x23, x16
   0.12%               ╭  │  0x000000010e5e91f4:   b.lt		#0x10e5e91fc
                       │  │  0x000000010e5e91f8:   mov		x15, x23
   4.86%               ↘  │  0x000000010e5e91fc:   ldr		x26, [x27, #0x80]
   0.20%                  │  0x000000010e5e9200:   mov		x16, x15
   0.19%                  │  0x000000010e5e9204:   cmp		x26, x15
   0.15%                ╭ │  0x000000010e5e9208:   b.lt		#0x10e5e9210
                        │ │  0x000000010e5e920c:   mov		x16, x26
   5.80%                ↘ │  0x000000010e5e9210:   ldr		x27, [x27, #0x88]
   0.15%                  │  0x000000010e5e9214:   add		w12, w12, #0x10     ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                          │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@30 (line 294)
                          │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.15%                  │  0x000000010e5e9218:   mov		x25, x16
   0.19%                  │  0x000000010e5e921c:   cmp		x27, x16
   0.16%                 ╭│  0x000000010e5e9220:   b.lt		#0x10e5e9228
   3.29%                 ││  0x000000010e5e9224:   mov		x25, x27            ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
                         ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
                         ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.21%                 ↘│  0x000000010e5e9228:   cmp		w12, w11
                          ╰  0x000000010e5e922c:   b.lt		#0x10e5e90e0        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                                       ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
                                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   1.74%                     0x000000010e5e9230:   ldr		x11, [x28, #0x30]   ; ImmutableOopMap {rlocals=Oop [0]=Oop [8]=Oop rdispatch=Derived_oop_[8] [16]=Oop [24]=Oop [96]=Oop }
                                                                                       ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                                       ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
                                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.14%                     0x000000010e5e9234:   ldr		wzr, [x11]          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                                       ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
                                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                                                                                       ;   {poll}
                             0x000000010e5e9238:   cmp		w12, w10
                             0x000000010e5e923c:   b.lt		#0x10e5e90a0
                             0x000000010e5e9240:   ldp		x16, x0, [sp]
                             0x000000010e5e9244:   ldp		x17, x15, [sp, #0x10]
....................................................................................................
  97.85%  <total for region 1>
#+end_src
* 8-9.4.25
** aarch64 comparison
*** cmov
**** release
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  1007.343 ± 44.448  ops/ms
MinMaxVector.longReductionSimpleMax              100    2048  thrpt    8  1094.017 ± 18.633  ops/ms
#+end_src
**** profile
#+begin_src bash
Benchmark                                  (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionMultiplyMax                100    2048  thrpt    4  1033.564 ± 88.820  ops/ms
MinMaxVector.longReductionMultiplyMax:asm            100    2048  thrpt            NaN              ---
MinMaxVector.longReductionSimpleMax                  100    2048  thrpt    4  1099.968 ± 27.424  ops/ms
MinMaxVector.longReductionSimpleMax:asm              100    2048  thrpt            NaN              ---
#+end_src
***** longReductionMultiplyMax
#+begin_src asm
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 811

             0x000000010e631784:   add		w11, w12, w13
             0x000000010e631788:   nop
             0x000000010e63178c:   nop		                    ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
                                                                       ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
          ↗  0x000000010e631790:   add		x12, x6, w13, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
          │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
          │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
          │  0x000000010e631794:   ldp		x21, x22, [x12, #0x10]
          │  0x000000010e631798:   mul		x21, x21, x17
   0.01%  │  0x000000010e63179c:   ldr		x23, [x12, #0x20]
          │  0x000000010e6317a0:   mul		x22, x22, x17
          │  0x000000010e6317a4:   cmp		x21, x7
   0.05%  │  0x000000010e6317a8:   ldr		x12, [x12, #0x28]
   0.00%  │  0x000000010e6317ac:   csel		x7, x21, x7, gt
          │  0x000000010e6317b0:   mul		x21, x23, x17
   0.01%  │  0x000000010e6317b4:   cmp		x22, x7
          │  0x000000010e6317b8:   csel		x7, x22, x7, gt
   0.02%  │  0x000000010e6317bc:   mul		x12, x12, x17
   2.28%  │  0x000000010e6317c0:   cmp		x21, x7
  74.76%  │  0x000000010e6317c4:   csel		x7, x21, x7, gt
   4.87%  │  0x000000010e6317c8:   cmp		x12, x7
   4.87%  │  0x000000010e6317cc:   add		w13, w13, #4        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
          │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
          │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   4.86%  │  0x000000010e6317d0:   csel		x7, x12, x7, gt     ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
          │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
          │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   7.44%  │  0x000000010e6317d4:   cmp		w13, w11
          ╰  0x000000010e6317d8:   b.lt		#0x10e631790        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                       ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.34%     0x000000010e6317dc:   ldr		x21, [x28, #0x30]   ; ImmutableOopMap {c_rarg0=Oop c_rarg2=Oop c_rarg3=Oop c_rarg5=Oop c_rarg4=Derived_oop_c_rarg5 c_rarg6=Oop r19=Oop }
                                                                       ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                       ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.04%     0x000000010e6317e0:   ldr		wzr, [x21]          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                       ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                                                                       ;   {poll}
             0x000000010e6317e4:   cmp		w13, w15
             0x000000010e6317e8:   b.lt		#0x10e631770
             0x000000010e6317ec:   cmp		w13, w10
             0x000000010e6317f0:   b.lt		#0x10e6316e0
....................................................................................................
  99.57%  <total for region 1>
#+end_src
***** longReductionSimpleMax
#+begin_src asm
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub, version 5, compile id 819

             0x000000010ae411c4:   nop
             0x000000010ae411c8:   nop
             0x000000010ae411cc:   nop		                    ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                                       ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@14 (line 295)
                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
          ↗  0x000000010ae411d0:   add		x21, x5, w2, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
          │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
          │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
          │  0x000000010ae411d4:   ldr		x11, [x21, #0x10]
          │  0x000000010ae411d8:   cmp		x6, x11
   0.01%  │  0x000000010ae411dc:   ldr		x7, [x21, #0x18]
          │  0x000000010ae411e0:   csel		x11, x6, x11, gt
          │  0x000000010ae411e4:   cmp		x11, x7
          │  0x000000010ae411e8:   ldr		x6, [x21, #0x20]
          │  0x000000010ae411ec:   csel		x11, x11, x7, gt
          │  0x000000010ae411f0:   cmp		x11, x6
   0.02%  │  0x000000010ae411f4:   ldr		x7, [x21, #0x28]
          │  0x000000010ae411f8:   csel		x11, x11, x6, gt
          │  0x000000010ae411fc:   cmp		x11, x7
   0.00%  │  0x000000010ae41200:   ldr		x6, [x21, #0x30]
          │  0x000000010ae41204:   csel		x11, x11, x7, gt
          │  0x000000010ae41208:   cmp		x11, x6
   0.00%  │  0x000000010ae4120c:   ldr		x7, [x21, #0x38]
          │  0x000000010ae41210:   csel		x11, x11, x6, gt
          │  0x000000010ae41214:   cmp		x11, x7
   1.01%  │  0x000000010ae41218:   ldr		x6, [x21, #0x40]
   0.27%  │  0x000000010ae4121c:   csel		x11, x11, x7, gt
          │  0x000000010ae41220:   cmp		x11, x6
   2.86%  │  0x000000010ae41224:   ldr		x7, [x21, #0x48]
          │  0x000000010ae41228:   csel		x11, x11, x6, gt
          │  0x000000010ae4122c:   cmp		x11, x7
   2.53%  │  0x000000010ae41230:   ldr		x6, [x21, #0x50]
          │  0x000000010ae41234:   csel		x11, x11, x7, gt
          │  0x000000010ae41238:   cmp		x11, x6
   4.48%  │  0x000000010ae4123c:   ldr		x7, [x21, #0x58]
          │  0x000000010ae41240:   csel		x11, x11, x6, gt
          │  0x000000010ae41244:   cmp		x11, x7
   5.82%  │  0x000000010ae41248:   ldr		x6, [x21, #0x60]
          │  0x000000010ae4124c:   csel		x11, x11, x7, gt
          │  0x000000010ae41250:   cmp		x11, x6
   5.05%  │  0x000000010ae41254:   ldr		x7, [x21, #0x68]
          │  0x000000010ae41258:   csel		x11, x11, x6, gt
          │  0x000000010ae4125c:   cmp		x11, x7
   5.37%  │  0x000000010ae41260:   ldr		x6, [x21, #0x70]
          │  0x000000010ae41264:   csel		x11, x11, x7, gt
          │  0x000000010ae41268:   cmp		x11, x6
   5.20%  │  0x000000010ae4126c:   ldr		x7, [x21, #0x78]
          │  0x000000010ae41270:   csel		x11, x11, x6, gt
          │  0x000000010ae41274:   cmp		x11, x7
   5.79%  │  0x000000010ae41278:   ldr		x6, [x21, #0x80]
   0.05%  │  0x000000010ae4127c:   csel		x11, x11, x7, gt
          │  0x000000010ae41280:   cmp		x11, x6
  60.12%  │  0x000000010ae41284:   ldr		x7, [x21, #0x88]
          │  0x000000010ae41288:   csel		x11, x11, x6, gt
          │  0x000000010ae4128c:   cmp		x11, x7
          │  0x000000010ae41290:   add		w2, w2, #0x10       ;*iinc {reexecute=0 rethrow=0 return_oop=0}
          │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@30 (line 294)
          │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
          │  0x000000010ae41294:   csel		x6, x11, x7, gt     ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
          │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
          │  0x000000010ae41298:   cmp		w2, w12
          ╰  0x000000010ae4129c:   b.lt		#0x10ae411d0        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                       ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.39%     0x000000010ae412a0:   ldr		x7, [x28, #0x30]    ; ImmutableOopMap {r13=Oop c_rarg0=Oop c_rarg3=Oop c_rarg4=Oop c_rarg1=Derived_oop_c_rarg4 c_rarg5=Oop r19=Oop }
                                                                       ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                       ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.04%     0x000000010ae412a4:   ldr		wzr, [x7]           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                       ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                                                                       ;   {poll}
             0x000000010ae412a8:   cmp		w2, w17
             0x000000010ae412ac:   b.lt		#0x10ae411a8
             0x000000010ae412b0:   cmp		w2, w10
             0x000000010ae412b4:   b.lt		#0x10ae41120
....................................................................................................
  99.03%  <total for region 1>
#+end_src
*** branch always
**** release
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  2861.913 ± 17.558  ops/ms
MinMaxVector.longReductionSimpleMax              100    2048  thrpt    8  1695.945 ± 28.365  ops/ms
#+end_src
**** profile
#+begin_src bash
Benchmark                                  (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionMultiplyMax                100    2048  thrpt    4  2854.146 ± 13.253  ops/ms
MinMaxVector.longReductionMultiplyMax:asm            100    2048  thrpt            NaN              ---
MinMaxVector.longReductionSimpleMax                  100    2048  thrpt    4  1722.534 ± 62.408  ops/ms
MinMaxVector.longReductionSimpleMax:asm              100    2048  thrpt            NaN              ---
#+end_src
***** longReductionMultiplyMax
#+begin_src asm
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 806

                 0x000000010cf19cdc:   cmp		w10, #0xfa0
                 0x000000010cf19ce0:   csel		w11, w14, w10, hi
                 0x000000010cf19ce4:   add		w10, w11, w12
                 0x000000010cf19ce8:   nop
                 0x000000010cf19cec:   nop		                    ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
              ↗  0x000000010cf19cf0:   add		x11, x6, w12, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
              │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
              │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.07%      │  0x000000010cf19cf4:   ldp		x21, x22, [x11, #0x10]
   0.00%      │  0x000000010cf19cf8:   ldr		x23, [x11, #0x20]
              │  0x000000010cf19cfc:   mul		x21, x21, x16
  29.27%      │  0x000000010cf19d00:   ldr		x11, [x11, #0x28]
   1.09%      │  0x000000010cf19d04:   mul		x22, x22, x16
   0.86%      │  0x000000010cf19d08:   mul		x23, x23, x16
   1.15%      │  0x000000010cf19d0c:   mov		x24, x7
   0.02%      │  0x000000010cf19d10:   cmp		x21, x7
   2.02%  ╭   │  0x000000010cf19d14:   b.lt		#0x10cf19d1c
  14.03%  │   │  0x000000010cf19d18:   mov		x24, x21
   1.09%  ↘   │  0x000000010cf19d1c:   mul		x11, x11, x16
   0.03%      │  0x000000010cf19d20:   mov		x7, x24
   1.18%      │  0x000000010cf19d24:   cmp		x22, x24
   1.10%   ╭  │  0x000000010cf19d28:   b.lt		#0x10cf19d30
  14.20%   │  │  0x000000010cf19d2c:   mov		x7, x22
   0.03%   ↘  │  0x000000010cf19d30:   mov		x21, x7
   1.11%      │  0x000000010cf19d34:   cmp		x23, x7
   1.29%    ╭ │  0x000000010cf19d38:   b.lt		#0x10cf19d40
  17.14%    │ │  0x000000010cf19d3c:   mov		x21, x23
   0.01%    ↘ │  0x000000010cf19d40:   add		w12, w12, #4        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
              │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
              │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   1.13%      │  0x000000010cf19d44:   mov		x7, x21
   1.23%      │  0x000000010cf19d48:   cmp		x11, x21
   0.02%     ╭│  0x000000010cf19d4c:   b.lt		#0x10cf19d54
   9.03%     ││  0x000000010cf19d50:   mov		x7, x11             ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
             ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
             ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.86%     ↘│  0x000000010cf19d54:   cmp		w12, w10
              ╰  0x000000010cf19d58:   b.lt		#0x10cf19cf0        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   1.07%         0x000000010cf19d5c:   ldr		x21, [x28, #0x30]   ; ImmutableOopMap {c_rarg0=Oop c_rarg2=Oop c_rarg3=Oop c_rarg5=Oop c_rarg4=Derived_oop_c_rarg5 c_rarg6=Oop r19=Oop }
                                                                           ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                           ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.11%         0x000000010cf19d60:   ldr		wzr, [x21]          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                                                                           ;   {poll}
                 0x000000010cf19d64:   cmp		w12, w17
                 0x000000010cf19d68:   b.lt		#0x10cf19cd0
                 0x000000010cf19d6c:   cmp		w12, w13
                 0x000000010cf19d70:   b.lt		#0x10cf19c28
....................................................................................................
  99.15%  <total for region 1>
#+end_src
***** longReductionSimpleMax
#+begin_src asm
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub, version 5, compile id 807

                              0x0000000128af4680:   csel		w1, w13, w1, hi
                              0x0000000128af4684:   add		w11, w1, w12
                              0x0000000128af4688:   stp		x16, x0, [sp]
                              0x0000000128af468c:   stp		x17, x15, [sp, #0x10]
                              0x0000000128af4690:   str		x20, [sp, #0x60]
                              0x0000000128af4694:   nop
                              0x0000000128af4698:   nop
                              0x0000000128af469c:   nop		                    ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                                                        ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@14 (line 295)
                                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.39%                  ↗   0x0000000128af46a0:   add		x27, x24, w12, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
                          │                                                             ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
                          │                                                             ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   5.41%                  │   0x0000000128af46a4:   ldr		x15, [x27, #0x10]
                          │   0x0000000128af46a8:   mov		x29, x15
   0.00%                  │   0x0000000128af46ac:   cmp		x25, x15
          ╭               │   0x0000000128af46b0:   b.lt		#0x128af46b8
   0.08%  │               │   0x0000000128af46b4:   mov		x29, x25
   4.81%  ↘               │   0x0000000128af46b8:   ldr		x16, [x27, #0x18]
                          │   0x0000000128af46bc:   mov		x15, x16
                          │   0x0000000128af46c0:   cmp		x29, x16
           ╭              │   0x0000000128af46c4:   b.lt		#0x128af46cc
   0.52%   │              │   0x0000000128af46c8:   mov		x15, x29
   5.96%   ↘              │   0x0000000128af46cc:   ldr		x17, [x27, #0x20]
                          │   0x0000000128af46d0:   mov		x16, x17
                          │   0x0000000128af46d4:   cmp		x15, x17
            ╭             │   0x0000000128af46d8:   b.lt		#0x128af46e0
   0.48%    │             │   0x0000000128af46dc:   mov		x16, x15
   5.34%    ↘             │   0x0000000128af46e0:   ldr		x0, [x27, #0x28]
                          │   0x0000000128af46e4:   mov		x15, x0
                          │   0x0000000128af46e8:   cmp		x16, x0
             ╭            │   0x0000000128af46ec:   b.lt		#0x128af46f4
   0.39%     │            │   0x0000000128af46f0:   mov		x15, x16
   5.55%     ↘            │   0x0000000128af46f4:   ldr		x1, [x27, #0x30]
                          │   0x0000000128af46f8:   mov		x16, x1
                          │   0x0000000128af46fc:   cmp		x15, x1
              ╭           │   0x0000000128af4700:   b.lt		#0x128af4708
   0.22%      │           │   0x0000000128af4704:   mov		x16, x15
   5.18%      ↘           │   0x0000000128af4708:   ldr		x2, [x27, #0x38]
                          │   0x0000000128af470c:   mov		x15, x2
                          │   0x0000000128af4710:   cmp		x16, x2
               ╭          │   0x0000000128af4714:   b.lt		#0x128af471c
   0.15%       │          │   0x0000000128af4718:   mov		x15, x16
   5.81%       ↘          │   0x0000000128af471c:   ldr		x3, [x27, #0x40]
                          │   0x0000000128af4720:   mov		x16, x3
                          │   0x0000000128af4724:   cmp		x15, x3
                ╭         │   0x0000000128af4728:   b.lt		#0x128af4730
   0.16%        │         │   0x0000000128af472c:   mov		x16, x15
   5.16%        ↘         │   0x0000000128af4730:   ldr		x4, [x27, #0x48]
                          │   0x0000000128af4734:   mov		x15, x4
                          │   0x0000000128af4738:   cmp		x16, x4
                 ╭        │   0x0000000128af473c:   b.lt		#0x128af4744
   0.29%         │        │   0x0000000128af4740:   mov		x15, x16
   5.95%         ↘        │   0x0000000128af4744:   ldr		x5, [x27, #0x50]
                          │   0x0000000128af4748:   mov		x16, x5
                          │   0x0000000128af474c:   cmp		x15, x5
                  ╭       │   0x0000000128af4750:   b.lt		#0x128af4758
   0.07%          │       │   0x0000000128af4754:   mov		x16, x15
   5.09%          ↘       │   0x0000000128af4758:   ldr		x6, [x27, #0x58]
                          │   0x0000000128af475c:   mov		x15, x6
                          │   0x0000000128af4760:   cmp		x16, x6
                   ╭      │   0x0000000128af4764:   b.lt		#0x128af476c
   0.14%           │      │   0x0000000128af4768:   mov		x15, x16
   5.77%           ↘      │   0x0000000128af476c:   ldr		x7, [x27, #0x60]
                          │   0x0000000128af4770:   mov		x16, x7
                          │   0x0000000128af4774:   cmp		x15, x7
                    ╭     │   0x0000000128af4778:   b.lt		#0x128af4780
   0.45%            │     │   0x0000000128af477c:   mov		x16, x15
   5.52%            ↘     │   0x0000000128af4780:   ldr		x20, [x27, #0x68]
                          │   0x0000000128af4784:   mov		x15, x20
                          │   0x0000000128af4788:   cmp		x16, x20
                     ╭    │   0x0000000128af478c:   b.lt		#0x128af4794
   0.18%             │    │   0x0000000128af4790:   mov		x15, x16
   5.34%             ↘    │   0x0000000128af4794:   ldr		x22, [x27, #0x70]
                          │   0x0000000128af4798:   mov		x16, x22
                          │   0x0000000128af479c:   cmp		x15, x22
                      ╭   │   0x0000000128af47a0:   b.lt		#0x128af47a8
   0.52%              │   │   0x0000000128af47a4:   mov		x16, x15
   6.09%              ↘   │   0x0000000128af47a8:   ldr		x23, [x27, #0x78]
                          │   0x0000000128af47ac:   mov		x15, x23
                          │   0x0000000128af47b0:   cmp		x16, x23
                       ╭  │   0x0000000128af47b4:   b.lt		#0x128af47bc
   0.22%               │  │   0x0000000128af47b8:   mov		x15, x16
   4.82%               ↘  │   0x0000000128af47bc:   ldr		x26, [x27, #0x80]
                          │   0x0000000128af47c0:   mov		x16, x26
                          │   0x0000000128af47c4:   cmp		x15, x26
                        ╭ │   0x0000000128af47c8:   b.lt		#0x128af47d0
   0.42%                │ │   0x0000000128af47cc:   mov		x16, x15
   6.18%                ↘ │   0x0000000128af47d0:   ldr		x27, [x27, #0x88]
                          │   0x0000000128af47d4:   add		w12, w12, #0x10     ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                          │                                                             ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@30 (line 294)
                          │                                                             ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                          │   0x0000000128af47d8:   mov		x25, x27
                          │   0x0000000128af47dc:   cmp		x16, x27
                         ╭│   0x0000000128af47e0:   b.lt		#0x128af47e8
   0.82%                 ││   0x0000000128af47e4:   mov		x25, x16            ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
                         ││                                                             ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
                         ││                                                             ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   4.75%                 ↘│   0x0000000128af47e8:   cmp		w12, w11
                          ╰   0x0000000128af47ec:   b.lt		#0x128af46a0        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                                        ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
                                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.04%                      0x0000000128af47f0:   ldr		x11, [x28, #0x30]   ; ImmutableOopMap {rlocals=Oop [0]=Oop [8]=Oop rdispatch=Derived_oop_[8] [16]=Oop [24]=Oop [96]=Oop }
                                                                                        ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                                        ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
                                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.05%                      0x0000000128af47f4:   ldr		wzr, [x11]          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                                        ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
                                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                                                                                        ;   {poll}
                              0x0000000128af47f8:   cmp		w12, w10
                              0x0000000128af47fc:   b.lt		#0x128af4660
                              0x0000000128af4800:   ldp		x16, x0, [sp]
                              0x0000000128af4804:   ldp		x17, x15, [sp, #0x10]
   0.01%                      0x0000000128af4808:   ldr		x20, [sp, #0x60]
                              0x0000000128af480c:   cmp		w12, w14
                              0x0000000128af4810:   b.lt		#0x128af4638
                              0x0000000128af4814:   mov		x11, x25            ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                                        ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
                                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.05%                      0x0000000128af4818:   ldarb		w14, [x21]          ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
                                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@32 (line 107)
                              0x0000000128af481c:   ldr		x1, [x28, #0x30]
                              0x0000000128af4820:   add		x19, x19, #1        ; ImmutableOopMap {r15=Oop r16=Oop r17=Oop c_rarg0=Oop rdispatch=Derived_oop_c_rarg0 resp=Oop }
                                                                                        ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                                                                                        ; - (reexecute) org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@35 (line 107)
   0.09%                      0x0000000128af4824:   ldr		wzr, [x1]           ;   {poll}
                              0x0000000128af4828:   cbnz		w14, #0x128af45e8   ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@38 (line 108)
                              0x0000000128af482c:   ldr		w14, [x15, #0xc]    ;*getfield size {reexecute=0 rethrow=0 return_oop=0}
                                                                                        ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@8 (line 294)
                                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                              0x0000000128af4830:   cmp		w14, #0
                              0x0000000128af4834:   b.le		#0x128af48a0        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                                        ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
                                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                              0x0000000128af4838:   ldr		w10, [x15, #0x2c]
                              0x0000000128af483c:   lsl		x24, x10, #3        ;*getfield maxLongA {reexecute=0 rethrow=0 return_oop=0}
                                                                                        ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@15 (line 295)
                                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.03%                      0x0000000128af4840:   ldr		w10, [x24, #0xc]    ; implicit exception: dispatches to 0x0000000128af48a8
                                                                                        ;*laload {reexecute=0 rethrow=0 return_oop=0}
                                                                                        ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
                                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                              0x0000000128af4844:   sxtw		x11, w14
                              0x0000000128af4848:   sub		x1, x11, #0xf
                              0x0000000128af484c:   sxtw		x12, w10
                              0x0000000128af4850:   sub		x11, x11, #1
                              0x0000000128af4854:   cbz		w10, #0x128af48a8
                              0x0000000128af4858:   cmp		x11, x12
                              0x0000000128af485c:   b.hs		#0x128af48a8
   0.02%                      0x0000000128af4860:   ldr		x11, [x24, #0x10]
                              0x0000000128af4864:   mov		x12, #-0x80000000
                              0x0000000128af4868:   mov		x10, x12
                              0x0000000128af486c:   cmp		x1, x12
                           ╭  0x0000000128af4870:   b.lt		#0x128af4878
                           │  0x0000000128af4874:   mov		x10, x1
                           ↘  0x0000000128af4878:   mov		x12, xzr
                              0x0000000128af487c:   mov		w10, w10
                              0x0000000128af4880:   mov		x25, x12
                              0x0000000128af4884:   cmp		x11, x12
                              0x0000000128af4888:   b.lt		#0x128af4890
....................................................................................................
  98.55%  <total for region 1>
#+end_src
*** branch never
**** release
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  1399.006 ± 33.211  ops/ms
MinMaxVector.longReductionSimpleMax              100    2048  thrpt    8  3719.712 ± 87.950  ops/ms
#+end_src
**** profile
#+begin_src bash
Benchmark                                  (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionMultiplyMax                100    2048  thrpt    4  1390.658 ± 99.802  ops/ms
MinMaxVector.longReductionMultiplyMax:asm            100    2048  thrpt            NaN              ---
MinMaxVector.longReductionSimpleMax                  100    2048  thrpt    4  3673.639 ± 65.184  ops/ms
MinMaxVector.longReductionSimpleMax:asm              100    2048  thrpt            NaN              ---
#+end_src
***** longReductionMultiplyMax
#+begin_src asm
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 806

                 0x000000010a849a50:   cmp		w17, w12
                 0x000000010a849a54:   sub		w11, w17, w12
                 0x000000010a849a58:   csel		w10, wzr, w11, lt
                 0x000000010a849a5c:   cmp		w10, #0xfa0
                 0x000000010a849a60:   csel		w11, w14, w10, hi
                 0x000000010a849a64:   add		w10, w11, w12
                 0x000000010a849a68:   nop
                 0x000000010a849a6c:   nop		                    ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   2.09%      ↗  0x000000010a849a70:   add		x11, x6, w12, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
              │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
              │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.07%      │  0x000000010a849a74:   ldp		x21, x22, [x11, #0x10]
              │  0x000000010a849a78:   ldr		x23, [x11, #0x20]
              │  0x000000010a849a7c:   mul		x21, x21, x16
  19.90%      │  0x000000010a849a80:   ldr		x11, [x11, #0x28]
              │  0x000000010a849a84:   mul		x22, x22, x16
              │  0x000000010a849a88:   mul		x23, x23, x16
              │  0x000000010a849a8c:   mov		x24, x21
              │  0x000000010a849a90:   cmp		x7, x21
          ╭   │  0x000000010a849a94:   b.lt		#0x10a849a9c
   0.03%  │   │  0x000000010a849a98:   mov		x24, x7
  15.98%  ↘   │  0x000000010a849a9c:   mul		x11, x11, x16
              │  0x000000010a849aa0:   mov		x7, x22
              │  0x000000010a849aa4:   cmp		x24, x22
           ╭  │  0x000000010a849aa8:   b.lt		#0x10a849ab0
   3.84%   │  │  0x000000010a849aac:   mov		x7, x24
  18.23%   ↘  │  0x000000010a849ab0:   mov		x21, x23
              │  0x000000010a849ab4:   cmp		x7, x23
            ╭ │  0x000000010a849ab8:   b.lt		#0x10a849ac0
   1.47%    │ │  0x000000010a849abc:   mov		x21, x7
  17.49%    ↘ │  0x000000010a849ac0:   add		w12, w12, #4        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
              │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
              │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
              │  0x000000010a849ac4:   mov		x7, x11
   0.01%      │  0x000000010a849ac8:   cmp		x21, x11
             ╭│  0x000000010a849acc:   b.lt		#0x10a849ad4
   1.40%     ││  0x000000010a849ad0:   mov		x7, x21             ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
             ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
             ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
  18.91%     ↘│  0x000000010a849ad4:   cmp		w12, w10
              ╰  0x000000010a849ad8:   b.lt		#0x10a849a70        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.04%         0x000000010a849adc:   ldr		x21, [x28, #0x30]   ; ImmutableOopMap {c_rarg0=Oop c_rarg2=Oop c_rarg3=Oop c_rarg5=Oop c_rarg4=Derived_oop_c_rarg5 c_rarg6=Oop r19=Oop }
                                                                           ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                           ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.06%         0x000000010a849ae0:   ldr		wzr, [x21]          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                                                                           ;   {poll}
                 0x000000010a849ae4:   cmp		w12, w17
                 0x000000010a849ae8:   b.lt		#0x10a849a50
                 0x000000010a849aec:   cmp		w12, w13
                 0x000000010a849af0:   b.lt		#0x10a8499a8
....................................................................................................
  99.52%  <total for region 1>
#+end_src
***** longReductionSimpleMax
#+begin_src asm
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub, version 5, compile id 810

                             0x000000010e5e90c0:   csel		w1, w13, w1, hi
                             0x000000010e5e90c4:   add		w11, w1, w12
                             0x000000010e5e90c8:   stp		x16, x0, [sp]
                             0x000000010e5e90cc:   stp		x17, x15, [sp, #0x10]
                             0x000000010e5e90d0:   str		x20, [sp, #0x60]
                             0x000000010e5e90d4:   nop
                             0x000000010e5e90d8:   nop
                             0x000000010e5e90dc:   nop		                    ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                                                       ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@14 (line 295)
                                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.00%                  ↗  0x000000010e5e90e0:   add		x27, x24, w12, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
                          │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
                          │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   5.02%                  │  0x000000010e5e90e4:   ldr		x15, [x27, #0x10]
   0.14%                  │  0x000000010e5e90e8:   mov		x29, x25
   0.17%                  │  0x000000010e5e90ec:   cmp		x15, x25
   0.20%  ╭               │  0x000000010e5e90f0:   b.lt		#0x10e5e90f8
          │               │  0x000000010e5e90f4:   mov		x29, x15
   4.56%  ↘               │  0x000000010e5e90f8:   ldr		x16, [x27, #0x18]
   0.16%                  │  0x000000010e5e90fc:   mov		x15, x29
   0.25%                  │  0x000000010e5e9100:   cmp		x16, x29
   0.20%   ╭              │  0x000000010e5e9104:   b.lt		#0x10e5e910c
           │              │  0x000000010e5e9108:   mov		x15, x16
   5.34%   ↘              │  0x000000010e5e910c:   ldr		x17, [x27, #0x20]
   0.23%                  │  0x000000010e5e9110:   mov		x16, x15
   0.20%                  │  0x000000010e5e9114:   cmp		x17, x15
   0.16%    ╭             │  0x000000010e5e9118:   b.lt		#0x10e5e9120
   0.00%    │             │  0x000000010e5e911c:   mov		x16, x17
   5.03%    ↘             │  0x000000010e5e9120:   ldr		x0, [x27, #0x28]
   0.12%                  │  0x000000010e5e9124:   mov		x15, x16
   0.13%                  │  0x000000010e5e9128:   cmp		x0, x16
   0.16%     ╭            │  0x000000010e5e912c:   b.lt		#0x10e5e9134
   0.02%     │            │  0x000000010e5e9130:   mov		x15, x0
   5.64%     ↘            │  0x000000010e5e9134:   ldr		x1, [x27, #0x30]
   0.20%                  │  0x000000010e5e9138:   mov		x16, x15
   0.16%                  │  0x000000010e5e913c:   cmp		x1, x15
   0.25%      ╭           │  0x000000010e5e9140:   b.lt		#0x10e5e9148
              │           │  0x000000010e5e9144:   mov		x16, x1
   5.09%      ↘           │  0x000000010e5e9148:   ldr		x2, [x27, #0x38]
   0.20%                  │  0x000000010e5e914c:   mov		x15, x16
   0.23%                  │  0x000000010e5e9150:   cmp		x2, x16
   0.23%       ╭          │  0x000000010e5e9154:   b.lt		#0x10e5e915c
               │          │  0x000000010e5e9158:   mov		x15, x2
   5.32%       ↘          │  0x000000010e5e915c:   ldr		x3, [x27, #0x40]
   0.13%                  │  0x000000010e5e9160:   mov		x16, x15
   0.15%                  │  0x000000010e5e9164:   cmp		x3, x15
   0.23%        ╭         │  0x000000010e5e9168:   b.lt		#0x10e5e9170
                │         │  0x000000010e5e916c:   mov		x16, x3
   5.18%        ↘         │  0x000000010e5e9170:   ldr		x4, [x27, #0x48]
   0.14%                  │  0x000000010e5e9174:   mov		x15, x16
   0.27%                  │  0x000000010e5e9178:   cmp		x4, x16
   0.14%         ╭        │  0x000000010e5e917c:   b.lt		#0x10e5e9184
                 │        │  0x000000010e5e9180:   mov		x15, x4
   5.22%         ↘        │  0x000000010e5e9184:   ldr		x5, [x27, #0x50]
   0.20%                  │  0x000000010e5e9188:   mov		x16, x15
   0.20%                  │  0x000000010e5e918c:   cmp		x5, x15
   0.16%          ╭       │  0x000000010e5e9190:   b.lt		#0x10e5e9198
                  │       │  0x000000010e5e9194:   mov		x16, x5
   4.99%          ↘       │  0x000000010e5e9198:   ldr		x6, [x27, #0x58]
   0.28%                  │  0x000000010e5e919c:   mov		x15, x16
   0.17%                  │  0x000000010e5e91a0:   cmp		x6, x16
   0.22%           ╭      │  0x000000010e5e91a4:   b.lt		#0x10e5e91ac
   0.01%           │      │  0x000000010e5e91a8:   mov		x15, x6
   5.25%           ↘      │  0x000000010e5e91ac:   ldr		x7, [x27, #0x60]
   0.24%                  │  0x000000010e5e91b0:   mov		x16, x15
   0.19%                  │  0x000000010e5e91b4:   cmp		x7, x15
   0.18%            ╭     │  0x000000010e5e91b8:   b.lt		#0x10e5e91c0
                    │     │  0x000000010e5e91bc:   mov		x16, x7
   5.21%            ↘     │  0x000000010e5e91c0:   ldr		x20, [x27, #0x68]
   0.14%                  │  0x000000010e5e91c4:   mov		x15, x16
   0.22%                  │  0x000000010e5e91c8:   cmp		x20, x16
   0.20%             ╭    │  0x000000010e5e91cc:   b.lt		#0x10e5e91d4
                     │    │  0x000000010e5e91d0:   mov		x15, x20
   5.50%             ↘    │  0x000000010e5e91d4:   ldr		x22, [x27, #0x70]
   0.15%                  │  0x000000010e5e91d8:   mov		x16, x15
   0.15%                  │  0x000000010e5e91dc:   cmp		x22, x15
   0.21%              ╭   │  0x000000010e5e91e0:   b.lt		#0x10e5e91e8
                      │   │  0x000000010e5e91e4:   mov		x16, x22
   5.31%              ↘   │  0x000000010e5e91e8:   ldr		x23, [x27, #0x78]
   0.19%                  │  0x000000010e5e91ec:   mov		x15, x16
   0.14%                  │  0x000000010e5e91f0:   cmp		x23, x16
   0.12%               ╭  │  0x000000010e5e91f4:   b.lt		#0x10e5e91fc
                       │  │  0x000000010e5e91f8:   mov		x15, x23
   4.86%               ↘  │  0x000000010e5e91fc:   ldr		x26, [x27, #0x80]
   0.20%                  │  0x000000010e5e9200:   mov		x16, x15
   0.19%                  │  0x000000010e5e9204:   cmp		x26, x15
   0.15%                ╭ │  0x000000010e5e9208:   b.lt		#0x10e5e9210
                        │ │  0x000000010e5e920c:   mov		x16, x26
   5.80%                ↘ │  0x000000010e5e9210:   ldr		x27, [x27, #0x88]
   0.15%                  │  0x000000010e5e9214:   add		w12, w12, #0x10     ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                          │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@30 (line 294)
                          │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.15%                  │  0x000000010e5e9218:   mov		x25, x16
   0.19%                  │  0x000000010e5e921c:   cmp		x27, x16
   0.16%                 ╭│  0x000000010e5e9220:   b.lt		#0x10e5e9228
   3.29%                 ││  0x000000010e5e9224:   mov		x25, x27            ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
                         ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
                         ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.21%                 ↘│  0x000000010e5e9228:   cmp		w12, w11
                          ╰  0x000000010e5e922c:   b.lt		#0x10e5e90e0        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                                       ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
                                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   1.74%                     0x000000010e5e9230:   ldr		x11, [x28, #0x30]   ; ImmutableOopMap {rlocals=Oop [0]=Oop [8]=Oop rdispatch=Derived_oop_[8] [16]=Oop [24]=Oop [96]=Oop }
                                                                                       ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                                       ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
                                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.14%                     0x000000010e5e9234:   ldr		wzr, [x11]          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                                       ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
                                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                                                                                       ;   {poll}
                             0x000000010e5e9238:   cmp		w12, w10
                             0x000000010e5e923c:   b.lt		#0x10e5e90a0
                             0x000000010e5e9240:   ldp		x16, x0, [sp]
                             0x000000010e5e9244:   ldp		x17, x15, [sp, #0x10]
....................................................................................................
  97.85%  <total for region 1>
#+end_src
*** disabled intrinsic
**** release
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  2492.205 ± 62.451  ops/ms
MinMaxVector.longReductionSimpleMax              100    2048  thrpt    8  3495.841 ± 71.436  ops/ms
#+end_src
**** profile
#+begin_src bash
Benchmark                                  (probability)  (size)   Mode  Cnt     Score     Error   Units
MinMaxVector.longReductionMultiplyMax                100    2048  thrpt    4  2601.966 ± 263.504  ops/ms
MinMaxVector.longReductionMultiplyMax:asm            100    2048  thrpt            NaN               ---
MinMaxVector.longReductionSimpleMax                  100    2048  thrpt    4  3498.322 ±  82.773  ops/ms
MinMaxVector.longReductionSimpleMax:asm              100    2048  thrpt            NaN               ---
#+end_src
***** longReductionMultiplyMax
#+begin_src asm
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 823

                     0x000000010ccaa344:   str		xzr, [x19, #0x20]   ;*putfield realTime {reexecute=0 rethrow=0 return_oop=0}
                                                                               ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@48 (line 109)
                     0x000000010ccaa348:   str		x0, [x19, #0x30]    ;*putfield stopTime {reexecute=0 rethrow=0 return_oop=0}
                                                                               ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@42 (line 108)
                     0x000000010ccaa34c:   ldp		x29, x30, [sp, #0x50]
                     0x000000010ccaa350:   add		sp, sp, #0x60
                     0x000000010ccaa354:   ldr		x8, [x28, #0x28]    ;   {poll_return}
                     0x000000010ccaa358:   cmp		sp, x8
                     0x000000010ccaa35c:   b.hi		#0x10ccaa5ac
                     0x000000010ccaa360:   ret
   2.77%       ↗     0x000000010ccaa364:   mov		x12, x7
   0.00%       │     0x000000010ccaa368:   nop
   0.01%       │     0x000000010ccaa36c:   nop
  18.34%      ↗│     0x000000010ccaa370:   cmp		x12, x21
   0.00%  ╭   ││     0x000000010ccaa374:   b.ge		#0x10ccaa3d4
  16.43%  │   ││  ↗  0x000000010ccaa378:   cmp		x21, x6
   0.00%  │╭  ││  │  0x000000010ccaa37c:   b.ge		#0x10ccaa3c4        ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
          ││  ││  │                                                            ; - java.lang.Math::max@11 (line 2038)
          ││  ││  │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
          ││  ││  │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
  21.64%  ││  ││↗ │  0x000000010ccaa380:   add		w1, w1, #4          ;*iinc {reexecute=0 rethrow=0 return_oop=0}
          ││  │││ │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
          ││  │││ │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.28%  ││  │││ │  0x000000010ccaa384:   cmp		w1, w11
   0.00%  ││╭ │││ │  0x000000010ccaa388:   b.ge		#0x10ccaa3dc        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
          │││ │││ │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
          │││ │││ │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
          │││ │││ │  0x000000010ccaa38c:   mov		x22, x6             ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
          │││ │││ │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
          │││ │││ │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
          │││ │││ │  0x000000010ccaa390:   add		x12, x5, w1, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
          │││ │││ │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
          │││ │││ │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.02%  │││ │││ │  0x000000010ccaa394:   ldr		x7, [x12, #0x10]
   0.00%  │││ │││ │  0x000000010ccaa398:   ldp		x21, x6, [x12, #0x20]
  20.48%  │││ │││ │  0x000000010ccaa39c:   ldr		x12, [x12, #0x18]
   0.03%  │││ │││ │  0x000000010ccaa3a0:   mul		x7, x7, x15
   0.17%  │││ │││ │  0x000000010ccaa3a4:   mul		x6, x6, x15
          │││ │││ │  0x000000010ccaa3a8:   mul		x12, x12, x15
          │││ │││ │  0x000000010ccaa3ac:   mul		x21, x21, x15       ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │││ │││ │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@24 (line 285)
          │││ │││ │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.14%  │││ │││ │  0x000000010ccaa3b0:   cmp		x22, x7
          │││╭│││ │  0x000000010ccaa3b4:   b.ge		#0x10ccaa3cc        ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
          │││││││ │                                                            ; - java.lang.Math::max@11 (line 2038)
          │││││││ │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
          │││││││ │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
  17.70%  │││││││↗│  0x000000010ccaa3b8:   cmp		x7, x12
   0.00%  ││││╰││││  0x000000010ccaa3bc:   b.lt		#0x10ccaa370        ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          ││││ ││││                                                            ; - java.lang.Math::max@3 (line 2038)
          ││││ ││││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
          ││││ ││││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.01%  ││││ ╰│││  0x000000010ccaa3c0:   b		#0x10ccaa364
   0.41%  │↘││  │││  0x000000010ccaa3c4:   mov		x6, x21
          │ ││  ╰││  0x000000010ccaa3c8:   b		#0x10ccaa380
   0.28%  │ │↘   ││  0x000000010ccaa3cc:   mov		x7, x22
          │ │    ╰│  0x000000010ccaa3d0:   b		#0x10ccaa3b8
   0.42%  ↘ │     │  0x000000010ccaa3d4:   mov		x21, x12
            │     ╰  0x000000010ccaa3d8:   b		#0x10ccaa378
            ↘        0x000000010ccaa3dc:   ldr		x7, [x28, #0x30]    ; ImmutableOopMap {r13=Oop c_rarg0=Oop c_rarg2=Oop c_rarg4=Oop c_rarg3=Derived_oop_c_rarg4 c_rarg5=Oop r19=Oop }
                                                                               ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                               ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                               ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.01%             0x000000010ccaa3e0:   ldr		wzr, [x7]           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                               ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                               ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                                                                               ;   {poll}
                     0x000000010ccaa3e4:   cmp		w1, w17
                     0x000000010ccaa3e8:   b.ge		#0x10ccaa43c
                     0x000000010ccaa3ec:   mov		x22, x6
                     0x000000010ccaa3f0:   cmp		w17, w1
....................................................................................................
  99.19%  <total for region 1>
#+end_src
***** longReductionSimpleMax
#+begin_src asm
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub, version 5, compile id 820

                   0x000000010a89bbbc:   str		xzr, [x19, #0x20]   ;*putfield realTime {reexecute=0 rethrow=0 return_oop=0}
                                                                             ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@48 (line 109)
                   0x000000010a89bbc0:   str		x0, [x19, #0x30]    ;*putfield stopTime {reexecute=0 rethrow=0 return_oop=0}
                                                                             ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@42 (line 108)
                   0x000000010a89bbc4:   ldp		x29, x30, [sp, #0x50]
                   0x000000010a89bbc8:   add		sp, sp, #0x60
                   0x000000010a89bbcc:   ldr		x8, [x28, #0x28]    ;   {poll_return}
                   0x000000010a89bbd0:   cmp		sp, x8
                   0x000000010a89bbd4:   b.hi		#0x10a89be50
                   0x000000010a89bbd8:   ret
   1.04%      ↗    0x000000010a89bbdc:   mov		x7, x13
   9.48%     ↗│    0x000000010a89bbe0:   cmp		x7, x23
   0.35%  ╭  ││    0x000000010a89bbe4:   b.ge		#0x10a89bc4c        ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
          │  ││                                                              ; - java.lang.Math::max@11 (line 2038)
          │  ││                                                              ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          │  ││                                                              ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
  10.94%  │  ││↗   0x000000010a89bbe8:   add		w11, w11, #8        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
          │  │││                                                             ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@30 (line 294)
          │  │││                                                             ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.13%  │  │││   0x000000010a89bbec:   cmp		w11, w14
   0.01%  │  │││   0x000000010a89bbf0:   b.ge		#0x10a89bc84        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
          │  │││                                                             ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
          │  │││                                                             ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
          │  │││   0x000000010a89bbf4:   mov		x25, x23            ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
          │  │││                                                             ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@14 (line 295)
          │  │││                                                             ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
          │  │││   0x000000010a89bbf8:   add		x13, x4, w11, sxtw #3
   0.00%  │  │││   0x000000010a89bbfc:   ldr		x23, [x13, #0x48]
   0.01%  │  │││   0x000000010a89bc00:   ldp		x5, x6, [x13, #0x10]
   0.04%  │  │││   0x000000010a89bc04:   ldr		x7, [x13, #0x40]
   0.05%  │  │││   0x000000010a89bc08:   ldp		x21, x22, [x13, #0x20]
  10.98%  │  │││   0x000000010a89bc0c:   ldp		x24, x13, [x13, #0x30];*laload {reexecute=0 rethrow=0 return_oop=0}
          │  │││                                                             ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
          │  │││                                                             ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
          │  │││   0x000000010a89bc10:   cmp		x25, x5
          │  │││   0x000000010a89bc14:   b.ge		#0x10a89bc7c
  11.51%  │  │││   0x000000010a89bc18:   cmp		x5, x6
   0.01%  │╭ │││   0x000000010a89bc1c:   b.ge		#0x10a89bc54
  10.65%  ││ │││↗  0x000000010a89bc20:   cmp		x6, x21
   0.13%  ││ ││││  0x000000010a89bc24:   b.ge		#0x10a89bc74
  10.88%  ││ ││││  0x000000010a89bc28:   cmp		x21, x22
   0.17%  ││╭││││  0x000000010a89bc2c:   b.ge		#0x10a89bc5c
  10.85%  │││││││  0x000000010a89bc30:   cmp		x22, x24
   0.21%  │││││││  0x000000010a89bc34:   b.ge		#0x10a89bc64
  10.76%  │││││││  0x000000010a89bc38:   cmp		x24, x13
   0.05%  │││││││  0x000000010a89bc3c:   b.ge		#0x10a89bc6c        ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
          │││││││                                                            ; - java.lang.Math::max@11 (line 2038)
          │││││││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          │││││││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
  10.80%  │││││││  0x000000010a89bc40:   cmp		x13, x7
   0.00%  │││╰│││  0x000000010a89bc44:   b.lt		#0x10a89bbe0        ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │││ │││                                                            ; - java.lang.Math::max@3 (line 2038)
          │││ │││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          │││ │││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
          │││ ╰││  0x000000010a89bc48:   b		#0x10a89bbdc
          ↘││  ││  0x000000010a89bc4c:   mov		x23, x7
           ││  ╰│  0x000000010a89bc50:   b		#0x10a89bbe8
           ↘│   │  0x000000010a89bc54:   mov		x6, x5
            │   ╰  0x000000010a89bc58:   b		#0x10a89bc20
            ↘      0x000000010a89bc5c:   mov		x22, x21
                   0x000000010a89bc60:   b		#0x10a89bc30
....................................................................................................
  99.06%  <total for region 1>
#+end_src
** x64 comparison
*** cmov
**** release
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt    Score   Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  546.459 ± 0.359  ops/ms
MinMaxVector.longReductionSimpleMax              100    2048  thrpt    8  602.729 ± 0.192  ops/ms
#+end_src
**** profile
#+begin_src bash
Benchmark                                  (probability)  (size)   Mode  Cnt    Score   Error   Units
MinMaxVector.longReductionMultiplyMax                100    2048  thrpt    4  545.467 ± 0.444  ops/ms
MinMaxVector.longReductionMultiplyMax:asm            100    2048  thrpt           NaN             ---
MinMaxVector.longReductionSimpleMax                  100    2048  thrpt    4  601.635 ± 0.165  ops/ms
MinMaxVector.longReductionSimpleMax:asm              100    2048  thrpt           NaN             ---
#+end_src
***** longReductionMultiplyMax
#+begin_src asm
....[Hottest Region 1]..............................................................................
c2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 1244

              0x00007f329cc3728f:   cmpq		%r8, %r14
              0x00007f329cc37292:   cmovlq		%r8, %r14
   0.02%      0x00007f329cc37296:   movl		%r14d, %ebp
              0x00007f329cc37299:   cmpl		$1, %ebp
              0x00007f329cc3729c:   jle		0x7f329cc373a8
              0x00007f329cc372a2:   movl		$1, %r8d
              0x00007f329cc372a8:   vmovq		%rdx, %xmm0
              0x00007f329cc372ad:   vmovq		%r11, %xmm1
           ↗  0x00007f329cc372b2:   movl		%ebp, %r11d
           │  0x00007f329cc372b5:   subl		%r8d, %r11d
   0.02%   │  0x00007f329cc372b8:   cmpl		%r8d, %ebp
           │  0x00007f329cc372bb:   cmovll		%r10d, %r11d
           │  0x00007f329cc372bf:   cmpl		$0xfa0, %r11d
           │  0x00007f329cc372c6:   cmoval		%esi, %r11d
           │  0x00007f329cc372ca:   addl		%r8d, %r11d
           │  0x00007f329cc372cd:   nop		                    ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
           │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
           │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   0.03%  ↗│  0x00007f329cc372d0:   imulq		$0xb, 0x10(%rax, %r8, 8), %rdx
   0.03%  ││  0x00007f329cc372d6:   cmpq		%rdi, %rdx
   9.19%  ││  0x00007f329cc372d9:   cmovlq		%rdi, %rdx
  19.76%  ││  0x00007f329cc372dd:   imulq		$0xb, 0x18(%rax, %r8, 8), %r14
          ││  0x00007f329cc372e3:   cmpq		%rdx, %r14
   6.14%  ││  0x00007f329cc372e6:   cmovlq		%rdx, %r14
  17.63%  ││  0x00007f329cc372ea:   imulq		$0xb, 0x28(%rax, %r8, 8), %rdi
          ││  0x00007f329cc372f0:   imulq		$0xb, 0x20(%rax, %r8, 8), %rdx
          ││  0x00007f329cc372f6:   cmpq		%r14, %rdx
   7.52%  ││  0x00007f329cc372f9:   cmovlq		%r14, %rdx
  20.45%  ││  0x00007f329cc372fd:   cmpq		%rdx, %rdi
   6.76%  ││  0x00007f329cc37300:   cmovlq		%rdx, %rdi          ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
          ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
  10.99%  ││  0x00007f329cc37304:   addl		$4, %r8d            ;*iinc {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
          ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
          ││  0x00007f329cc37308:   cmpl		%r11d, %r8d
          ╰│  0x00007f329cc3730b:   jl		0x7f329cc372d0      ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
           │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
           │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
           │  0x00007f329cc3730d:   movq		0x30(%r15), %r11    ; ImmutableOopMap {r9=Oop rcx=Oop rbx=Oop rax=Oop xmm0=Oop xmm1=Oop }
           │                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
           │                                                            ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
           │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   0.02%   │  0x00007f329cc37311:   testl		%eax, (%r11)        ;*goto {reexecute=0 rethrow=0 return_oop=0}
           │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
           │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
           │                                                            ;   {poll}
           │  0x00007f329cc37314:   cmpl		%ebp, %r8d
           ╰  0x00007f329cc37317:   jl		0x7f329cc372b2
              0x00007f329cc37319:   vmovq		%xmm0, %rdx
              0x00007f329cc3731e:   vmovq		%xmm1, %r11
....................................................................................................
  98.54%  <total for region 1>
#+end_src
***** longReductionSimpleMax
#+begin_src asm
....[Hottest Region 1]..............................................................................
c2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub, version 5, compile id 1260

              0x00007f3068c397c4:   movl		%ebp, %ebp
   0.02%      0x00007f3068c397c6:   cmpl		$1, %ebp
              0x00007f3068c397c9:   jle		0x7f3068c39990
              0x00007f3068c397cf:   movl		$1, %r11d
              0x00007f3068c397d5:   movq		%r9, %r14
              0x00007f3068c397d8:   vmovq		%rcx, %xmm0
              0x00007f3068c397dd:   vmovq		%rdi, %xmm1
              0x00007f3068c397e2:   vmovq		%r8, %xmm2
           ↗  0x00007f3068c397e7:   movl		%ebp, %r9d
           │  0x00007f3068c397ea:   subl		%r11d, %r9d
   0.01%   │  0x00007f3068c397ed:   cmpl		%r11d, %ebp
           │  0x00007f3068c397f0:   cmovll		%r10d, %r9d
           │  0x00007f3068c397f4:   cmpl		$0x3e80, %r9d
           │  0x00007f3068c397fb:   cmoval		%esi, %r9d
           │  0x00007f3068c397ff:   addl		%r11d, %r9d
           │  0x00007f3068c39802:   nopl		(%rax)
   0.02%   │  0x00007f3068c39809:   nopl		(%rax)              ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
           │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@14 (line 295)
           │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
          ↗│  0x00007f3068c39810:   movq		0x88(%r13, %r11, 8), %rcx
          ││  0x00007f3068c39818:   movq		0x80(%r13, %r11, 8), %rdi
          ││  0x00007f3068c39820:   movq		0x10(%r13, %r11, 8), %r8
          ││  0x00007f3068c39825:   cmpq		%r8, %rdx
   2.24%  ││  0x00007f3068c39828:   cmovlq		%r8, %rdx
   5.44%  ││  0x00007f3068c3982c:   movq		0x18(%r13, %r11, 8), %r8
          ││  0x00007f3068c39831:   cmpq		%r8, %rdx
   1.33%  ││  0x00007f3068c39834:   cmovlq		%r8, %rdx
   3.34%  ││  0x00007f3068c39838:   movq		0x20(%r13, %r11, 8), %r8
          ││  0x00007f3068c3983d:   cmpq		%r8, %rdx
   3.36%  ││  0x00007f3068c39840:   cmovlq		%r8, %rdx
   2.49%  ││  0x00007f3068c39844:   movq		0x28(%r13, %r11, 8), %r8
   0.01%  ││  0x00007f3068c39849:   cmpq		%r8, %rdx
   3.86%  ││  0x00007f3068c3984c:   cmovlq		%r8, %rdx
   2.79%  ││  0x00007f3068c39850:   movq		0x30(%r13, %r11, 8), %r8
          ││  0x00007f3068c39855:   cmpq		%r8, %rdx
   3.42%  ││  0x00007f3068c39858:   cmovlq		%r8, %rdx
   2.42%  ││  0x00007f3068c3985c:   movq		0x38(%r13, %r11, 8), %r8;   {other}
   0.01%  ││  0x00007f3068c39861:   cmpq		%r8, %rdx
   3.74%  ││  0x00007f3068c39864:   cmovlq		%r8, %rdx
   2.46%  ││  0x00007f3068c39868:   movq		0x40(%r13, %r11, 8), %r8
          ││  0x00007f3068c3986d:   cmpq		%r8, %rdx
   3.68%  ││  0x00007f3068c39870:   cmovlq		%r8, %rdx
   3.74%  ││  0x00007f3068c39874:   movq		0x48(%r13, %r11, 8), %r8
   0.02%  ││  0x00007f3068c39879:   cmpq		%r8, %rdx
   2.64%  ││  0x00007f3068c3987c:   cmovlq		%r8, %rdx
   2.44%  ││  0x00007f3068c39880:   movq		0x50(%r13, %r11, 8), %r8
          ││  0x00007f3068c39885:   cmpq		%r8, %rdx
   3.52%  ││  0x00007f3068c39888:   cmovlq		%r8, %rdx
   2.12%  ││  0x00007f3068c3988c:   movq		0x58(%r13, %r11, 8), %r8
   0.02%  ││  0x00007f3068c39891:   cmpq		%r8, %rdx
   3.90%  ││  0x00007f3068c39894:   cmovlq		%r8, %rdx
   2.62%  ││  0x00007f3068c39898:   movq		0x60(%r13, %r11, 8), %r8
          ││  0x00007f3068c3989d:   cmpq		%r8, %rdx
   3.67%  ││  0x00007f3068c398a0:   cmovlq		%r8, %rdx
   2.32%  ││  0x00007f3068c398a4:   movq		0x68(%r13, %r11, 8), %r8
   0.01%  ││  0x00007f3068c398a9:   cmpq		%r8, %rdx
   4.00%  ││  0x00007f3068c398ac:   cmovlq		%r8, %rdx
   3.52%  ││  0x00007f3068c398b0:   movq		0x70(%r13, %r11, 8), %r8
          ││  0x00007f3068c398b5:   cmpq		%r8, %rdx
   2.70%  ││  0x00007f3068c398b8:   cmovlq		%r8, %rdx
   2.75%  ││  0x00007f3068c398bc:   movq		0x78(%r13, %r11, 8), %r8
          ││  0x00007f3068c398c1:   cmpq		%r8, %rdx
   3.33%  ││  0x00007f3068c398c4:   cmovlq		%r8, %rdx
   2.77%  ││  0x00007f3068c398c8:   cmpq		%rdi, %rdx
   3.52%  ││  0x00007f3068c398cb:   cmovlq		%rdi, %rdx
   2.46%  ││  0x00007f3068c398cf:   cmpq		%rcx, %rdx
   3.59%  ││  0x00007f3068c398d2:   cmovlq		%rcx, %rdx          ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
   2.46%  ││  0x00007f3068c398d6:   addl		$0x10, %r11d        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
          ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@30 (line 294)
          ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
          ││  0x00007f3068c398da:   cmpl		%r9d, %r11d
          ╰│  0x00007f3068c398dd:   jl		0x7f3068c39810      ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
           │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
           │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
           │  0x00007f3068c398e3:   movq		0x30(%r15), %r8     ; ImmutableOopMap {rbx=Oop r13=Oop r14=Oop xmm0=Oop xmm1=Oop xmm2=Oop }
           │                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
           │                                                            ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
           │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
   0.03%   │  0x00007f3068c398e7:   testl		%eax, (%r8)         ;*goto {reexecute=0 rethrow=0 return_oop=0}
           │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
           │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
           │                                                            ;   {poll}
           │  0x00007f3068c398ea:   cmpl		%ebp, %r11d
           ╰  0x00007f3068c398ed:   jl		0x7f3068c397e7
              0x00007f3068c398f3:   movq		%r14, %r9
              0x00007f3068c398f6:   vmovq		%xmm0, %rcx
....................................................................................................

#+end_src
*** branch always
**** release
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt     Score   Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  1771.766 ± 2.370  ops/ms
MinMaxVector.longReductionSimpleMax              100    2048  thrpt    8  1039.047 ± 5.616  ops/ms
#+end_src
**** profile
#+begin_src bash
Benchmark                                  (probability)  (size)   Mode  Cnt     Score   Error   Units
MinMaxVector.longReductionMultiplyMax                100    2048  thrpt    4  1765.454 ± 4.656  ops/ms
MinMaxVector.longReductionMultiplyMax:asm            100    2048  thrpt            NaN             ---
MinMaxVector.longReductionSimpleMax                  100    2048  thrpt    4  1047.897 ± 9.120  ops/ms
MinMaxVector.longReductionSimpleMax:asm              100    2048  thrpt            NaN             ---
#+end_src
***** longReductionMultiplyMax
#+begin_src asm
c2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 1258

                  0x00007f6260c39984:   movl		%r10d, %esi
                  0x00007f6260c39987:   cmpl		$1, %esi
   0.04%          0x00007f6260c3998a:   jle		0x7f6260c39a9c
                  0x00007f6260c39990:   movl		$1, %r9d
                  0x00007f6260c39996:   vmovq		%rbp, %xmm0
               ↗  0x00007f6260c3999b:   movl		%esi, %r8d
               │  0x00007f6260c3999e:   subl		%r9d, %r8d
               │  0x00007f6260c399a1:   xorl		%r10d, %r10d
               │  0x00007f6260c399a4:   cmpl		%r9d, %esi
               │  0x00007f6260c399a7:   cmovll		%r10d, %r8d
   0.06%       │  0x00007f6260c399ab:   cmpl		$0xfa0, %r8d
               │  0x00007f6260c399b2:   movl		$0xfa0, %r10d
               │  0x00007f6260c399b8:   cmoval		%r10d, %r8d
               │  0x00007f6260c399bc:   addl		%r9d, %r8d
   0.05%       │  0x00007f6260c399bf:   nop		                    ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
               │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
               │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
              ↗│  0x00007f6260c399c0:   imulq		$0xb, 0x10(%r13, %r9, 8), %r10
   0.05%      ││  0x00007f6260c399c6:   cmpq		%r10, %rax
  24.44%  ╭   ││  0x00007f6260c399c9:   jg		0x7f6260c399ce
          │   ││  0x00007f6260c399cb:   movq		%r10, %rax
          ↘   ││  0x00007f6260c399ce:   imulq		$0xb, 0x18(%r13, %r9, 8), %r10
              ││  0x00007f6260c399d4:   cmpq		%r10, %rax
  24.85%   ╭  ││  0x00007f6260c399d7:   jg		0x7f6260c399dc
           │  ││  0x00007f6260c399d9:   movq		%r10, %rax
           ↘  ││  0x00007f6260c399dc:   imulq		$0xb, 0x28(%r13, %r9, 8), %r10
   0.07%      ││  0x00007f6260c399e2:   imulq		$0xb, 0x20(%r13, %r9, 8), %rbp
   0.11%      ││  0x00007f6260c399e8:   cmpq		%rbp, %rax
  47.64%    ╭ ││  0x00007f6260c399eb:   jg		0x7f6260c399f0
            │ ││  0x00007f6260c399ed:   movq		%rbp, %rax
            ↘ ││  0x00007f6260c399f0:   cmpq		%r10, %rax
             ╭││  0x00007f6260c399f3:   jg		0x7f6260c399f8
             │││  0x00007f6260c399f5:   movq		%r10, %rax          ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
             │││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
             │││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
             ↘││  0x00007f6260c399f8:   addl		$4, %r9d            ;*iinc {reexecute=0 rethrow=0 return_oop=0}
              ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
              ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   0.06%      ││  0x00007f6260c399fc:   cmpl		%r8d, %r9d
              ╰│  0x00007f6260c399ff:   jl		0x7f6260c399c0      ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
               │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
               │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
               │  0x00007f6260c39a01:   movq		0x30(%r15), %r10    ; ImmutableOopMap {r11=Oop rcx=Oop rbx=Oop rdi=Oop rdx=Oop r13=Oop }
               │                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
               │                                                            ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
               │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   0.82%       │  0x00007f6260c39a05:   testl		%eax, (%r10)        ;*goto {reexecute=0 rethrow=0 return_oop=0}
               │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
               │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
               │                                                            ;   {poll}
   0.25%       │  0x00007f6260c39a08:   cmpl		%esi, %r9d
               ╰  0x00007f6260c39a0b:   jl		0x7f6260c3999b
                  0x00007f6260c39a0d:   vmovq		%xmm0, %rbp
                  0x00007f6260c39a12:   cmpl		%r14d, %r9d
                  0x00007f6260c39a15:   jl		0x7f6260c398fa
                  0x00007f6260c39a1b:   movq		%rax, %r10
                  0x00007f6260c39a1e:   jmp		0x7f6260c39910
                  0x00007f6260c39a23:   xorl		%r10d, %r10d
....................................................................................................
  98.38%  <total for region 1>
#+end_src
***** longReductionSimpleMax
#+begin_src asm
....[Hottest Region 1]..............................................................................
c2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub, version 5, compile id 1253

                                     0x00007fc8c0c37a9b:   movq		%r13, %rax
                                     0x00007fc8c0c37a9e:   movzbl		0x94(%rax), %r10d   ; implicit exception: dispatches to 0x00007fc8c0c37dac
                                                                                               ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
                                                                                               ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@32 (line 126)
                                     0x00007fc8c0c37aa6:   testl		%r10d, %r10d
                                     0x00007fc8c0c37aa9:   jne		0x7fc8c0c37ca5      ;*ifeq {reexecute=0 rethrow=0 return_oop=0}
                                                                                               ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@35 (line 126)
                                     0x00007fc8c0c37aaf:   movl		$1, %ebp
          ╭                          0x00007fc8c0c37ab4:   jmp		0x7fc8c0c37c26
          │                          0x00007fc8c0c37ab9:   nopl		(%rax)
   1.11%  │                ↗         0x00007fc8c0c37ac0:   movq		%r11, %r8           ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
          │                │                                                                   ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@14 (line 295)
          │                │                                                                   ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
   0.01%  │                │ ↗       0x00007fc8c0c37ac3:   movq		0x88(%rsi, %r10, 8), %r11
  10.14%  │                │ │       0x00007fc8c0c37acb:   movq		0x80(%rsi, %r10, 8), %rbp
   1.21%  │                │ │       0x00007fc8c0c37ad3:   movq		0x10(%rsi, %r10, 8), %r14
   2.12%  │                │ │       0x00007fc8c0c37ad8:   cmpq		%r8, %r14
          │╭               │ │       0x00007fc8c0c37adb:   jg		0x7fc8c0c37ae0
          ││               │ │       0x00007fc8c0c37add:   movq		%r8, %r14
          │↘               │ │       0x00007fc8c0c37ae0:   movq		0x18(%rsi, %r10, 8), %r8
   1.76%  │                │ │       0x00007fc8c0c37ae5:   cmpq		%r14, %r8
   2.15%  │ ╭              │ │       0x00007fc8c0c37ae8:   jg		0x7fc8c0c37aed
          │ │              │ │       0x00007fc8c0c37aea:   movq		%r14, %r8
          │ ↘              │ │       0x00007fc8c0c37aed:   movq		0x20(%rsi, %r10, 8), %r14
   2.98%  │                │ │       0x00007fc8c0c37af2:   cmpq		%r8, %r14
   1.93%  │  ╭             │ │       0x00007fc8c0c37af5:   jg		0x7fc8c0c37afa
          │  │             │ │       0x00007fc8c0c37af7:   movq		%r8, %r14
          │  ↘             │ │       0x00007fc8c0c37afa:   movq		0x28(%rsi, %r10, 8), %r8
   1.67%  │                │ │       0x00007fc8c0c37aff:   cmpq		%r14, %r8
   1.78%  │   ╭            │ │       0x00007fc8c0c37b02:   jg		0x7fc8c0c37b07
          │   │            │ │       0x00007fc8c0c37b04:   movq		%r14, %r8
   0.21%  │   ↘            │ │       0x00007fc8c0c37b07:   movq		0x30(%rsi, %r10, 8), %r14
   6.81%  │                │ │       0x00007fc8c0c37b0c:   cmpq		%r8, %r14
   0.03%  │    ╭           │ │       0x00007fc8c0c37b0f:   jg		0x7fc8c0c37b14
   0.13%  │    │           │ │       0x00007fc8c0c37b11:   movq		%r8, %r14
   1.17%  │    ↘           │ │       0x00007fc8c0c37b14:   movq		0x38(%rsi, %r10, 8), %r8
   4.17%  │                │ │       0x00007fc8c0c37b19:   cmpq		%r14, %r8
   0.01%  │     ╭          │ │       0x00007fc8c0c37b1c:   jg		0x7fc8c0c37b21
          │     │          │ │       0x00007fc8c0c37b1e:   movq		%r14, %r8
   0.21%  │     ↘          │ │       0x00007fc8c0c37b21:   movq		0x40(%rsi, %r10, 8), %r14
   4.71%  │                │ │       0x00007fc8c0c37b26:   cmpq		%r8, %r14
   0.01%  │      ╭         │ │       0x00007fc8c0c37b29:   jg		0x7fc8c0c37b2e      ;   {other}
          │      │         │ │       0x00007fc8c0c37b2b:   movq		%r8, %r14
          │      ↘         │ │       0x00007fc8c0c37b2e:   movq		0x48(%rsi, %r10, 8), %r8
   6.36%  │                │ │       0x00007fc8c0c37b33:   cmpq		%r14, %r8
   0.01%  │       ╭        │ │       0x00007fc8c0c37b36:   jg		0x7fc8c0c37b3b
          │       │        │ │       0x00007fc8c0c37b38:   movq		%r14, %r8
   0.03%  │       ↘        │ │       0x00007fc8c0c37b3b:   movq		0x50(%rsi, %r10, 8), %r14
   5.05%  │                │ │       0x00007fc8c0c37b40:   cmpq		%r8, %r14
   0.03%  │        ╭       │ │       0x00007fc8c0c37b43:   jg		0x7fc8c0c37b48
          │        │       │ │       0x00007fc8c0c37b45:   movq		%r8, %r14
   0.23%  │        ↘       │ │       0x00007fc8c0c37b48:   movq		0x58(%rsi, %r10, 8), %r8
   8.20%  │                │ │       0x00007fc8c0c37b4d:   cmpq		%r14, %r8
          │         ╭      │ │       0x00007fc8c0c37b50:   jg		0x7fc8c0c37b55
   0.17%  │         │      │ │       0x00007fc8c0c37b52:   movq		%r14, %r8
   1.36%  │         ↘      │ │       0x00007fc8c0c37b55:   movq		0x60(%rsi, %r10, 8), %r14
   4.71%  │                │ │       0x00007fc8c0c37b5a:   cmpq		%r8, %r14
          │          ╭     │ │       0x00007fc8c0c37b5d:   jg		0x7fc8c0c37b62
   0.04%  │          │     │ │       0x00007fc8c0c37b5f:   movq		%r8, %r14
   0.27%  │          ↘     │ │       0x00007fc8c0c37b62:   movq		0x68(%rsi, %r10, 8), %r8
   4.63%  │                │ │       0x00007fc8c0c37b67:   cmpq		%r14, %r8
          │           ╭    │ │       0x00007fc8c0c37b6a:   jg		0x7fc8c0c37b6f
          │           │    │ │       0x00007fc8c0c37b6c:   movq		%r14, %r8
   0.03%  │           ↘    │ │       0x00007fc8c0c37b6f:   movq		0x70(%rsi, %r10, 8), %r14
   5.59%  │                │ │       0x00007fc8c0c37b74:   cmpq		%r8, %r14
          │            ╭   │ │       0x00007fc8c0c37b77:   jg		0x7fc8c0c37b7c
          │            │   │ │       0x00007fc8c0c37b79:   movq		%r8, %r14
   0.06%  │            ↘   │ │       0x00007fc8c0c37b7c:   movq		0x78(%rsi, %r10, 8), %r8
   9.85%  │                │ │       0x00007fc8c0c37b81:   cmpq		%r14, %r8
          │             ╭  │ │       0x00007fc8c0c37b84:   jg		0x7fc8c0c37b89
          │             │  │ │       0x00007fc8c0c37b86:   movq		%r14, %r8
          │             ↘  │ │       0x00007fc8c0c37b89:   cmpq		%r8, %rbp
   3.12%  │              ╭ │ │       0x00007fc8c0c37b8c:   jg		0x7fc8c0c37b91
          │              │ │ │       0x00007fc8c0c37b8e:   movq		%r8, %rbp
          │              ↘ │ │       0x00007fc8c0c37b91:   cmpq		%rbp, %r11
   0.49%  │               ╭│ │       0x00007fc8c0c37b94:   jg		0x7fc8c0c37b99
          │               ││ │       0x00007fc8c0c37b96:   movq		%rbp, %r11          ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
          │               ││ │                                                                 ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          │               ││ │                                                                 ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
   0.02%  │               ↘│ │       0x00007fc8c0c37b99:   addl		$0x10, %r10d        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
          │                │ │                                                                 ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@30 (line 294)
          │                │ │                                                                 ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
   0.02%  │                │ │       0x00007fc8c0c37b9d:   cmpl		%r9d, %r10d
   1.78%  │                ╰ │       0x00007fc8c0c37ba0:   jl		0x7fc8c0c37ac0      ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
          │                  │                                                                 ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
          │                  │                                                                 ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
          │                  │       0x00007fc8c0c37ba6:   movq		0x30(%r15), %r8     ; ImmutableOopMap {rcx=Oop rbx=Oop rdi=Oop rdx=Oop rsi=Oop rax=Oop }
          │                  │                                                                 ;*goto {reexecute=1 rethrow=0 return_oop=0}
          │                  │                                                                 ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
          │                  │                                                                 ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
   0.04%  │                  │       0x00007fc8c0c37baa:   testl		%eax, (%r8)         ;*goto {reexecute=0 rethrow=0 return_oop=0}
          │                  │                                                                 ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
          │                  │                                                                 ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
          │                  │                                                                 ;   {poll}
   0.12%  │                  │       0x00007fc8c0c37bad:   cmpl		%r13d, %r10d
          │                 ╭│       0x00007fc8c0c37bb0:   jge		0x7fc8c0c37bf8
          │                 ││       0x00007fc8c0c37bb2:   movq		%r11, %r8
          │                 ││       0x00007fc8c0c37bb5:   movl		%r13d, %r9d
   0.02%  │                 ││       0x00007fc8c0c37bb8:   subl		%r10d, %r9d
          │                 ││       0x00007fc8c0c37bbb:   xorl		%r11d, %r11d
          │                 ││       0x00007fc8c0c37bbe:   cmpl		%r10d, %r13d
          │                 ││       0x00007fc8c0c37bc1:   cmovll		%r11d, %r9d
   0.09%  │                 ││       0x00007fc8c0c37bc5:   cmpl		$0x3e80, %r9d
          │                 ││       0x00007fc8c0c37bcc:   movl		$0x3e80, %r11d
          │                 ││       0x00007fc8c0c37bd2:   cmoval		%r11d, %r9d
   0.07%  │                 ││       0x00007fc8c0c37bd6:   addl		%r10d, %r9d
   0.03%  │                 │╰       0x00007fc8c0c37bd9:   jmp		0x7fc8c0c37ac3
          │                 │  ↗     0x00007fc8c0c37bde:   movq		%r8, %r11           ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
          │                 │  │                                                               ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@14 (line 295)
          │                 │  │                                                               ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
          │                 │  │ ↗   0x00007fc8c0c37be1:   movq		0x10(%rsi, %r10, 8), %r8
   1.02%  │                 │  │ │   0x00007fc8c0c37be6:   cmpq		%r11, %r8
          │                 │ ╭│ │   0x00007fc8c0c37be9:   jg		0x7fc8c0c37bee
          │                 │ ││ │   0x00007fc8c0c37beb:   movq		%r11, %r8           ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
          │                 │ ││ │                                                             ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          │                 │ ││ │                                                             ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
          │                 │ ↘│ │   0x00007fc8c0c37bee:   incl		%r10d               ;*iinc {reexecute=0 rethrow=0 return_oop=0}
          │                 │  │ │                                                             ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@30 (line 294)
          │                 │  │ │                                                             ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
          │                 │  │ │   0x00007fc8c0c37bf1:   cmpl		%r9d, %r10d
   0.05%  │                 │  ╰ │   0x00007fc8c0c37bf4:   jl		0x7fc8c0c37bde      ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
          │                 │    │                                                             ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
          │                 │    │                                                             ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
          │                 │   ╭│   0x00007fc8c0c37bf6:   jmp		0x7fc8c0c37c0a
          │                 ↘   ││   0x00007fc8c0c37bf8:   vmovq		%xmm0, %rbp
          │                     ││   0x00007fc8c0c37bfd:   vmovd		%xmm1, %r9d
          │                     ││   0x00007fc8c0c37c02:   cmpl		%r9d, %r10d
          │                     │╰   0x00007fc8c0c37c05:   jl		0x7fc8c0c37be1
          │                     │    0x00007fc8c0c37c07:   movq		%r11, %r8           ;*invokestatic consumeCompiler {reexecute=0 rethrow=0 return_oop=0}
          │                     │                                                              ; - org.openjdk.jmh.infra.Blackhole::consume@7 (line 401)
          │                     │                                                              ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@22 (line 124)
          │                     ↘    0x00007fc8c0c37c0a:   movzbl		0x94(%rax), %r10d   ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
          │                                                                                    ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@32 (line 126)
   0.12%  │                          0x00007fc8c0c37c12:   movq		0x30(%r15), %r11
   0.01%  │                          0x00007fc8c0c37c16:   addq		$1, %rbp            ; ImmutableOopMap {rcx=Oop rbx=Oop rdi=Oop rdx=Oop rax=Oop }
          │                                                                                    ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
          │                                                                                    ; - (reexecute) org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@35 (line 126)
          │                          0x00007fc8c0c37c1a:   testl		%eax, (%r11)        ;   {poll}
   0.12%  │                          0x00007fc8c0c37c1d:   testl		%r10d, %r10d
          │                          0x00007fc8c0c37c20:   jne		0x7fc8c0c37caa      ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
          │                                                                                    ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@38 (line 127)
          ↘                          0x00007fc8c0c37c26:   movl		0xc(%rdi), %r9d     ;*getfield size {reexecute=0 rethrow=0 return_oop=0}
                                                                                               ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@8 (line 294)
                                                                                               ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
                                     0x00007fc8c0c37c2a:   testl		%r9d, %r9d
                                     0x00007fc8c0c37c2d:   jle		0x7fc8c0c37c9d      ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                                               ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
                                                                                               ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
                                     0x00007fc8c0c37c2f:   movl		0x2c(%rdi), %r10d   ;*getfield maxLongA {reexecute=0 rethrow=0 return_oop=0}
                                                                                               ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@15 (line 295)
                                                                                               ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
                                     0x00007fc8c0c37c33:   movl		0xc(%r12, %r10, 8), %r8d; implicit exception: dispatches to 0x00007fc8c0c37ce5
                                                                                               ;*laload {reexecute=0 rethrow=0 return_oop=0}
                                                                                               ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
                                                                                               ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
   0.10%                             0x00007fc8c0c37c38:   testl		%r8d, %r8d
                                     0x00007fc8c0c37c3b:   jbe		0x7fc8c0c37ce5
                                     0x00007fc8c0c37c41:   movslq		%r9d, %rsi
                                     0x00007fc8c0c37c44:   movslq		%r8d, %r11
                                     0x00007fc8c0c37c47:   leaq		-1(%rsi), %r8
                                     0x00007fc8c0c37c4b:   cmpq		%r11, %r8
   0.02%                             0x00007fc8c0c37c4e:   jae		0x7fc8c0c37ce5
                                     0x00007fc8c0c37c54:   movq		0x10(%r12, %r10, 8), %r11
                                     0x00007fc8c0c37c59:   xorl		%r8d, %r8d
                                     0x00007fc8c0c37c5c:   cmpq		%r11, %r8
                                  ╭  0x00007fc8c0c37c5f:   jg		0x7fc8c0c37c64
                                  │  0x00007fc8c0c37c61:   movq		%r11, %r8           ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
                                  │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
                                  │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
                                  ↘  0x00007fc8c0c37c64:   addq		$-0xf, %rsi
                                     0x00007fc8c0c37c68:   movq		$18446744071562067968, %r11
                                     0x00007fc8c0c37c6f:   cmpq		%rsi, %r11
....................................................................................................
  98.14%  <total for region 1>
#+end_src
*** branch never
**** release
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8   976.735 ± 98.646  ops/ms
MinMaxVector.longReductionSimpleMax              100    2048  thrpt    8  2794.892 ±  1.316  ops/ms
#+end_src
**** profile
#+begin_src bash
Benchmark                                  (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionMultiplyMax                100    2048  thrpt    4   980.974 ±  2.487  ops/ms
MinMaxVector.longReductionMultiplyMax:asm            100    2048  thrpt            NaN              ---
MinMaxVector.longReductionSimpleMax                  100    2048  thrpt    4  2781.297 ± 10.702  ops/ms
MinMaxVector.longReductionSimpleMax:asm              100    2048  thrpt            NaN              ---
#+end_src
***** longReductionMultiplyMax
#+begin_src asm
....[Hottest Region 1]..............................................................................
c2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 1256

   0.02%           0x00007f8870c38828:   leaq		(%r12, %rsi, 8), %r14
                   0x00007f8870c3882c:   addq		$-3, %r11
                   0x00007f8870c38830:   movq		$18446744071562067968, %rsi
                   0x00007f8870c38837:   cmpl		%r11d, %esi
          ╭        0x00007f8870c3883a:   jl		0x7f8870c3883f
          │        0x00007f8870c3883c:   movq		%rsi, %r11
          ↘        0x00007f8870c3883f:   movl		%r11d, %esi
                   0x00007f8870c38842:   cmpl		$1, %esi
                   0x00007f8870c38845:   jle		0x7f8870c38920
                   0x00007f8870c3884b:   movl		$1, %r11d
   0.03%           0x00007f8870c38851:   vmovq		%rdx, %xmm0
                   0x00007f8870c38856:   vmovq		%rax, %xmm1
                   0x00007f8870c3885b:   vmovq		%r10, %xmm2
                ↗  0x00007f8870c38860:   movl		%esi, %r10d
                │  0x00007f8870c38863:   subl		%r11d, %r10d
                │  0x00007f8870c38866:   cmpl		%r11d, %esi
                │  0x00007f8870c38869:   cmovll		%edi, %r10d
   0.04%        │  0x00007f8870c3886d:   cmpl		$0xfa0, %r10d
                │  0x00007f8870c38874:   cmoval		%r9d, %r10d
   0.03%        │  0x00007f8870c38878:   addl		%r11d, %r10d
   0.05%        │  0x00007f8870c3887b:   nopl		(%rax, %rax)        ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
                │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
                │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
               ↗│  0x00007f8870c38880:   imulq		$0xb, 0x10(%r14, %r11, 8), %rdx
   8.59%       ││  0x00007f8870c38886:   cmpl		%edx, %r13d
  20.04%   ╭   ││  0x00007f8870c38889:   jl		0x7f8870c3888e
           │   ││  0x00007f8870c3888b:   movq		%r13, %rdx
           ↘   ││  0x00007f8870c3888e:   imulq		$0xb, 0x18(%r14, %r11, 8), %rax
   1.59%       ││  0x00007f8870c38894:   cmpl		%eax, %edx
  18.40%    ╭  ││  0x00007f8870c38896:   jl		0x7f8870c3889b
            │  ││  0x00007f8870c38898:   movq		%rdx, %rax
            ↘  ││  0x00007f8870c3889b:   imulq		$0xb, 0x28(%r14, %r11, 8), %r13
   4.22%       ││  0x00007f8870c388a1:   imulq		$0xb, 0x20(%r14, %r11, 8), %rdx
   4.99%       ││  0x00007f8870c388a7:   cmpl		%edx, %eax
  26.99%     ╭ ││  0x00007f8870c388a9:   jl		0x7f8870c388ae
             │ ││  0x00007f8870c388ab:   movq		%rax, %rdx
             ↘ ││  0x00007f8870c388ae:   cmpl		%r13d, %edx
  12.24%      ╭││  0x00007f8870c388b1:   jl		0x7f8870c388b6
              │││  0x00007f8870c388b3:   movq		%rdx, %r13          ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
              │││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
              │││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   0.18%      ↘││  0x00007f8870c388b6:   addl		$4, %r11d           ;*iinc {reexecute=0 rethrow=0 return_oop=0}
               ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
               ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   0.09%       ││  0x00007f8870c388ba:   cmpl		%r10d, %r11d
   1.19%       ╰│  0x00007f8870c388bd:   jl		0x7f8870c38880      ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
                │  0x00007f8870c388bf:   movq		0x30(%r15), %r10    ; ImmutableOopMap {r8=Oop rbx=Oop r14=Oop xmm0=Oop xmm1=Oop xmm2=Oop }
                │                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                │                                                            ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   0.22%        │  0x00007f8870c388c3:   testl		%eax, (%r10)        ;*goto {reexecute=0 rethrow=0 return_oop=0}
                │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
                │                                                            ;   {poll}
   0.12%        │  0x00007f8870c388c6:   cmpl		%esi, %r11d
                ╰  0x00007f8870c388c9:   jl		0x7f8870c38860
                   0x00007f8870c388cb:   vmovq		%xmm0, %rdx
                   0x00007f8870c388d0:   vmovq		%xmm1, %rax
                   0x00007f8870c388d5:   vmovq		%xmm2, %r10
                   0x00007f8870c388da:   cmpl		%ecx, %r11d
                   0x00007f8870c388dd:   jl		0x7f8870c387bc
                   0x00007f8870c388e3:   jmp		0x7f8870c387d2
....................................................................................................
  98.99%  <total for region 1>
#+end_src
***** longReductionSimpleMax
#+begin_src asm
....[Hottest Region 1]..............................................................................
c2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub, version 5, compile id 1249

                              0x00007fcc14c37ed2:   movl		%ebp, %ebp
   0.07%                      0x00007fcc14c37ed4:   cmpl		$1, %ebp
                              0x00007fcc14c37ed7:   jle		0x7fcc14c3808c
                              0x00007fcc14c37edd:   movl		$1, %r8d
                              0x00007fcc14c37ee3:   vmovq		%rcx, %xmm0
                              0x00007fcc14c37ee8:   vmovq		%rdx, %xmm1
                              0x00007fcc14c37eed:   vmovq		%r11, %xmm2
                           ↗  0x00007fcc14c37ef2:   movl		%ebp, %r11d
                           │  0x00007fcc14c37ef5:   subl		%r8d, %r11d
                           │  0x00007fcc14c37ef8:   cmpl		%r8d, %ebp
   0.04%                   │  0x00007fcc14c37efb:   cmovll		%r10d, %r11d
                           │  0x00007fcc14c37eff:   cmpl		$0x3e80, %r11d
   0.13%                   │  0x00007fcc14c37f06:   cmoval		%esi, %r11d
   0.14%                   │  0x00007fcc14c37f0a:   addl		%r8d, %r11d
   0.04%                   │  0x00007fcc14c37f0d:   nop		                    ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                           │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@14 (line 295)
                           │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
                          ↗│  0x00007fcc14c37f10:   movq		0x88(%rax, %r8, 8), %rdx
   0.01%                  ││  0x00007fcc14c37f18:   movq		0x80(%rax, %r8, 8), %r14
                          ││  0x00007fcc14c37f20:   movq		0x10(%rax, %r8, 8), %rcx
   1.09%                  ││  0x00007fcc14c37f25:   cmpl		%edi, %ecx
   8.31%  ╭               ││  0x00007fcc14c37f27:   jl		0x7fcc14c37f2c
          │               ││  0x00007fcc14c37f29:   movq		%rcx, %rdi
          ↘               ││  0x00007fcc14c37f2c:   movq		0x18(%rax, %r8, 8), %rcx
                          ││  0x00007fcc14c37f31:   cmpl		%edi, %ecx
   0.15%   ╭              ││  0x00007fcc14c37f33:   jl		0x7fcc14c37f38
           │              ││  0x00007fcc14c37f35:   movq		%rcx, %rdi
           ↘              ││  0x00007fcc14c37f38:   movq		0x20(%rax, %r8, 8), %rcx
   1.11%                  ││  0x00007fcc14c37f3d:   cmpl		%edi, %ecx
   8.41%    ╭             ││  0x00007fcc14c37f3f:   jl		0x7fcc14c37f44
            │             ││  0x00007fcc14c37f41:   movq		%rcx, %rdi
   0.01%    ↘             ││  0x00007fcc14c37f44:   movq		0x28(%rax, %r8, 8), %rcx
                          ││  0x00007fcc14c37f49:   cmpl		%edi, %ecx
   0.10%     ╭            ││  0x00007fcc14c37f4b:   jl		0x7fcc14c37f50
             │            ││  0x00007fcc14c37f4d:   movq		%rcx, %rdi
             ↘            ││  0x00007fcc14c37f50:   movq		0x30(%rax, %r8, 8), %rcx
   1.19%                  ││  0x00007fcc14c37f55:   cmpl		%edi, %ecx
   8.26%      ╭           ││  0x00007fcc14c37f57:   jl		0x7fcc14c37f5c
              │           ││  0x00007fcc14c37f59:   movq		%rcx, %rdi
              ↘           ││  0x00007fcc14c37f5c:   movq		0x38(%rax, %r8, 8), %rcx
                          ││  0x00007fcc14c37f61:   cmpl		%edi, %ecx
   9.25%       ╭          ││  0x00007fcc14c37f63:   jl		0x7fcc14c37f68
               │          ││  0x00007fcc14c37f65:   movq		%rcx, %rdi
               ↘          ││  0x00007fcc14c37f68:   movq		0x40(%rax, %r8, 8), %rcx;   {other}
   0.01%                  ││  0x00007fcc14c37f6d:   cmpl		%edi, %ecx
   0.10%        ╭         ││  0x00007fcc14c37f6f:   jl		0x7fcc14c37f74
                │         ││  0x00007fcc14c37f71:   movq		%rcx, %rdi
   0.04%        ↘         ││  0x00007fcc14c37f74:   movq		0x48(%rax, %r8, 8), %rcx
   0.02%                  ││  0x00007fcc14c37f79:   cmpl		%edi, %ecx
   9.17%         ╭        ││  0x00007fcc14c37f7b:   jl		0x7fcc14c37f80
                 │        ││  0x00007fcc14c37f7d:   movq		%rcx, %rdi
                 ↘        ││  0x00007fcc14c37f80:   movq		0x50(%rax, %r8, 8), %rcx
   0.01%                  ││  0x00007fcc14c37f85:   cmpl		%edi, %ecx
   0.10%          ╭       ││  0x00007fcc14c37f87:   jl		0x7fcc14c37f8c
                  │       ││  0x00007fcc14c37f89:   movq		%rcx, %rdi
                  ↘       ││  0x00007fcc14c37f8c:   movq		0x58(%rax, %r8, 8), %rcx
   0.01%                  ││  0x00007fcc14c37f91:   cmpl		%edi, %ecx
   9.41%           ╭      ││  0x00007fcc14c37f93:   jl		0x7fcc14c37f98
                   │      ││  0x00007fcc14c37f95:   movq		%rcx, %rdi
                   ↘      ││  0x00007fcc14c37f98:   movq		0x60(%rax, %r8, 8), %rcx
   0.02%                  ││  0x00007fcc14c37f9d:   cmpl		%edi, %ecx
   9.82%            ╭     ││  0x00007fcc14c37f9f:   jl		0x7fcc14c37fa4
                    │     ││  0x00007fcc14c37fa1:   movq		%rcx, %rdi
                    ↘     ││  0x00007fcc14c37fa4:   movq		0x68(%rax, %r8, 8), %rcx
   0.02%                  ││  0x00007fcc14c37fa9:   cmpl		%edi, %ecx
   0.05%             ╭    ││  0x00007fcc14c37fab:   jl		0x7fcc14c37fb0
                     │    ││  0x00007fcc14c37fad:   movq		%rcx, %rdi
                     ↘    ││  0x00007fcc14c37fb0:   movq		0x70(%rax, %r8, 8), %rcx
   0.06%                  ││  0x00007fcc14c37fb5:   cmpl		%edi, %ecx
   9.66%              ╭   ││  0x00007fcc14c37fb7:   jl		0x7fcc14c37fbc
                      │   ││  0x00007fcc14c37fb9:   movq		%rcx, %rdi
                      ↘   ││  0x00007fcc14c37fbc:   movq		0x78(%rax, %r8, 8), %rcx
                          ││  0x00007fcc14c37fc1:   cmpl		%edi, %ecx
   0.10%               ╭  ││  0x00007fcc14c37fc3:   jl		0x7fcc14c37fc8
                       │  ││  0x00007fcc14c37fc5:   movq		%rcx, %rdi
                       ↘  ││  0x00007fcc14c37fc8:   cmpl		%edi, %r14d
   9.56%                ╭ ││  0x00007fcc14c37fcb:   jl		0x7fcc14c37fd0
                        │ ││  0x00007fcc14c37fcd:   movq		%r14, %rdi
                        ↘ ││  0x00007fcc14c37fd0:   cmpl		%edi, %edx
   0.07%                 ╭││  0x00007fcc14c37fd2:   jl		0x7fcc14c37fd7
                         │││  0x00007fcc14c37fd4:   movq		%rdx, %rdi          ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
                         │││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
                         │││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
   0.10%                 ↘││  0x00007fcc14c37fd7:   addl		$0x10, %r8d         ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                          ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@30 (line 294)
                          ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
                          ││  0x00007fcc14c37fdb:   cmpl		%r11d, %r8d
   9.37%                  ╰│  0x00007fcc14c37fde:   jl		0x7fcc14c37f10      ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                           │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
                           │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
                           │  0x00007fcc14c37fe4:   movq		0x30(%r15), %r11    ; ImmutableOopMap {r9=Oop rbx=Oop rax=Oop xmm0=Oop xmm1=Oop xmm2=Oop }
                           │                                                            ;*goto {reexecute=1 rethrow=0 return_oop=0}
                           │                                                            ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
                           │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
   1.15%                   │  0x00007fcc14c37fe8:   testl		%eax, (%r11)        ;*goto {reexecute=0 rethrow=0 return_oop=0}
                           │                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
                           │                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
                           │                                                            ;   {poll}
   0.37%                   │  0x00007fcc14c37feb:   cmpl		%ebp, %r8d
                           ╰  0x00007fcc14c37fee:   jl		0x7fcc14c37ef2
                              0x00007fcc14c37ff4:   vmovq		%xmm0, %rcx
                              0x00007fcc14c37ff9:   vmovq		%xmm1, %rdx
                              0x00007fcc14c37ffe:   vmovq		%xmm2, %r11
                              0x00007fcc14c38003:   cmpl		%r13d, %r8d
                              0x00007fcc14c38006:   jl		0x7fcc14c37e44
                              0x00007fcc14c3800c:   jmp		0x7fcc14c37e58
....................................................................................................
  97.43%  <total for region 1>
#+end_src
*** disabled intrinsic
**** release
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  1142.080 ± 38.450  ops/ms
MinMaxVector.longReductionSimpleMax              100    2048  thrpt    8  1168.054 ± 62.525  ops/ms
#+end_src
**** profile
#+begin_src bash
Benchmark                                  (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionMultiplyMax                100    2048  thrpt    4  1128.495 ± 19.797  ops/ms
MinMaxVector.longReductionMultiplyMax:asm            100    2048  thrpt            NaN              ---
MinMaxVector.longReductionSimpleMax                  100    2048  thrpt    4  1216.007 ± 23.134  ops/ms
MinMaxVector.longReductionSimpleMax:asm              100    2048  thrpt            NaN              ---
#+end_src
***** longReductionMultiplyMax
#+begin_src asm
....[Hottest Region 1]..............................................................................
c2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 1255

                         0x00007fa2b4c37d8a:   movl		$1, %ebp
                         0x00007fa2b4c37d8f:   jmp		0x7fa2b4c37e72
               ↗         0x00007fa2b4c37d94:   movq		%rdi, %rbp
               │         0x00007fa2b4c37d97:   nopw		(%rax, %rax)        ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
               │                                                                   ; - java.lang.Math::max@11 (line 2038)
               │                                                                   ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
               │                                                                   ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
              ↗│         0x00007fa2b4c37da0:   addl		$4, %r8d            ;*iinc {reexecute=0 rethrow=0 return_oop=0}
              ││                                                                   ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
              ││                                                                   ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   0.01%      ││         0x00007fa2b4c37da4:   cmpl		%r11d, %r8d
   0.12%  ╭   ││         0x00007fa2b4c37da7:   jge		0x7fa2b4c37de6      ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
          │   ││                                                                   ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
          │   ││                                                                   ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
          │   ││    ↗    0x00007fa2b4c37da9:   imulq		$0xb, 0x10(%r14, %r8, 8), %rdi
          │   ││    │                                                              ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │   ││    │                                                              ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@24 (line 285)
          │   ││    │                                                              ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   2.14%  │   ││    │    0x00007fa2b4c37daf:   cmpq		%rdi, %rbp
  20.00%  │╭  ││    │    0x00007fa2b4c37db2:   jge		0x7fa2b4c37dd7      ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
          ││  ││    │                                                              ; - java.lang.Math::max@11 (line 2038)
          ││  ││    │                                                              ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
          ││  ││    │                                                              ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
          ││  ││↗   │    0x00007fa2b4c37db4:   imulq		$0xb, 0x18(%r14, %r8, 8), %rdx
          ││  │││   │                                                              ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          ││  │││   │                                                              ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@24 (line 285)
          ││  │││   │                                                              ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   4.03%  ││  │││   │    0x00007fa2b4c37dba:   cmpq		%rdx, %rdi
  17.47%  ││╭ │││   │    0x00007fa2b4c37dbd:   jge		0x7fa2b4c37ddc      ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
          │││ │││   │                                                              ; - java.lang.Math::max@11 (line 2038)
          │││ │││   │                                                              ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
          │││ │││   │                                                              ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
          │││ │││↗  │    0x00007fa2b4c37dbf:   imulq		$0xb, 0x20(%r14, %r8, 8), %rdi
          │││ ││││  │                                                              ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │││ ││││  │                                                              ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@24 (line 285)
          │││ ││││  │                                                              ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
  11.18%  │││ ││││  │    0x00007fa2b4c37dc5:   cmpq		%rdi, %rdx
  18.89%  │││╭││││  │    0x00007fa2b4c37dc8:   jge		0x7fa2b4c37de1      ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
          ││││││││  │                                                              ; - java.lang.Math::max@11 (line 2038)
          ││││││││  │                                                              ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
          ││││││││  │                                                              ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
          ││││││││↗ │    0x00007fa2b4c37dca:   imulq		$0xb, 0x28(%r14, %r8, 8), %rbp
          │││││││││ │                                                              ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          │││││││││ │                                                              ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@24 (line 285)
          │││││││││ │                                                              ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   7.13%  │││││││││ │    0x00007fa2b4c37dd0:   cmpq		%rbp, %rdi
  17.30%  ││││╰││││ │    0x00007fa2b4c37dd3:   jl		0x7fa2b4c37da0      ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          ││││ ││││ │                                                              ; - java.lang.Math::max@3 (line 2038)
          ││││ ││││ │                                                              ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
          ││││ ││││ │                                                              ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
          ││││ ╰│││ │    0x00007fa2b4c37dd5:   jmp		0x7fa2b4c37d94
          │↘││  │││ │    0x00007fa2b4c37dd7:   movq		%rbp, %rdi
          │ ││  ╰││ │    0x00007fa2b4c37dda:   jmp		0x7fa2b4c37db4
          │ ↘│   ││ │    0x00007fa2b4c37ddc:   movq		%rdi, %rdx
          │  │   ╰│ │    0x00007fa2b4c37ddf:   jmp		0x7fa2b4c37dbf
          │  ↘    │ │    0x00007fa2b4c37de1:   movq		%rdx, %rdi
          │       ╰ │    0x00007fa2b4c37de4:   jmp		0x7fa2b4c37dca
          ↘         │    0x00007fa2b4c37de6:   movq		0x30(%r15), %r11    ; ImmutableOopMap {r9=Oop rcx=Oop rbx=Oop r14=Oop xmm0=Oop xmm1=Oop }
                    │                                                              ;*goto {reexecute=1 rethrow=0 return_oop=0}
                    │                                                              ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                    │                                                              ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   0.04%            │    0x00007fa2b4c37dea:   testl		%eax, (%r11)        ;*goto {reexecute=0 rethrow=0 return_oop=0}
                    │                                                              ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                    │                                                              ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
                    │                                                              ;   {poll}
   0.11%            │    0x00007fa2b4c37ded:   cmpl		%r10d, %r8d
                   ╭│    0x00007fa2b4c37df0:   jge		0x7fa2b4c37e3f
                   ││    0x00007fa2b4c37df2:   vmovq		%xmm0, %rdx
                   ││    0x00007fa2b4c37df7:   vmovq		%xmm1, %rdi
                   ││    0x00007fa2b4c37dfc:   movl		%r10d, %r11d
                   ││    0x00007fa2b4c37dff:   subl		%r8d, %r11d
                   ││    0x00007fa2b4c37e02:   cmpl		%r8d, %r10d
   0.02%           ││    0x00007fa2b4c37e05:   cmovll		%esi, %r11d
   0.25%           ││    0x00007fa2b4c37e09:   cmpl		$0xfa0, %r11d
   0.14%           ││    0x00007fa2b4c37e10:   cmoval		%eax, %r11d
   0.11%           ││    0x00007fa2b4c37e14:   addl		%r8d, %r11d
   0.02%           ││    0x00007fa2b4c37e17:   vmovq		%rdx, %xmm0
                   ││    0x00007fa2b4c37e1c:   vmovq		%rdi, %xmm1
                   │╰    0x00007fa2b4c37e21:   jmp		0x7fa2b4c37da9
                   │ ↗   0x00007fa2b4c37e23:   movq		%r10, %rbp          ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
                   │ │                                                             ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
                   │ │                                                             ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
                   │ │↗  0x00007fa2b4c37e26:   imulq		$0xb, 0x10(%r14, %r8, 8), %r10
                   │ ││                                                            ;*lmul {reexecute=0 rethrow=0 return_oop=0}
                   │ ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@24 (line 285)
                   │ ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
   0.10%           │ ││  0x00007fa2b4c37e2c:   cmpq		%r10, %rbp
   0.14%           │ ││  0x00007fa2b4c37e2f:   jge		0x7fa2b4c37ee6      ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
                   │ ││                                                            ; - java.lang.Math::max@11 (line 2038)
                   │ ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
                   │ ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
                   │ ││  0x00007fa2b4c37e35:   incl		%r8d                ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                   │ ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
                   │ ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
                   │ ││  0x00007fa2b4c37e38:   cmpl		%r13d, %r8d
   0.01%           │ ╰│  0x00007fa2b4c37e3b:   jl		0x7fa2b4c37e23
                   │  │  0x00007fa2b4c37e3d:   jmp		0x7fa2b4c37e51
                   ↘  │  0x00007fa2b4c37e3f:   vmovq		%xmm0, %rdx
                      │  0x00007fa2b4c37e44:   vmovq		%xmm1, %rdi
                      │  0x00007fa2b4c37e49:   cmpl		%r13d, %r8d
                      ╰  0x00007fa2b4c37e4c:   jl		0x7fa2b4c37e26
                         0x00007fa2b4c37e4e:   movq		%rbp, %r10          ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                                   ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                                   ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 124)
                         0x00007fa2b4c37e51:   vmovq		%xmm2, %rbp         ;*invokestatic consumeCompiler {reexecute=0 rethrow=0 return_oop=0}
                                                                                   ; - org.openjdk.jmh.infra.Blackhole::consume@7 (line 401)
....................................................................................................
  99.19%  <total for region 1>
#+end_src
***** longReductionSimpleMax
#+begin_src asm
....[Hottest Region 1]..............................................................................
c2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub, version 5, compile id 1252

                0x00007f52ccc38ec9:   jmp		0x7f52ccc38fec
            ↗   0x00007f52ccc38ece:   movq		%rdi, %rbp
            │   0x00007f52ccc38ed1:   nopl		(%rax, %rax)
            │   0x00007f52ccc38ed9:   nopl		(%rax)              ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
            │                                                             ; - java.lang.Math::max@11 (line 2038)
            │                                                             ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
            │                                                             ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
           ↗│   0x00007f52ccc38ee0:   addl		$8, %r8d            ;*iinc {reexecute=0 rethrow=0 return_oop=0}
           ││                                                             ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@30 (line 294)
           ││                                                             ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
   0.58%   ││   0x00007f52ccc38ee4:   cmpl		%r11d, %r8d
   0.54%   ││   0x00007f52ccc38ee7:   jge		0x7f52ccc38f5e      ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
           ││                                                             ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@14 (line 295)
           ││                                                             ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
           ││   0x00007f52ccc38ee9:   movq		0x10(%r14, %r8, 8), %rdi;*laload {reexecute=0 rethrow=0 return_oop=0}
           ││                                                             ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
           ││                                                             ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
  19.72%   ││   0x00007f52ccc38eee:   cmpq		%rdi, %rbp
          ╭││   0x00007f52ccc38ef1:   jge		0x7f52ccc38f3b      ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
          │││                                                             ; - java.lang.Math::max@11 (line 2038)
          │││                                                             ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          │││                                                             ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
          │││↗  0x00007f52ccc38ef3:   movq		0x18(%r14, %r8, 8), %rdx;*laload {reexecute=0 rethrow=0 return_oop=0}
          ││││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
          ││││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
   9.82%  ││││  0x00007f52ccc38ef8:   cmpq		%rdx, %rdi
   0.19%  ││││  0x00007f52ccc38efb:   jge		0x7f52ccc38f40      ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
          ││││                                                            ; - java.lang.Math::max@11 (line 2038)
          ││││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          ││││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
          ││││  0x00007f52ccc38efd:   movq		0x20(%r14, %r8, 8), %rdi;*laload {reexecute=0 rethrow=0 return_oop=0}
          ││││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
          ││││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
  14.10%  ││││  0x00007f52ccc38f02:   cmpq		%rdi, %rdx
   0.02%  ││││  0x00007f52ccc38f05:   jge		0x7f52ccc38f45      ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
          ││││                                                            ; - java.lang.Math::max@11 (line 2038)
          ││││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          ││││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
          ││││  0x00007f52ccc38f07:   movq		0x28(%r14, %r8, 8), %rdx;*laload {reexecute=0 rethrow=0 return_oop=0}
          ││││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
          ││││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
   4.00%  ││││  0x00007f52ccc38f0c:   cmpq		%rdx, %rdi
   0.09%  ││││  0x00007f52ccc38f0f:   jge		0x7f52ccc38f4a      ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
          ││││                                                            ; - java.lang.Math::max@11 (line 2038)
          ││││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          ││││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
          ││││  0x00007f52ccc38f11:   movq		0x30(%r14, %r8, 8), %rdi;*laload {reexecute=0 rethrow=0 return_oop=0}
          ││││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
          ││││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
  18.70%  ││││  0x00007f52ccc38f16:   cmpq		%rdi, %rdx
          ││││  0x00007f52ccc38f19:   jge		0x7f52ccc38f4f      ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
          ││││                                                            ; - java.lang.Math::max@11 (line 2038)
          ││││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          ││││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
          ││││  0x00007f52ccc38f1b:   movq		0x38(%r14, %r8, 8), %rdx;*laload {reexecute=0 rethrow=0 return_oop=0}
          ││││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
          ││││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
   5.47%  ││││  0x00007f52ccc38f20:   cmpq		%rdx, %rdi
   0.01%  ││││  0x00007f52ccc38f23:   jge		0x7f52ccc38f54      ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
          ││││                                                            ; - java.lang.Math::max@11 (line 2038)
          ││││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          ││││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
          ││││  0x00007f52ccc38f25:   movq		0x40(%r14, %r8, 8), %rdi;*laload {reexecute=0 rethrow=0 return_oop=0}
          ││││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
          ││││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
  18.22%  ││││  0x00007f52ccc38f2a:   cmpq		%rdi, %rdx
          ││││  0x00007f52ccc38f2d:   jge		0x7f52ccc38f59      ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
          ││││                                                            ; - java.lang.Math::max@11 (line 2038)
          ││││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          ││││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
          ││││  0x00007f52ccc38f2f:   movq		0x48(%r14, %r8, 8), %rbp;*laload {reexecute=0 rethrow=0 return_oop=0}
          ││││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
          ││││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
   6.75%  ││││  0x00007f52ccc38f34:   cmpq		%rbp, %rdi
          │╰││  0x00007f52ccc38f37:   jl		0x7f52ccc38ee0      ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          │ ││                                                            ; - java.lang.Math::max@3 (line 2038)
          │ ││                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          │ ││                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 124)
          │ ╰│  0x00007f52ccc38f39:   jmp		0x7f52ccc38ece
          ↘  │  0x00007f52ccc38f3b:   movq		%rbp, %rdi
             ╰  0x00007f52ccc38f3e:   jmp		0x7f52ccc38ef3
                0x00007f52ccc38f40:   movq		%rdi, %rdx
....................................................................................................
  98.21%  <total for region 1>
#+end_src
* 1.4.25
** LoopMaxUnroll=8
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt     Score     Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  2150.509 ? 372.854  ops/ms # branch never
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  2620.289 ?  64.740  ops/ms # disable _maxL
MinMaxVector.longReductionSimpleMax              100    2048  thrpt    8  3423.275 ?  90.313  ops/ms # branch never
MinMaxVector.longReductionSimpleMax              100    2048  thrpt    8  3559.058 ?  53.108  ops/ms # disable _maxL
#+end_src
Branch never:
#+begin_src asm
  10.44%          ?  0x0000000116f242b0:   ldp		x26, x27, [x12, #0x40]
   0.12%          ?  0x0000000116f242b4:   mov		x12, x6
   0.18%          ?  0x0000000116f242b8:   cmp		x6, x7
   0.34%  ?       ?  0x0000000116f242bc:   b.ge		#0x116f242c4
   9.08%  ?       ?  0x0000000116f242c0:   mov		x12, x7
   1.04%  ?       ?  0x0000000116f242c4:   mov		x6, x12
   0.45%          ?  0x0000000116f242c8:   cmp		x12, x21
   0.18%   ?      ?  0x0000000116f242cc:   b.ge		#0x116f242d4
   8.86%   ?      ?  0x0000000116f242d0:   mov		x6, x21
   1.42%   ?      ?  0x0000000116f242d4:   mov		x12, x6
   0.33%          ?  0x0000000116f242d8:   cmp		x6, x22
   0.26%    ?     ?  0x0000000116f242dc:   b.ge		#0x116f242e4
   9.42%    ?     ?  0x0000000116f242e0:   mov		x12, x22
   1.32%    ?     ?  0x0000000116f242e4:   mov		x6, x12
   0.28%          ?  0x0000000116f242e8:   cmp		x12, x23
   0.15%     ?    ?  0x0000000116f242ec:   b.ge		#0x116f242f4
  10.26%     ?    ?  0x0000000116f242f0:   mov		x6, x23
   1.09%     ?    ?  0x0000000116f242f4:   mov		x12, x6
   0.08%          ?  0x0000000116f242f8:   cmp		x6, x24
   0.04%      ?   ?  0x0000000116f242fc:   b.ge		#0x116f24304
   9.19%      ?   ?  0x0000000116f24300:   mov		x12, x24
   1.64%      ?   ?  0x0000000116f24304:   mov		x6, x12
   0.03%          ?  0x0000000116f24308:   cmp		x12, x25
               ?  ?  0x0000000116f2430c:   b.ge		#0x116f24314
   9.45%       ?  ?  0x0000000116f24310:   mov		x6, x25
   1.51%       ?  ?  0x0000000116f24314:   mov		x12, x6
   0.10%          ?  0x0000000116f24318:   cmp		x6, x26
   0.18%        ? ?  0x0000000116f2431c:   b.ge		#0x116f24324
   8.92%        ? ?  0x0000000116f24320:   mov		x12, x26
   0.97%        ? ?  0x0000000116f24324:   add		w15, w15, #8        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                  ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@30 (line 294)
                  ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.35%          ?  0x0000000116f24328:   mov		x6, x12
   0.26%          ?  0x0000000116f2432c:   cmp		x12, x27
   0.24%         ??  0x0000000116f24330:   b.ge		#0x116f24338
   9.34%         ??  0x0000000116f24334:   mov		x6, x27             ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
                 ??                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
                 ??                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
#+end_src
Disable intrinsic:
#+begin_src bash
              ?  0x0000000112e37770:   add		x11, x6, w12, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
              ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
              ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
              ?  0x0000000112e37774:   ldp		x21, x22, [x11, #0x10]
              ?  0x0000000112e37778:   ldr		x23, [x11, #0x20]
              ?  0x0000000112e3777c:   mul		x21, x21, x16
  29.38%      ?  0x0000000112e37780:   ldr		x11, [x11, #0x28]
              ?  0x0000000112e37784:   mul		x22, x22, x16
              ?  0x0000000112e37788:   mul		x23, x23, x16
              ?  0x0000000112e3778c:   mov		x24, x21
   2.49%      ?  0x0000000112e37790:   cmp		x21, x7
          ?   ?  0x0000000112e37794:   b.ge		#0x112e3779c
          ?   ?  0x0000000112e37798:   mov		x24, x7
  11.37%  ?   ?  0x0000000112e3779c:   mul		x11, x11, x16
              ?  0x0000000112e377a0:   mov		x7, x22
              ?  0x0000000112e377a4:   cmp		x22, x24
           ?  ?  0x0000000112e377a8:   b.ge		#0x112e377b0
           ?  ?  0x0000000112e377ac:   mov		x7, x24
  19.38%   ?  ?  0x0000000112e377b0:   mov		x21, x23
   3.11%      ?  0x0000000112e377b4:   cmp		x23, x7
   0.44%    ? ?  0x0000000112e377b8:   b.ge		#0x112e377c0
            ? ?  0x0000000112e377bc:   mov		x21, x7
  10.61%    ? ?  0x0000000112e377c0:   add		w12, w12, #4        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
              ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
              ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
              ?  0x0000000112e377c4:   mov		x7, x11
              ?  0x0000000112e377c8:   cmp		x11, x21
             ??  0x0000000112e377cc:   b.ge		#0x112e377d4
             ??  0x0000000112e377d0:   mov		x7, x21             ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
             ??                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
             ??                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
  21.80%     ??  0x0000000112e377d4:   cmp		w12, w10
              ?  0x0000000112e377d8:   b.lt		#0x112e37770        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.67%         0x0000000112e377dc:   ldr		x21, [x28, #0x30]   ; ImmutableOopMap {c_rarg0=Oop c_rarg2=Oop c_rarg3=Oop c_rarg5=Oop c_rarg4=Derived_oop_c_rarg5 c_rarg6=Oop r19=Oop }
                                                                           ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                           ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.11%         0x0000000112e377e0:   ldr		wzr, [x21]          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                                                                           ;   {poll}
                 0x0000000112e377e4:   cmp		w12, w17
                 0x0000000112e377e8:   b.lt		#0x112e37750
                 0x0000000112e377ec:   cmp		w12, w13
                 0x0000000112e377f0:   b.lt		#0x112e376a8
#+end_src
** Observations and TraceLoopOpts
Performance looks to be on par between disabling intrinsic and branch never.
However, the assembly looks different in simple.
Branch never:
#+begin_src bash
   5.80%                  ?      0x0000000113951b64:   ldr		x15, [x27, #0x10]
   0.05%                  ?      0x0000000113951b68:   mov		x29, x25
   0.04%                  ?      0x0000000113951b6c:   cmp		x25, x15
   0.13%  ?               ?      0x0000000113951b70:   b.ge		#0x113951b78
          ?               ?      0x0000000113951b74:   mov		x29, x15
   5.50%  ?               ?      0x0000000113951b78:   ldr		x16, [x27, #0x18]
   0.14%                  ?      0x0000000113951b7c:   mov		x15, x29
   0.19%                  ?      0x0000000113951b80:   cmp		x29, x16
   0.15%   ?              ?      0x0000000113951b84:   b.ge		#0x113951b8c
           ?              ?      0x0000000113951b88:   mov		x15, x16
   5.22%   ?              ?      0x0000000113951b8c:   ldr		x17, [x27, #0x20]
   0.07%                  ?      0x0000000113951b90:   mov		x16, x15
   0.03%                  ?      0x0000000113951b94:   cmp		x15, x17
   0.07%    ?             ?      0x0000000113951b98:   b.ge		#0x113951ba0
            ?             ?      0x0000000113951b9c:   mov		x16, x17
   5.39%    ?             ?      0x0000000113951ba0:   ldr		x0, [x27, #0x28]
   0.07%                  ?      0x0000000113951ba4:   mov		x15, x16
   0.16%                  ?      0x0000000113951ba8:   cmp		x16, x0
   0.11%     ?            ?      0x0000000113951bac:   b.ge		#0x113951bb4
             ?            ?      0x0000000113951bb0:   mov		x15, x0
   5.31%     ?            ?      0x0000000113951bb4:   ldr		x1, [x27, #0x30]
   0.04%                  ?      0x0000000113951bb8:   mov		x16, x15
   0.11%                  ?      0x0000000113951bbc:   cmp		x15, x1
   0.03%      ?           ?      0x0000000113951bc0:   b.ge		#0x113951bc8
              ?           ?      0x0000000113951bc4:   mov		x16, x1
   5.33%      ?           ?      0x0000000113951bc8:   ldr		x2, [x27, #0x38]
   0.08%                  ?      0x0000000113951bcc:   mov		x15, x16
   0.17%                  ?      0x0000000113951bd0:   cmp		x16, x2
   0.11%       ?          ?      0x0000000113951bd4:   b.ge		#0x113951bdc
               ?          ?      0x0000000113951bd8:   mov		x15, x2
   5.79%       ?          ?      0x0000000113951bdc:   ldr		x3, [x27, #0x40]
   0.07%                  ?      0x0000000113951be0:   mov		x16, x15
   0.04%                  ?      0x0000000113951be4:   cmp		x15, x3
   0.02%        ?         ?      0x0000000113951be8:   b.ge		#0x113951bf0
                ?         ?      0x0000000113951bec:   mov		x16, x3
   5.32%        ?         ?      0x0000000113951bf0:   ldr		x4, [x27, #0x48]
   0.08%                  ?      0x0000000113951bf4:   mov		x15, x16
   0.07%                  ?      0x0000000113951bf8:   cmp		x16, x4
   0.07%         ?        ?      0x0000000113951bfc:   b.ge		#0x113951c04
   0.00%         ?        ?      0x0000000113951c00:   mov		x15, x4
   5.77%         ?        ?      0x0000000113951c04:   ldr		x5, [x27, #0x50]
   0.08%                  ?      0x0000000113951c08:   mov		x16, x15
   0.04%                  ?      0x0000000113951c0c:   cmp		x15, x5
   0.04%          ?       ?      0x0000000113951c10:   b.ge		#0x113951c18
                  ?       ?      0x0000000113951c14:   mov		x16, x5
   5.42%          ?       ?      0x0000000113951c18:   ldr		x6, [x27, #0x58]
   0.09%                  ?      0x0000000113951c1c:   mov		x15, x16
   0.15%                  ?      0x0000000113951c20:   cmp		x16, x6
   0.08%           ?      ?      0x0000000113951c24:   b.ge		#0x113951c2c
                   ?      ?      0x0000000113951c28:   mov		x15, x6
   5.49%           ?      ?      0x0000000113951c2c:   ldr		x7, [x27, #0x60]
   0.11%                  ?      0x0000000113951c30:   mov		x16, x15
   0.06%                  ?      0x0000000113951c34:   cmp		x15, x7
   0.06%            ?     ?      0x0000000113951c38:   b.ge		#0x113951c40
                    ?     ?      0x0000000113951c3c:   mov		x16, x7
   5.89%            ?     ?      0x0000000113951c40:   ldr		x20, [x27, #0x68]
   0.07%                  ?      0x0000000113951c44:   mov		x15, x16
   0.17%                  ?      0x0000000113951c48:   cmp		x16, x20
   0.02%             ?    ?      0x0000000113951c4c:   b.ge		#0x113951c54
                     ?    ?      0x0000000113951c50:   mov		x15, x20
   5.52%             ?    ?      0x0000000113951c54:   ldr		x22, [x27, #0x70]
   0.07%                  ?      0x0000000113951c58:   mov		x16, x15
   0.10%                  ?      0x0000000113951c5c:   cmp		x15, x22
   0.01%              ?   ?      0x0000000113951c60:   b.ge		#0x113951c68
                      ?   ?      0x0000000113951c64:   mov		x16, x22
   5.53%              ?   ?      0x0000000113951c68:   ldr		x23, [x27, #0x78]
   0.06%                  ?      0x0000000113951c6c:   mov		x15, x16
   0.14%                  ?      0x0000000113951c70:   cmp		x16, x23
   0.12%               ?  ?      0x0000000113951c74:   b.ge		#0x113951c7c
                       ?  ?      0x0000000113951c78:   mov		x15, x23
   5.58%               ?  ?      0x0000000113951c7c:   ldr		x26, [x27, #0x80]
   0.13%                  ?      0x0000000113951c80:   mov		x16, x15
   0.07%                  ?      0x0000000113951c84:   cmp		x15, x26
   0.14%                ? ?      0x0000000113951c88:   b.ge		#0x113951c90
                        ? ?      0x0000000113951c8c:   mov		x16, x26
   5.28%                ? ?      0x0000000113951c90:   ldr		x27, [x27, #0x88]
   0.04%                  ?      0x0000000113951c94:   add		w12, w12, #0x10     ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                          ?                                                                ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@30 (line 294)
                          ?                                                                ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.14%                  ?      0x0000000113951c98:   mov		x25, x16
   0.03%                  ?      0x0000000113951c9c:   cmp		x16, x27
   0.12%                 ??      0x0000000113951ca0:   b.ge		#0x113951ca8
   4.94%                 ??      0x0000000113951ca4:   mov		x25, x27            ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
                         ??                                                                ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
                         ??                                                                ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
#+end_src
Disable intrinsic:
#+begin_src bash
   1.07%           ?         0x000000012fae5dcc:   mov		x7, x13
   9.59%          ??         0x000000012fae5dd0:   cmp		x7, x23
   0.16%  ?       ??         0x000000012fae5dd4:   b.ge		#0x12fae5e3c        ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
          ?       ??                                                                   ; - java.lang.Math::max@11 (line 2038)
          ?       ??                                                                   ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          ?       ??                                                                   ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
  11.06%  ?       ???        0x000000012fae5dd8:   add		w11, w11, #8        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
          ?       ???                                                                  ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@30 (line 294)
          ?       ???                                                                  ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.05%  ?       ???        0x000000012fae5ddc:   cmp		w11, w14
   0.00%  ??      ???        0x000000012fae5de0:   b.ge		#0x12fae5e74        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
          ??      ???                                                                  ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
          ??      ???                                                                  ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
          ??      ???        0x000000012fae5de4:   mov		x25, x23            ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
          ??      ???                                                                  ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@14 (line 295)
          ??      ???                                                                  ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
          ??      ???        0x000000012fae5de8:   add		x13, x4, w11, sxtw #3
          ??      ???        0x000000012fae5dec:   ldr		x23, [x13, #0x48]
   0.00%  ??      ???        0x000000012fae5df0:   ldp		x5, x6, [x13, #0x10]
   0.03%  ??      ???        0x000000012fae5df4:   ldr		x7, [x13, #0x40]
   0.01%  ??      ???        0x000000012fae5df8:   ldp		x21, x22, [x13, #0x20]
  11.10%  ??      ???        0x000000012fae5dfc:   ldp		x24, x13, [x13, #0x30];*laload {reexecute=0 rethrow=0 return_oop=0}
          ??      ???                                                                  ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
          ??      ???                                                                  ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
          ??      ???        0x000000012fae5e00:   cmp		x25, x5
   0.01%  ???     ???        0x000000012fae5e04:   b.ge		#0x12fae5e6c
  10.83%  ???     ???     ?  0x000000012fae5e08:   cmp		x5, x6
   0.14%  ????    ???     ?  0x000000012fae5e0c:   b.ge		#0x12fae5e44
  10.79%  ????    ????    ?  0x000000012fae5e10:   cmp		x6, x21
   0.27%  ?????   ????    ?  0x000000012fae5e14:   b.ge		#0x12fae5e64
  10.53%  ?????   ????   ??  0x000000012fae5e18:   cmp		x21, x22
   0.33%  ??????  ????   ??  0x000000012fae5e1c:   b.ge		#0x12fae5e4c
  10.63%  ??????  ?????  ??  0x000000012fae5e20:   cmp		x22, x24
   0.23%  ??????? ?????  ??  0x000000012fae5e24:   b.ge		#0x12fae5e54
  10.74%  ??????? ?????? ??  0x000000012fae5e28:   cmp		x24, x13
   0.08%  ?????????????? ??  0x000000012fae5e2c:   b.ge		#0x12fae5e5c        ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
          ?????????????? ??                                                            ; - java.lang.Math::max@11 (line 2038)
          ?????????????? ??                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          ?????????????? ??                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
  11.29%  ?????????????????  0x000000012fae5e30:   cmp		x13, x7
          ?????????????????  0x000000012fae5e34:   b.lt		#0x12fae5dd0        ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          ???????? ????????                                                            ; - java.lang.Math::max@3 (line 2038)
          ???????? ????????                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          ???????? ????????                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
#+end_src
Run with TraceLoopOpts to see if the difference is confirmed.
Branch never:
#+begin_src bash
Unroll 16         Loop: N536/N165  limit_check counted [int,int),+8 (2072 iters)  main has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N297/N302  limit_check profile_predicated predicated counted [0,int),+1 (4 iters)  pre
  Loop: N181/N180  limit_check sfpts={ 183 }
    Loop: N641/N165  limit_check counted [int,int),+16 (2072 iters)  main has_sfpt strip_mined
  Loop: N251/N256  limit_check counted [int,int),+1 (4 iters)  post
#+end_src
Disable intrinsic:
#+begin_src bash
Unroll 8         Loop: N1177/N246  limit_check counted [int,int),+4 (3475 iters)  main rc  has_sfpt strip_mined
Unroll 8           Loop: N1232/N538  limit_check counted [int,int),+4 (3475 iters)  main rc  has_sfpt strip_mined
Loop: N0/N0  has_sfpt
  Loop: N818/N827  limit_check profile_predicated predicated counted [0,int),+1 (4 iters)  pre rc
  Loop: N624/N623  limit_check sfpts={ 626 }
    Loop: N1349/N246  limit_check counted [int,int),+8 (3475 iters)  main rc  has_sfpt strip_mined
  Loop: N766/N775  limit_check counted [int,int),+1 (4 iters)  post rc
  Loop: N615/N589  limit_check profile_predicated predicated sfpts={ 580 }
    Loop: N996/N1005  limit_check profile_predicated predicated counted [0,int),+1 (4 iters)  pre rc
    Loop: N635/N634  limit_check sfpts={ 637 }
      Loop: N1428/N538  limit_check counted [int,int),+8 (3475 iters)  main rc  has_sfpt strip_mined
    Loop: N944/N953  limit_check counted [int,int),+1 (4 iters)  post rc
#+end_src
Chat with Roland.
  He suggested limiting unrolling to 8 to make the comparison fair.
** Comparison
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt     Score     Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  2520.310 ? 183.514  ops/ms # disable intrinsic maxL
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  2321.742 ? 289.782  ops/ms # branch never
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8   914.140 ?  30.055  ops/ms # branch always
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  1023.075 ?  73.846  ops/ms # cmov
MinMaxVector.longReductionSimpleMax              100    2048  thrpt    8  3525.033 ? 101.415  ops/ms # disable intrinsic maxL
MinMaxVector.longReductionSimpleMax              100    2048  thrpt    8  3637.567 ?  84.313  ops/ms # branch never
MinMaxVector.longReductionSimpleMax              100    2048  thrpt    8   928.003 ?  23.162  ops/ms # branch always
MinMaxVector.longReductionSimpleMax              100    2048  thrpt    8  1105.859 ?   5.286  ops/ms # cmov
#+end_src
** Disable Intrinsic
*** release
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt     Score     Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  2520.310 ? 183.514  ops/ms
MinMaxVector.longReductionSimpleMax              100    2048  thrpt    8  3525.033 ? 101.415  ops/ms
#+end_src
*** profiler
**** longReductionMultiplyMax
#+begin_src bash
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 542

                     0x00000001138e05c4:   str		xzr, [x19, #0x20]   ;*putfield realTime {reexecute=0 rethrow=0 return_oop=0}
                                                                               ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@48 (line 109)
                     0x00000001138e05c8:   str		x0, [x19, #0x30]    ;*putfield stopTime {reexecute=0 rethrow=0 return_oop=0}
                                                                               ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@42 (line 108)
                     0x00000001138e05cc:   ldp		x29, x30, [sp, #0x50]
                     0x00000001138e05d0:   add		sp, sp, #0x60
                     0x00000001138e05d4:   ldr		x8, [x28, #0x28]    ;   {poll_return}
                     0x00000001138e05d8:   cmp		sp, x8
                     0x00000001138e05dc:   b.hi		#0x1138e0828
                     0x00000001138e05e0:   ret
   3.15%       ?     0x00000001138e05e4:   mov		x12, x7
               ?     0x00000001138e05e8:   nop
   0.02%       ?     0x00000001138e05ec:   nop
  18.92%      ??     0x00000001138e05f0:   cmp		x12, x21
   0.09%  ?   ??     0x00000001138e05f4:   b.ge		#0x1138e0654
  16.45%  ?   ??  ?  0x00000001138e05f8:   cmp		x21, x6
   0.02%  ??  ??  ?  0x00000001138e05fc:   b.ge		#0x1138e0644        ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
          ??  ??  ?                                                            ; - java.lang.Math::max@11 (line 2038)
          ??  ??  ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
          ??  ??  ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
  22.22%  ??  ??? ?  0x00000001138e0600:   add		w1, w1, #4          ;*iinc {reexecute=0 rethrow=0 return_oop=0}
          ??  ??? ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
          ??  ??? ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.25%  ??  ??? ?  0x00000001138e0604:   cmp		w1, w11
   0.07%  ??? ??? ?  0x00000001138e0608:   b.ge		#0x1138e065c        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
          ??? ??? ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
          ??? ??? ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
          ??? ??? ?  0x00000001138e060c:   mov		x22, x6             ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
          ??? ??? ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
          ??? ??? ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
          ??? ??? ?  0x00000001138e0610:   add		x12, x5, w1, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
          ??? ??? ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
          ??? ??? ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.00%  ??? ??? ?  0x00000001138e0614:   ldr		x7, [x12, #0x10]
          ??? ??? ?  0x00000001138e0618:   ldp		x21, x6, [x12, #0x20]
  20.24%  ??? ??? ?  0x00000001138e061c:   ldr		x12, [x12, #0x18]
   0.06%  ??? ??? ?  0x00000001138e0620:   mul		x7, x7, x15
   0.22%  ??? ??? ?  0x00000001138e0624:   mul		x6, x6, x15
          ??? ??? ?  0x00000001138e0628:   mul		x12, x12, x15
          ??? ??? ?  0x00000001138e062c:   mul		x21, x21, x15       ;*lmul {reexecute=0 rethrow=0 return_oop=0}
          ??? ??? ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@24 (line 285)
          ??? ??? ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.07%  ??? ??? ?  0x00000001138e0630:   cmp		x22, x7
          ??????? ?  0x00000001138e0634:   b.ge		#0x1138e064c        ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
          ??????? ?                                                            ; - java.lang.Math::max@11 (line 2038)
          ??????? ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
          ??????? ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
  16.85%  ?????????  0x00000001138e0638:   cmp		x7, x12
          ?????????  0x00000001138e063c:   b.lt		#0x1138e05f0        ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          ???? ????                                                            ; - java.lang.Math::max@3 (line 2038)
          ???? ????                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
          ???? ????                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.01%  ???? ????  0x00000001138e0640:   b		#0x1138e05e4
   0.10%  ????  ???  0x00000001138e0644:   mov		x6, x21
          ? ??  ???  0x00000001138e0648:   b		#0x1138e0600
   0.11%  ? ??   ??  0x00000001138e064c:   mov		x7, x22
          ? ?    ??  0x00000001138e0650:   b		#0x1138e0638
   0.30%  ? ?     ?  0x00000001138e0654:   mov		x21, x12
            ?     ?  0x00000001138e0658:   b		#0x1138e05f8
            ?        0x00000001138e065c:   ldr		x7, [x28, #0x30]    ; ImmutableOopMap {r13=Oop c_rarg0=Oop c_rarg2=Oop c_rarg4=Oop c_rarg3=Derived_oop_c_rarg4 c_rarg5=Oop r19=Oop }
                                                                               ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                               ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                               ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.04%             0x00000001138e0660:   ldr		wzr, [x7]           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                               ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                               ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                                                                               ;   {poll}
                     0x00000001138e0664:   cmp		w1, w17
                     0x00000001138e0668:   b.ge		#0x1138e06bc
                     0x00000001138e066c:   mov		x22, x6
                     0x00000001138e0670:   cmp		w17, w1
....................................................................................................
#+end_src
**** longReductionSimpleMax
#+begin_src bash
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub, version 5, compile id 545

                             0x000000012fae5dac:   str		xzr, [x19, #0x20]   ;*putfield realTime {reexecute=0 rethrow=0 return_oop=0}
                                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@48 (line 109)
                             0x000000012fae5db0:   str		x0, [x19, #0x30]    ;*putfield stopTime {reexecute=0 rethrow=0 return_oop=0}
                                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@42 (line 108)
                             0x000000012fae5db4:   ldp		x29, x30, [sp, #0x50]
                             0x000000012fae5db8:   add		sp, sp, #0x60
                             0x000000012fae5dbc:   ldr		x8, [x28, #0x28]    ;   {poll_return}
                             0x000000012fae5dc0:   cmp		sp, x8
                             0x000000012fae5dc4:   b.hi		#0x12fae603c
                             0x000000012fae5dc8:   ret
   1.07%           ?         0x000000012fae5dcc:   mov		x7, x13
   9.59%          ??         0x000000012fae5dd0:   cmp		x7, x23
   0.16%  ?       ??         0x000000012fae5dd4:   b.ge		#0x12fae5e3c        ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
          ?       ??                                                                   ; - java.lang.Math::max@11 (line 2038)
          ?       ??                                                                   ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          ?       ??                                                                   ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
  11.06%  ?       ???        0x000000012fae5dd8:   add		w11, w11, #8        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
          ?       ???                                                                  ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@30 (line 294)
          ?       ???                                                                  ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.05%  ?       ???        0x000000012fae5ddc:   cmp		w11, w14
   0.00%  ??      ???        0x000000012fae5de0:   b.ge		#0x12fae5e74        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
          ??      ???                                                                  ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
          ??      ???                                                                  ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
          ??      ???        0x000000012fae5de4:   mov		x25, x23            ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
          ??      ???                                                                  ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@14 (line 295)
          ??      ???                                                                  ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
          ??      ???        0x000000012fae5de8:   add		x13, x4, w11, sxtw #3
          ??      ???        0x000000012fae5dec:   ldr		x23, [x13, #0x48]
   0.00%  ??      ???        0x000000012fae5df0:   ldp		x5, x6, [x13, #0x10]
   0.03%  ??      ???        0x000000012fae5df4:   ldr		x7, [x13, #0x40]
   0.01%  ??      ???        0x000000012fae5df8:   ldp		x21, x22, [x13, #0x20]
  11.10%  ??      ???        0x000000012fae5dfc:   ldp		x24, x13, [x13, #0x30];*laload {reexecute=0 rethrow=0 return_oop=0}
          ??      ???                                                                  ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
          ??      ???                                                                  ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
          ??      ???        0x000000012fae5e00:   cmp		x25, x5
   0.01%  ???     ???        0x000000012fae5e04:   b.ge		#0x12fae5e6c
  10.83%  ???     ???     ?  0x000000012fae5e08:   cmp		x5, x6
   0.14%  ????    ???     ?  0x000000012fae5e0c:   b.ge		#0x12fae5e44
  10.79%  ????    ????    ?  0x000000012fae5e10:   cmp		x6, x21
   0.27%  ?????   ????    ?  0x000000012fae5e14:   b.ge		#0x12fae5e64
  10.53%  ?????   ????   ??  0x000000012fae5e18:   cmp		x21, x22
   0.33%  ??????  ????   ??  0x000000012fae5e1c:   b.ge		#0x12fae5e4c
  10.63%  ??????  ?????  ??  0x000000012fae5e20:   cmp		x22, x24
   0.23%  ??????? ?????  ??  0x000000012fae5e24:   b.ge		#0x12fae5e54
  10.74%  ??????? ?????? ??  0x000000012fae5e28:   cmp		x24, x13
   0.08%  ?????????????? ??  0x000000012fae5e2c:   b.ge		#0x12fae5e5c        ;*lreturn {reexecute=0 rethrow=0 return_oop=0}
          ?????????????? ??                                                            ; - java.lang.Math::max@11 (line 2038)
          ?????????????? ??                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          ?????????????? ??                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
  11.29%  ?????????????????  0x000000012fae5e30:   cmp		x13, x7
          ?????????????????  0x000000012fae5e34:   b.lt		#0x12fae5dd0        ;*iflt {reexecute=0 rethrow=0 return_oop=0}
          ???????? ????????                                                            ; - java.lang.Math::max@3 (line 2038)
          ???????? ????????                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          ???????? ????????                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.01%  ???????? ????????  0x000000012fae5e38:   b		#0x12fae5dcc
   0.03%  ????????  ???????  0x000000012fae5e3c:   mov		x23, x7
           ???????  ???????  0x000000012fae5e40:   b		#0x12fae5dd8
           ???????   ??????  0x000000012fae5e44:   mov		x6, x5
           ?? ????   ??????  0x000000012fae5e48:   b		#0x12fae5e10
           ?? ????    ?????  0x000000012fae5e4c:   mov		x22, x21
           ?? ? ??    ?????  0x000000012fae5e50:   b		#0x12fae5e20
   0.01%   ?? ? ??     ????  0x000000012fae5e54:   mov		x24, x22
           ?? ?  ?     ????  0x000000012fae5e58:   b		#0x12fae5e28
           ?? ?  ?      ???  0x000000012fae5e5c:   mov		x13, x24
           ?? ?         ???  0x000000012fae5e60:   b		#0x12fae5e30
   0.00%   ?? ?          ??  0x000000012fae5e64:   mov		x21, x6
           ??            ??  0x000000012fae5e68:   b		#0x12fae5e18
   0.00%   ??             ?  0x000000012fae5e6c:   mov		x5, x25
           ?              ?  0x000000012fae5e70:   b		#0x12fae5e08
           ?                 0x000000012fae5e74:   ldr		x5, [x28, #0x30]    ; ImmutableOopMap {r16=Oop c_rarg0=Oop c_rarg2=Oop c_rarg3=Oop c_rarg1=Derived_oop_c_rarg3 c_rarg4=Oop r19=Oop }
                                                                                       ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                                       ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
                                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                             0x000000012fae5e78:   ldr		wzr, [x5]           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                                       ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
                                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                                                                                       ;   {poll}
                             0x000000012fae5e7c:   cmp		w11, w12
....................................................................................................
#+end_src
** Branch Never
*** release
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt     Score     Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  2321.742 ? 289.782  ops/ms
MinMaxVector.longReductionSimpleMax              100    2048  thrpt    8  3637.567 ?  84.313  ops/ms
#+end_src
*** profiler
**** longReductionMultiplyMax
#+begin_src bash
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 561

                 0x0000000117b6fddc:   cmp		w10, #0xfa0
                 0x0000000117b6fde0:   csel		w11, w14, w10, hi
                 0x0000000117b6fde4:   add		w10, w11, w12
                 0x0000000117b6fde8:   nop
                 0x0000000117b6fdec:   nop		                    ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
              ?  0x0000000117b6fdf0:   add		x11, x6, w12, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
              ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
              ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.03%      ?  0x0000000117b6fdf4:   ldp		x21, x22, [x11, #0x10]
   0.01%      ?  0x0000000117b6fdf8:   ldr		x23, [x11, #0x20]
              ?  0x0000000117b6fdfc:   mul		x21, x21, x16
  27.63%      ?  0x0000000117b6fe00:   ldr		x11, [x11, #0x28]
              ?  0x0000000117b6fe04:   mul		x22, x22, x16
              ?  0x0000000117b6fe08:   mul		x23, x23, x16
              ?  0x0000000117b6fe0c:   mov		x24, x21
   2.30%      ?  0x0000000117b6fe10:   cmp		x21, x7
          ?   ?  0x0000000117b6fe14:   b.ge		#0x117b6fe1c
          ?   ?  0x0000000117b6fe18:   mov		x24, x7
  17.59%  ?   ?  0x0000000117b6fe1c:   mul		x11, x11, x16
              ?  0x0000000117b6fe20:   mov		x7, x22
              ?  0x0000000117b6fe24:   cmp		x22, x24
           ?  ?  0x0000000117b6fe28:   b.ge		#0x117b6fe30
           ?  ?  0x0000000117b6fe2c:   mov		x7, x24
  14.37%   ?  ?  0x0000000117b6fe30:   mov		x21, x23
   0.11%      ?  0x0000000117b6fe34:   cmp		x23, x7
   2.30%    ? ?  0x0000000117b6fe38:   b.ge		#0x117b6fe40
            ? ?  0x0000000117b6fe3c:   mov		x21, x7
  15.95%    ? ?  0x0000000117b6fe40:   add		w12, w12, #4        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
              ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
              ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
              ?  0x0000000117b6fe44:   mov		x7, x11
              ?  0x0000000117b6fe48:   cmp		x11, x21
             ??  0x0000000117b6fe4c:   b.ge		#0x117b6fe54
             ??  0x0000000117b6fe50:   mov		x7, x21             ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
             ??                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
             ??                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
  18.36%     ??  0x0000000117b6fe54:   cmp		w12, w10
              ?  0x0000000117b6fe58:   b.lt		#0x117b6fdf0        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.73%         0x0000000117b6fe5c:   ldr		x21, [x28, #0x30]   ; ImmutableOopMap {c_rarg0=Oop c_rarg2=Oop c_rarg3=Oop c_rarg5=Oop c_rarg4=Derived_oop_c_rarg5 c_rarg6=Oop r19=Oop }
                                                                           ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                           ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.09%         0x0000000117b6fe60:   ldr		wzr, [x21]          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                                                                           ;   {poll}
                 0x0000000117b6fe64:   cmp		w12, w17
                 0x0000000117b6fe68:   b.lt		#0x117b6fdd0
                 0x0000000117b6fe6c:   cmp		w12, w13
                 0x0000000117b6fe70:   b.lt		#0x117b6fd28
....................................................................................................
#+end_src
**** longReductionSimpleMax
#+begin_src bash
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub, version 5, compile id 542

                                 0x0000000113951b4c:   stp		x17, x15, [sp, #0x10]
                                 0x0000000113951b50:   str		x20, [sp, #0x60]
                                 0x0000000113951b54:   nop
                                 0x0000000113951b58:   nop
                                 0x0000000113951b5c:   nop		                    ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@14 (line 295)
                                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                          ?      0x0000000113951b60:   add		x27, x24, w12, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
                          ?                                                                ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
                          ?                                                                ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   5.80%                  ?      0x0000000113951b64:   ldr		x15, [x27, #0x10]
   0.05%                  ?      0x0000000113951b68:   mov		x29, x25
   0.04%                  ?      0x0000000113951b6c:   cmp		x25, x15
   0.13%  ?               ?      0x0000000113951b70:   b.ge		#0x113951b78
          ?               ?      0x0000000113951b74:   mov		x29, x15
   5.50%  ?               ?      0x0000000113951b78:   ldr		x16, [x27, #0x18]
   0.14%                  ?      0x0000000113951b7c:   mov		x15, x29
   0.19%                  ?      0x0000000113951b80:   cmp		x29, x16
   0.15%   ?              ?      0x0000000113951b84:   b.ge		#0x113951b8c
           ?              ?      0x0000000113951b88:   mov		x15, x16
   5.22%   ?              ?      0x0000000113951b8c:   ldr		x17, [x27, #0x20]
   0.07%                  ?      0x0000000113951b90:   mov		x16, x15
   0.03%                  ?      0x0000000113951b94:   cmp		x15, x17
   0.07%    ?             ?      0x0000000113951b98:   b.ge		#0x113951ba0
            ?             ?      0x0000000113951b9c:   mov		x16, x17
   5.39%    ?             ?      0x0000000113951ba0:   ldr		x0, [x27, #0x28]
   0.07%                  ?      0x0000000113951ba4:   mov		x15, x16
   0.16%                  ?      0x0000000113951ba8:   cmp		x16, x0
   0.11%     ?            ?      0x0000000113951bac:   b.ge		#0x113951bb4
             ?            ?      0x0000000113951bb0:   mov		x15, x0
   5.31%     ?            ?      0x0000000113951bb4:   ldr		x1, [x27, #0x30]
   0.04%                  ?      0x0000000113951bb8:   mov		x16, x15
   0.11%                  ?      0x0000000113951bbc:   cmp		x15, x1
   0.03%      ?           ?      0x0000000113951bc0:   b.ge		#0x113951bc8
              ?           ?      0x0000000113951bc4:   mov		x16, x1
   5.33%      ?           ?      0x0000000113951bc8:   ldr		x2, [x27, #0x38]
   0.08%                  ?      0x0000000113951bcc:   mov		x15, x16
   0.17%                  ?      0x0000000113951bd0:   cmp		x16, x2
   0.11%       ?          ?      0x0000000113951bd4:   b.ge		#0x113951bdc
               ?          ?      0x0000000113951bd8:   mov		x15, x2
   5.79%       ?          ?      0x0000000113951bdc:   ldr		x3, [x27, #0x40]
   0.07%                  ?      0x0000000113951be0:   mov		x16, x15
   0.04%                  ?      0x0000000113951be4:   cmp		x15, x3
   0.02%        ?         ?      0x0000000113951be8:   b.ge		#0x113951bf0
                ?         ?      0x0000000113951bec:   mov		x16, x3
   5.32%        ?         ?      0x0000000113951bf0:   ldr		x4, [x27, #0x48]
   0.08%                  ?      0x0000000113951bf4:   mov		x15, x16
   0.07%                  ?      0x0000000113951bf8:   cmp		x16, x4
   0.07%         ?        ?      0x0000000113951bfc:   b.ge		#0x113951c04
   0.00%         ?        ?      0x0000000113951c00:   mov		x15, x4
   5.77%         ?        ?      0x0000000113951c04:   ldr		x5, [x27, #0x50]
   0.08%                  ?      0x0000000113951c08:   mov		x16, x15
   0.04%                  ?      0x0000000113951c0c:   cmp		x15, x5
   0.04%          ?       ?      0x0000000113951c10:   b.ge		#0x113951c18
                  ?       ?      0x0000000113951c14:   mov		x16, x5
   5.42%          ?       ?      0x0000000113951c18:   ldr		x6, [x27, #0x58]
   0.09%                  ?      0x0000000113951c1c:   mov		x15, x16
   0.15%                  ?      0x0000000113951c20:   cmp		x16, x6
   0.08%           ?      ?      0x0000000113951c24:   b.ge		#0x113951c2c
                   ?      ?      0x0000000113951c28:   mov		x15, x6
   5.49%           ?      ?      0x0000000113951c2c:   ldr		x7, [x27, #0x60]
   0.11%                  ?      0x0000000113951c30:   mov		x16, x15
   0.06%                  ?      0x0000000113951c34:   cmp		x15, x7
   0.06%            ?     ?      0x0000000113951c38:   b.ge		#0x113951c40
                    ?     ?      0x0000000113951c3c:   mov		x16, x7
   5.89%            ?     ?      0x0000000113951c40:   ldr		x20, [x27, #0x68]
   0.07%                  ?      0x0000000113951c44:   mov		x15, x16
   0.17%                  ?      0x0000000113951c48:   cmp		x16, x20
   0.02%             ?    ?      0x0000000113951c4c:   b.ge		#0x113951c54
                     ?    ?      0x0000000113951c50:   mov		x15, x20
   5.52%             ?    ?      0x0000000113951c54:   ldr		x22, [x27, #0x70]
   0.07%                  ?      0x0000000113951c58:   mov		x16, x15
   0.10%                  ?      0x0000000113951c5c:   cmp		x15, x22
   0.01%              ?   ?      0x0000000113951c60:   b.ge		#0x113951c68
                      ?   ?      0x0000000113951c64:   mov		x16, x22
   5.53%              ?   ?      0x0000000113951c68:   ldr		x23, [x27, #0x78]
   0.06%                  ?      0x0000000113951c6c:   mov		x15, x16
   0.14%                  ?      0x0000000113951c70:   cmp		x16, x23
   0.12%               ?  ?      0x0000000113951c74:   b.ge		#0x113951c7c
                       ?  ?      0x0000000113951c78:   mov		x15, x23
   5.58%               ?  ?      0x0000000113951c7c:   ldr		x26, [x27, #0x80]
   0.13%                  ?      0x0000000113951c80:   mov		x16, x15
   0.07%                  ?      0x0000000113951c84:   cmp		x15, x26
   0.14%                ? ?      0x0000000113951c88:   b.ge		#0x113951c90
                        ? ?      0x0000000113951c8c:   mov		x16, x26
   5.28%                ? ?      0x0000000113951c90:   ldr		x27, [x27, #0x88]
   0.04%                  ?      0x0000000113951c94:   add		w12, w12, #0x10     ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                          ?                                                                ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@30 (line 294)
                          ?                                                                ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.14%                  ?      0x0000000113951c98:   mov		x25, x16
   0.03%                  ?      0x0000000113951c9c:   cmp		x16, x27
   0.12%                 ??      0x0000000113951ca0:   b.ge		#0x113951ca8
   4.94%                 ??      0x0000000113951ca4:   mov		x25, x27            ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
                         ??                                                                ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
                         ??                                                                ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.79%                 ??      0x0000000113951ca8:   cmp		w12, w11
   0.00%                  ?      0x0000000113951cac:   b.lt		#0x113951b60        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
                                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                                 0x0000000113951cb0:   ldr		x11, [x28, #0x30]   ; ImmutableOopMap {rlocals=Oop [0]=Oop [8]=Oop rdispatch=Derived_oop_[8] [16]=Oop [24]=Oop [96]=Oop }
                                                                                           ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                                           ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
                                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.02%                         0x0000000113951cb4:   ldr		wzr, [x11]          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
                                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                                                                                           ;   {poll}
                                 0x0000000113951cb8:   cmp		w12, w10
                                 0x0000000113951cbc:   b.lt		#0x113951b20
                                 0x0000000113951cc0:   ldp		x16, x0, [sp]
                                 0x0000000113951cc4:   ldp		x17, x15, [sp, #0x10]
   0.02%                         0x0000000113951cc8:   ldr		x20, [sp, #0x60]
                                 0x0000000113951ccc:   cmp		w12, w14
                                 0x0000000113951cd0:   b.lt		#0x113951af8
                                 0x0000000113951cd4:   mov		x11, x25            ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
                                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.01%                      ?  0x0000000113951cd8:   ldarb		w14, [x21]          ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
                              ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@32 (line 107)
                              ?  0x0000000113951cdc:   ldr		x1, [x28, #0x30]
                              ?  0x0000000113951ce0:   add		x19, x19, #1        ; ImmutableOopMap {r15=Oop r16=Oop r17=Oop c_rarg0=Oop rdispatch=Derived_oop_c_rarg0 resp=Oop }
                              ?                                                            ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                              ?                                                            ; - (reexecute) org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@35 (line 107)
   0.03%                      ?  0x0000000113951ce4:   ldr		wzr, [x1]           ;   {poll}
                              ?  0x0000000113951ce8:   cbnz		w14, #0x113951aa8   ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                              ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@38 (line 108)
   0.00%                      ?  0x0000000113951cec:   ldr		w14, [x15, #0xc]    ;*getfield size {reexecute=0 rethrow=0 return_oop=0}
                              ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@8 (line 294)
                              ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                              ?  0x0000000113951cf0:   cmp		w14, #0
                           ?  ?  0x0000000113951cf4:   b.le		#0x113951d60        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                           ?  ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
                           ?  ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                           ?  ?  0x0000000113951cf8:   ldr		w10, [x15, #0x2c]
                           ?  ?  0x0000000113951cfc:   lsl		x24, x10, #3        ;*getfield maxLongA {reexecute=0 rethrow=0 return_oop=0}
                           ?  ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@15 (line 295)
                           ?  ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.04%                   ?  ?  0x0000000113951d00:   ldr		w10, [x24, #0xc]    ; implicit exception: dispatches to 0x0000000113951d68
                           ?  ?                                                            ;*laload {reexecute=0 rethrow=0 return_oop=0}
                           ?  ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
                           ?  ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                           ?  ?  0x0000000113951d04:   sxtw		x11, w14
                           ?  ?  0x0000000113951d08:   sub		x1, x11, #0xf
                           ?  ?  0x0000000113951d0c:   sxtw		x12, w10
                           ?  ?  0x0000000113951d10:   sub		x11, x11, #1
                           ?  ?  0x0000000113951d14:   cbz		w10, #0x113951d68
   0.01%                   ?  ?  0x0000000113951d18:   cmp		x11, x12
                           ?  ?  0x0000000113951d1c:   b.hs		#0x113951d68
   0.05%                   ?  ?  0x0000000113951d20:   ldr		x11, [x24, #0x10]
   0.00%                   ?  ?  0x0000000113951d24:   mov		x12, #-0x80000000
                           ?  ?  0x0000000113951d28:   mov		x10, x1
                           ?  ?  0x0000000113951d2c:   cmp		x1, x12
                           ?? ?  0x0000000113951d30:   b.ge		#0x113951d38
                           ?? ?  0x0000000113951d34:   mov		x10, x12
   0.01%                   ?? ?  0x0000000113951d38:   mov		x12, xzr
                           ?  ?  0x0000000113951d3c:   mov		w10, w10
                           ?  ?  0x0000000113951d40:   mov		x25, x11
                           ?  ?  0x0000000113951d44:   cmp		x11, x12
                           ? ??  0x0000000113951d48:   b.ge		#0x113951d50
                           ? ??  0x0000000113951d4c:   mov		x25, x12            ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
                           ? ??                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
                           ? ??                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.04%                   ? ??  0x0000000113951d50:   cmp		w10, #1
                           ?  ?  0x0000000113951d54:   b.le		#0x113951d90
                           ?  ?  0x0000000113951d58:   mov		w12, #1
                           ?  ?  0x0000000113951d5c:   b		#0x113951b2c
                           ?  ?  0x0000000113951d60:   mov		x11, xzr
                              ?  0x0000000113951d64:   b		#0x113951cd8        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                                           ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
                                                                                           ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                                 0x0000000113951d68:   mov		w1, #-0x92
....................................................................................................
#+end_src
** Branch Always
*** release
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt    Score    Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  914.140 ? 30.055  ops/ms
MinMaxVector.longReductionSimpleMax              100    2048  thrpt    8  928.003 ? 23.162  ops/ms
#+end_src
*** profiler
**** longReductionMultiplyMax
#+begin_src bash
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 560

                0x0000000116f545b0:   str		xzr, [x19, #0x20]   ;*putfield realTime {reexecute=0 rethrow=0 return_oop=0}
                                                                          ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@48 (line 109)
                0x0000000116f545b4:   str		x0, [x19, #0x30]    ;*putfield stopTime {reexecute=0 rethrow=0 return_oop=0}
                                                                          ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@42 (line 108)
                0x0000000116f545b8:   ldp		x29, x30, [sp, #0x50]
                0x0000000116f545bc:   add		sp, sp, #0x60
                0x0000000116f545c0:   ldr		x8, [x28, #0x28]    ;   {poll_return}
                0x0000000116f545c4:   cmp		sp, x8
                0x0000000116f545c8:   b.hi		#0x116f547e8
                0x0000000116f545cc:   ret
   9.68%   ?    0x0000000116f545d0:   mov		x7, x17             ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
           ?                                                              ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
           ?                                                              ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)















           ?    0x0000000116f545d4:   add		x10, x6, w12, sxtw #3
  49.69%   ?    0x0000000116f545d8:   ldr		x10, [x10, #0x10]
           ?    0x0000000116f545dc:   mul		x10, x10, x16
           ?    0x0000000116f545e0:   add		w12, w12, #1        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
           ?                                                              ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
           ?                                                              ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
           ?    0x0000000116f545e4:   mov		x17, x10
           ?    0x0000000116f545e8:   cmp		x7, x10
          ??    0x0000000116f545ec:   b.lt		#0x116f545f0        ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
          ??                                                              ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
          ??                                                              ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
  40.26%  ??    0x0000000116f545f0:   cmp		w12, w13
           ?    0x0000000116f545f4:   b.lt		#0x116f545d0        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                          ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                          ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.07%        0x0000000116f545f8:   ldarb		w11, [x4]           ;*getfield isDone {reexecute=0 rethrow=0 return_oop=0}
                                                                          ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@32 (line 107)
                0x0000000116f545fc:   ldr		x12, [x28, #0x30]
                0x0000000116f54600:   add		x20, x20, #1        ; ImmutableOopMap {c_rarg0=Oop c_rarg2=Oop c_rarg3=Oop c_rarg5=Oop c_rarg4=Derived_oop_c_rarg5 r19=Oop }
                                                                          ;*ifeq {reexecute=1 rethrow=0 return_oop=0}
                                                                          ; - (reexecute) org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@35 (line 107)
   0.02%        0x0000000116f54604:   ldr		wzr, [x12]          ;   {poll}
                0x0000000116f54608:   cbnz		w11, #0x116f54584   ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                                          ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@38 (line 108)
                0x0000000116f5460c:   ldr		w13, [x0, #0xc]     ;*getfield size {reexecute=0 rethrow=0 return_oop=0}
                                                                          ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@8 (line 284)
                                                                          ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                0x0000000116f54610:   cmp		w13, #0
                0x0000000116f54614:   b.le		#0x116f5470c        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                          ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                          ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                0x0000000116f54618:   ldr		w10, [x0, #0x2c]
                0x0000000116f5461c:   lsl		x6, x10, #3         ;*getfield maxLongA {reexecute=0 rethrow=0 return_oop=0}
                                                                          ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@18 (line 285)
                                                                          ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.02%        0x0000000116f54620:   ldr		w12, [x6, #0xc]     ; implicit exception: dispatches to 0x0000000116f54714
                                                                          ;*laload {reexecute=0 rethrow=0 return_oop=0}
                                                                          ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
                                                                          ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                0x0000000116f54624:   sxtw		x10, w13
                0x0000000116f54628:   sub		x11, x10, #3
                0x0000000116f5462c:   mov		x17, x1
                0x0000000116f54630:   cmp		x11, x1
            ?   0x0000000116f54634:   b.lt		#0x116f54638
   0.00%    ?   0x0000000116f54638:   sxtw		x7, w12
                0x0000000116f5463c:   sub		x10, x10, #1
                0x0000000116f54640:   mov		w17, w17
                0x0000000116f54644:   cbz		w12, #0x116f54714
   0.00%        0x0000000116f54648:   cmp		x10, x7
                0x0000000116f5464c:   b.hs		#0x116f54714
   0.00%        0x0000000116f54650:   ldr		x10, [x6, #0x10]
                0x0000000116f54654:   mul		x10, x10, x16
                0x0000000116f54658:   mov		x7, x15
                0x0000000116f5465c:   cmp		x10, x15
             ?  0x0000000116f54660:   b.lt		#0x116f54664        ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
             ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
             ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
             ?  0x0000000116f54664:   cmp		w17, #1
                0x0000000116f54668:   b.le		#0x116f5473c
                0x0000000116f5466c:   mov		w12, #1
                0x0000000116f54670:   cmp		w17, w12
....................................................................................................
#+end_src
**** longReductionSimpleMax
#+begin_src bash
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub, version 5, compile id 537

              0x0000000115b4df04:   str		xzr, [x20, #0x20]   ;*putfield realTime {reexecute=0 rethrow=0 return_oop=0}
                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@48 (line 109)
              0x0000000115b4df08:   str		x0, [x20, #0x30]    ;*putfield stopTime {reexecute=0 rethrow=0 return_oop=0}
                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@42 (line 108)
              0x0000000115b4df0c:   ldp		x29, x30, [sp, #0x50]
              0x0000000115b4df10:   add		sp, sp, #0x60
              0x0000000115b4df14:   ldr		x8, [x28, #0x28]    ;   {poll_return}
              0x0000000115b4df18:   cmp		sp, x8
              0x0000000115b4df1c:   b.hi		#0x115b4e214
              0x0000000115b4df20:   ret
   8.63%   ?  0x0000000115b4df24:   mov		x25, x11            ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
           ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@14 (line 295)
           ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
           ?  0x0000000115b4df28:   add		x10, x24, w12, sxtw #3
  49.92%   ?  0x0000000115b4df2c:   ldr		x10, [x10, #0x10]
           ?  0x0000000115b4df30:   add		w12, w12, #1        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
           ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@30 (line 294)
           ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
           ?  0x0000000115b4df34:   mov		x11, x10
           ?  0x0000000115b4df38:   cmp		x25, x10
          ??  0x0000000115b4df3c:   b.lt		#0x115b4df40        ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
          ??                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          ??                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
  41.12%  ??  0x0000000115b4df40:   cmp		w12, w14
           ?  0x0000000115b4df44:   b.lt		#0x115b4df24        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                        ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
                                                                        ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.04%      0x0000000115b4df48:   b		#0x115b4e0b8
              0x0000000115b4df4c:   ldp		x16, x0, [sp]
              0x0000000115b4df50:   ldp		x17, x15, [sp, #0x10]
              0x0000000115b4df54:   ldr		x20, [sp, #0x60]
              0x0000000115b4df58:   cmp		w10, w12
              0x0000000115b4df5c:   sub		w1, w10, w12
              0x0000000115b4df60:   csel		w1, wzr, w1, lt
              0x0000000115b4df64:   mov		w8, #0x3e80
              0x0000000115b4df68:   cmp		w1, w8
....................................................................................................
#+end_src
** CMov
*** release
#+begin_src bash
Benchmark                              (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionMultiplyMax            100    2048  thrpt    8  1023.075 ? 73.846  ops/ms
MinMaxVector.longReductionSimpleMax              100    2048  thrpt    8  1105.859 ?  5.286  ops/ms
#+end_src
*** profiler
**** longReductionMultiplyMax
#+begin_src bash
....[Hottest Region 1]..............................................................................
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub, version 5, compile id 559

             0x000000012fae6944:   add		w11, w12, w13
             0x000000012fae6948:   nop
             0x000000012fae694c:   nop		                    ;*ldc2_w {reexecute=0 rethrow=0 return_oop=0}
                                                                       ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@14 (line 285)
                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
          ?  0x000000012fae6950:   add		x12, x6, w13, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
          ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@23 (line 285)
          ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
          ?  0x000000012fae6954:   ldp		x21, x22, [x12, #0x10]
          ?  0x000000012fae6958:   mul		x21, x21, x17
   0.01%  ?  0x000000012fae695c:   ldr		x23, [x12, #0x20]
          ?  0x000000012fae6960:   mul		x22, x22, x17
          ?  0x000000012fae6964:   cmp		x21, x7
   0.08%  ?  0x000000012fae6968:   ldr		x12, [x12, #0x28]
   0.00%  ?  0x000000012fae696c:   csel		x7, x21, x7, gt
          ?  0x000000012fae6970:   mul		x21, x23, x17
          ?  0x000000012fae6974:   cmp		x22, x7
          ?  0x000000012fae6978:   csel		x7, x22, x7, gt
   0.02%  ?  0x000000012fae697c:   mul		x12, x12, x17
   2.37%  ?  0x000000012fae6980:   cmp		x21, x7
  74.76%  ?  0x000000012fae6984:   csel		x7, x21, x7, gt
   4.96%  ?  0x000000012fae6988:   cmp		x12, x7
   4.78%  ?  0x000000012fae698c:   add		w13, w13, #4        ;*iinc {reexecute=0 rethrow=0 return_oop=0}
          ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@34 (line 284)
          ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   5.15%  ?  0x000000012fae6990:   csel		x7, x12, x7, gt     ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
          ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@30 (line 286)
          ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   7.16%  ?  0x000000012fae6994:   cmp		w13, w11
          ?  0x000000012fae6998:   b.lt		#0x12fae6950        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                       ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@11 (line 284)
                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.34%     0x000000012fae699c:   ldr		x21, [x28, #0x30]   ; ImmutableOopMap {c_rarg0=Oop c_rarg2=Oop c_rarg3=Oop c_rarg5=Oop c_rarg4=Derived_oop_c_rarg5 c_rarg6=Oop r19=Oop }
                                                                       ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                       ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
   0.03%     0x000000012fae69a0:   ldr		wzr, [x21]          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                       ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionMultiplyMax@37 (line 284)
                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionMultiplyMax_jmhTest::longReductionMultiplyMax_thrpt_jmhStub@19 (line 105)
                                                                       ;   {poll}
             0x000000012fae69a4:   cmp		w13, w15
             0x000000012fae69a8:   b.lt		#0x12fae6930
             0x000000012fae69ac:   cmp		w13, w10
             0x000000012fae69b0:   b.lt		#0x12fae68a0
....................................................................................................
#+end_src
**** longReductionSimpleMax
#+begin_src bash
C2, level 4, org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub, version 5, compile id 558

             0x0000000114f3c8f0:   csel		w11, wzr, w12, lt
             0x0000000114f3c8f4:   mov		w8, #0x3e80
             0x0000000114f3c8f8:   cmp		w11, w8
             0x0000000114f3c8fc:   csel		w11, w14, w11, hi
             0x0000000114f3c900:   add		w12, w11, w3
             0x0000000114f3c904:   nop
             0x0000000114f3c908:   nop
             0x0000000114f3c90c:   nop		                    ;*aload_1 {reexecute=0 rethrow=0 return_oop=0}
                                                                       ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@14 (line 295)
                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.00%  ?  0x0000000114f3c910:   add		x21, x5, w3, sxtw #3;*laload {reexecute=0 rethrow=0 return_oop=0}
          ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@20 (line 295)
          ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.01%  ?  0x0000000114f3c914:   ldr		x11, [x21, #0x10]
          ?  0x0000000114f3c918:   cmp		x6, x11
   0.01%  ?  0x0000000114f3c91c:   ldr		x7, [x21, #0x18]
          ?  0x0000000114f3c920:   csel		x11, x6, x11, gt
          ?  0x0000000114f3c924:   cmp		x11, x7
   0.01%  ?  0x0000000114f3c928:   ldr		x6, [x21, #0x20]
          ?  0x0000000114f3c92c:   csel		x11, x11, x7, gt
          ?  0x0000000114f3c930:   cmp		x11, x6
   0.02%  ?  0x0000000114f3c934:   ldr		x7, [x21, #0x28]
          ?  0x0000000114f3c938:   csel		x11, x11, x6, gt
          ?  0x0000000114f3c93c:   cmp		x11, x7
   0.00%  ?  0x0000000114f3c940:   ldr		x6, [x21, #0x30]
          ?  0x0000000114f3c944:   csel		x11, x11, x7, gt
          ?  0x0000000114f3c948:   cmp		x11, x6
   0.01%  ?  0x0000000114f3c94c:   ldr		x7, [x21, #0x38]
          ?  0x0000000114f3c950:   csel		x11, x11, x6, gt
          ?  0x0000000114f3c954:   cmp		x11, x7
   1.03%  ?  0x0000000114f3c958:   ldr		x6, [x21, #0x40]
   0.24%  ?  0x0000000114f3c95c:   csel		x11, x11, x7, gt
          ?  0x0000000114f3c960:   cmp		x11, x6
   2.91%  ?  0x0000000114f3c964:   ldr		x7, [x21, #0x48]
          ?  0x0000000114f3c968:   csel		x11, x11, x6, gt
          ?  0x0000000114f3c96c:   cmp		x11, x7
   2.54%  ?  0x0000000114f3c970:   ldr		x6, [x21, #0x50]
          ?  0x0000000114f3c974:   csel		x11, x11, x7, gt
          ?  0x0000000114f3c978:   cmp		x11, x6
   4.65%  ?  0x0000000114f3c97c:   ldr		x7, [x21, #0x58]
          ?  0x0000000114f3c980:   csel		x11, x11, x6, gt
          ?  0x0000000114f3c984:   cmp		x11, x7
   6.08%  ?  0x0000000114f3c988:   ldr		x6, [x21, #0x60]
          ?  0x0000000114f3c98c:   csel		x11, x11, x7, gt
          ?  0x0000000114f3c990:   cmp		x11, x6
   5.08%  ?  0x0000000114f3c994:   ldr		x7, [x21, #0x68]
          ?  0x0000000114f3c998:   csel		x11, x11, x6, gt
          ?  0x0000000114f3c99c:   cmp		x11, x7
   5.66%  ?  0x0000000114f3c9a0:   ldr		x6, [x21, #0x70]
          ?  0x0000000114f3c9a4:   csel		x11, x11, x7, gt
          ?  0x0000000114f3c9a8:   cmp		x11, x6
   5.49%  ?  0x0000000114f3c9ac:   ldr		x7, [x21, #0x78]
          ?  0x0000000114f3c9b0:   csel		x11, x11, x6, gt
          ?  0x0000000114f3c9b4:   cmp		x11, x7
   5.43%  ?  0x0000000114f3c9b8:   ldr		x6, [x21, #0x80]
   0.05%  ?  0x0000000114f3c9bc:   csel		x11, x11, x7, gt
          ?  0x0000000114f3c9c0:   cmp		x11, x6
  59.60%  ?  0x0000000114f3c9c4:   ldr		x7, [x21, #0x88]
          ?  0x0000000114f3c9c8:   csel		x11, x11, x6, gt
          ?  0x0000000114f3c9cc:   cmp		x11, x7
          ?  0x0000000114f3c9d0:   add		w3, w3, #0x10       ;*iinc {reexecute=0 rethrow=0 return_oop=0}
          ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@30 (line 294)
          ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
          ?  0x0000000114f3c9d4:   csel		x6, x11, x7, gt     ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
          ?                                                            ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@26 (line 296)
          ?                                                            ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
          ?  0x0000000114f3c9d8:   cmp		w3, w12
          ?  0x0000000114f3c9dc:   b.lt		#0x114f3c910        ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                                       ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@11 (line 294)
                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.31%     0x0000000114f3c9e0:   ldr		x7, [x28, #0x30]    ; ImmutableOopMap {r13=Oop r15=Oop c_rarg2=Oop c_rarg4=Oop c_rarg1=Derived_oop_c_rarg4 c_rarg5=Oop r19=Oop }
                                                                       ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                                       ; - (reexecute) org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
   0.02%     0x0000000114f3c9e4:   ldr		wzr, [x7]           ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                                       ; - org.openjdk.bench.java.lang.MinMaxVector::longReductionSimpleMax@33 (line 294)
                                                                       ; - org.openjdk.bench.java.lang.jmh_generated.MinMaxVector_longReductionSimpleMax_jmhTest::longReductionSimpleMax_thrpt_jmhStub@19 (line 105)
                                                                       ;   {poll}
             0x0000000114f3c9e8:   cmp		w3, w0
             0x0000000114f3c9ec:   b.lt		#0x114f3c8e8
             0x0000000114f3c9f0:   cmp		w3, w10
             0x0000000114f3c9f4:   b.lt		#0x114f3c860
....................................................................................................
#+end_src
* 28.3.25
Added jmh code to resolve xctrace out of SDKROOT.
Created https://bugs.openjdk.org/browse/CODETOOLS-7903982 to improve that.

Tried to run benchmark with that but failed:
#+begin_src bash
TEST="micro:org.openjdk.bench.java.lang.MinMaxVector.longReductionMultiplyMax" MICRO="OPTIONS=-p probability=100 -jvmArgs -XX:-UseSuperWord -prof xctraceasm -v EXTRA;FORK=1" CONF=release BUILD_LOG=warn make test
pushd /Users/galder/1/jdk-avoid-cmov-long-min-max
CONF=release-darwin-arm64 make -s
popd
touch /Users/galder/1/jdk-avoid-cmov-long-min-max/build/release-darwin-arm64/jdk/bin/java
~/1/jdk-avoid-cmov-long-min-max ~/1/colata/avoid-cmov-long-min-max-8351409
Building target 'default (exploded-image)' in configuration 'release-darwin-arm64'
Finished building target 'default (exploded-image)' in configuration 'release-darwin-arm64'
~/1/colata/avoid-cmov-long-min-max-8351409
cd /Users/galder/1/jdk-avoid-cmov-long-min-max
CONF=release-darwin-arm64 make test
make[1]: Entering directory '/Users/galder/1/jdk-avoid-cmov-long-min-max'
Building target 'test' in configuration 'release-darwin-arm64'
Running tests using MICRO control variable 'OPTIONS=-p probability=100 -jvmArgs -XX:-UseSuperWord -prof xctraceasm -v EXTRA;FORK=1'
Test selection 'micro:org.openjdk.bench.java.lang.MinMaxVector.longReductionMultiplyMax', will run:
 micro:org.openjdk.bench.java.lang.MinMaxVector.longReductionMultiplyMax

Running test 'micro:org.openjdk.bench.java.lang.MinMaxVector.longReductionMultiplyMax'
Profilers failed to initialize, exiting.
"xctrace version" failed: [dyld[99580]: Library not loaded: @rpath/XCTraceCore.framework/Versions/A/XCTraceCore
  Referenced from: <05ABD51C-583F-305C-BAC6-95F050084452> /nix/store/vhsix1jn849mpxggwbw2zh1nbxpy0grc-Xcode16.2-MacOSX15/Xcode/Contents/Developer/usr/bin/xctrace
  Reason: tried: '/nix/store/vhsix1jn849mpxggwbw2zh1nbxpy0grc-Xcode16.2-MacOSX15/Xcode/Contents/SharedFrameworks/XCTraceCore.framework/Versions/A/XCTraceCore' (no such file), '/nix/store/vhsix1jn849mpxggwbw2zh1nbxpy0grc-Xcode16.2-MacOSX15/Xcode/Contents/Applications/Instruments.app/Contents/Frameworks/XCTraceCore.framework/Versions/A/XCTraceCore' (no such file), '/nix/store/vhsix1jn849mpxggwbw2zh1nbxpy0grc-Xcode16.2-MacOSX15/Xcode/Contents/Developer/Independence/XCTraceCore.framework/Versions/A/XCTraceCore' (no such file), '/nix/store/vhsix1jn849mpxggwbw2zh1nbxpy0grc-Xcode16.2-MacOSX15/Xcode/Contents/Developer/Frameworks/XCTraceCore.framework/Versions/A/XCTraceCore' (no such file), '/nix/store/vhsix1jn849mpxggwbw2zh1nbxpy0grc-Xcode16.2-MacOSX15/Xcode/Contents/SharedFrameworks/XCTraceCore.framework/Versions/A/XCTraceCore' (no such file), '/nix/store/vhsix1jn849mpxggwbw2zh1nbxpy0grc-Xcode16.2-MacOSX15/Xcode/Contents/Applications/Instruments.app/Contents/Frameworks/XCTraceCore.framework/Versions/A/XCTraceCore' (no such file), '/nix/store/vhsix1jn849mpxggwbw2zh1nbxpy0grc-Xcode16.2-MacOSX15/Xcode/Contents/Developer/Independence/XCTraceCore.framework/Versions/A/XCTraceCore' (no such file), '/nix/store/vhsix1jn849mpxggwbw2zh1nbxpy0grc-Xcode16.2-MacOSX15/Xcode/Contents/Developer/Frameworks/XCTraceCore.framework/Versions/A/XCTraceCore' (no such file)
]
Finished running test 'micro:org.openjdk.bench.java.lang.MinMaxVector.longReductionMultiplyMax'
Test report is stored in build/release-darwin-arm64/test-results/micro_org_openjdk_bench_java_lang_MinMaxVector_longReductionMultiplyMax

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP
   micro:org.openjdk.bench.java.lang.MinMaxVector.longReductionMultiplyMax
>>                                                       1     0     0     1     0 <<
==============================
TEST FAILURE

make[2]: *** [/Users/galder/1/jdk-avoid-cmov-long-min-max/make/Init.gmk:150: main] Error 1
make[1]: *** [/Users/galder/1/jdk-avoid-cmov-long-min-max/make/PreInit.gmk:159: test] Error 2
make[1]: Leaving directory '/Users/galder/1/jdk-avoid-cmov-long-min-max'
make: *** [../nix-make/OpenJDK.gmk:103: test] Error 2
#+end_src
The issue is that XCTraceCore is not in the devkit.
Created https://bugs.openjdk.org/browse/JDK-8353177

Added XCTraceCore to the devkit and tried again,
but something else is missing, ~InstrumentsTrace~:
#+begin_src bash
[nix-shell:~/1/colata/avoid-cmov-long-min-max-8351409]$ TEST="micro:org.openjdk.bench.java.lang.MinMaxVector.longReductionMultiplyMax" MICRO="OPTIONS=-p probability=100 -jvmArgs -XX:-UseSuperWord -prof xctraceasm -v EXTRA;FORK=1" CONF=release BUILD_LOG=warn make test
pushd /Users/galder/1/jdk-avoid-cmov-long-min-max
CONF=release-darwin-arm64 make -s
popd
touch /Users/galder/1/jdk-avoid-cmov-long-min-max/build/release-darwin-arm64/jdk/bin/java
~/1/jdk-avoid-cmov-long-min-max ~/1/colata/avoid-cmov-long-min-max-8351409
Building target 'default (exploded-image)' in configuration 'release-darwin-arm64'
Finished building target 'default (exploded-image)' in configuration 'release-darwin-arm64'
~/1/colata/avoid-cmov-long-min-max-8351409
cd /Users/galder/1/jdk-avoid-cmov-long-min-max
CONF=release-darwin-arm64 make test
make[1]: Entering directory '/Users/galder/1/jdk-avoid-cmov-long-min-max'
Building target 'test' in configuration 'release-darwin-arm64'
Running tests using MICRO control variable 'OPTIONS=-p probability=100 -jvmArgs -XX:-UseSuperWord -prof xctraceasm -v EXTRA;FORK=1'
Test selection 'micro:org.openjdk.bench.java.lang.MinMaxVector.longReductionMultiplyMax', will run:
 micro:org.openjdk.bench.java.lang.MinMaxVector.longReductionMultiplyMax

Running test 'micro:org.openjdk.bench.java.lang.MinMaxVector.longReductionMultiplyMax'
Profilers failed to initialize, exiting.
"xctrace version" failed: [dyld[24506]: Library not loaded: @rpath/InstrumentsTrace.framework/Versions/A/InstrumentsTrace
  Referenced from: <EC019860-6E8F-343C-82AA-B9F9374E9129> /nix/store/fqdg3ybx87d3kpg2gqqxl5h4xlwj4wrq-Xcode16.2-MacOSX15/Xcode/Contents/Applications/Instruments.app/Contents/Frameworks/XCTraceCore.framework/Versions/A/XCTraceCore
  Reason: tried: '/nix/store/fqdg3ybx87d3kpg2gqqxl5h4xlwj4wrq-Xcode16.2-MacOSX15/Xcode/Contents/Applications/Instruments.app/Contents/Frameworks/XCTraceCore.framework/Versions/A/../../../InstrumentsTrace.framework/Versions/A/InstrumentsTrace' (no such file), '/nix/store/fqdg3ybx87d3kpg2gqqxl5h4xlwj4wrq-Xcode16.2-MacOSX15/Xcode/Contents/Applications/Instruments.app/Contents/Frameworks/XCTraceCore.framework/Versions/A/../../../../../../../SharedFrameworks/InstrumentsTrace.framework/Versions/A/InstrumentsTrace' (no such file), '/nix/store/fqdg3ybx87d3kpg2gqqxl5h4xlwj4wrq-Xcode16.2-MacOSX15/Xcode/Contents/Applications/Instruments.app/Contents/Frameworks/XCTraceCore.framework/Versions/A/../../../../Independence/InstrumentsTrace.framework/Versions/A/InstrumentsTrace' (no such file), '/nix/store/fqdg3ybx87d3kpg2gqqxl5h4xlwj4wrq-Xcode16.2-MacOSX15/Xcode/Contents/SharedFrameworks/InstrumentsTrace.framework/Versions/A/InstrumentsTrace' (no such file), '/nix/store/fqdg3ybx87d3kpg2gqqxl5h4xlwj4wrq-Xcode16.2-MacOSX15/Xcode/Contents/Applications/Instruments.app/Contents/Frameworks/InstrumentsTrace.framework/Versions/A/InstrumentsTrace' (no such file), '/nix/store/fqdg3ybx87d3kpg2gqqxl5h4xlwj4wrq-Xcode16.2-MacOSX15/Xcode/Contents/Developer/Independence/InstrumentsTrace.framework/Versions/A/InstrumentsTrace' (no such file), '/nix/store/fqdg3ybx87d3kpg2gqqxl5h4xlwj4wrq-Xcode16.2-MacOSX15/Xcode/Contents/Developer/Frameworks/InstrumentsTrace.framework/Versions/A/InstrumentsTrace' (no such file), '/nix/store/fqdg3ybx87d3kpg2gqqxl5h4xlwj4wrq-Xcode16.2-MacOSX15/Xcode/Contents/SharedFrameworks/InstrumentsTrace.framework/Versions/A/InstrumentsTrace' (no such file), '/nix/store/fqdg3ybx87d3kpg2gqqxl5h4xlwj4wrq-Xcode16.2-MacOSX15/Xcode/Contents/Applications/Instruments.app/Contents/Frameworks/InstrumentsTrace.framework/Versions/A/InstrumentsTrace' (no such file), '/nix/store/fqdg3ybx87d3kpg2gqqxl5h4xlwj4wrq-Xcode16.2-MacOSX15/Xcode/Contents/Developer/Independence/InstrumentsTrace.framework/Versions/A/InstrumentsTrace' (no such file), '/nix/store/fqdg3ybx87d3kpg2gqqxl5h4xlwj4wrq-Xcode16.2-MacOSX15/Xcode/Contents/Developer/Frameworks/InstrumentsTrace.framework/Versions/A/InstrumentsTrace' (no such file)
]
Finished running test 'micro:org.openjdk.bench.java.lang.MinMaxVector.longReductionMultiplyMax'
Test report is stored in build/release-darwin-arm64/test-results/micro_org_openjdk_bench_java_lang_MinMaxVector_longReductionMultiplyMax

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP
   micro:org.openjdk.bench.java.lang.MinMaxVector.longReductionMultiplyMax
>>                                                       1     0     0     1     0 <<
==============================
TEST FAILURE

make[2]: *** [/Users/galder/1/jdk-avoid-cmov-long-min-max/make/Init.gmk:150: main] Error 1
make[1]: *** [/Users/galder/1/jdk-avoid-cmov-long-min-max/make/PreInit.gmk:159: test] Error 2
make[1]: Leaving directory '/Users/galder/1/jdk-avoid-cmov-long-min-max'
make: *** [../nix-make/OpenJDK.gmk:104: test] Error 2
#+end_src
* 27.3.25
To breakpoint to .ad being called,
try putting breakpoint in MatchOper::reg
#+begin_src bash
MachOper::reg(PhaseRegAlloc *, const Node *) const machnode.cpp:39
maxL_reg_regNode::emit(C2_MacroAssembler *, PhaseRegAlloc *) const aarch64.ad:15683
PhaseOutput::scratch_emit_size(const Node *) output.cpp:3385
MachNode::emit_size(PhaseRegAlloc *) const machnode.cpp:157
MachNode::size(PhaseRegAlloc *) const machnode.cpp:149
PhaseOutput::shorten_branches(unsigned int *) output.cpp:539
PhaseOutput::Output() output.cpp:339
Compile::Code_Gen() compile.cpp:3081
Compile::Compile(ciEnv *, ciMethod *, int, Options, DirectiveSet *) compile.cpp:891
Compile::Compile(ciEnv *, ciMethod *, int, Options, DirectiveSet *) compile.cpp:693
C2Compiler::compile_method(ciEnv *, ciMethod *, int, bool, DirectiveSet *) c2compiler.cpp:141
CompileBroker::invoke_compiler_on_method(CompileTask *) compileBroker.cpp:2331
CompileBroker::compiler_thread_loop() compileBroker.cpp:1975
CompilerThread::thread_entry(JavaThread *, JavaThread *) compilerThread.cpp:67
JavaThread::thread_main_inner() javaThread.cpp:776
JavaThread::run() javaThread.cpp:761
Thread::call_run() thread.cpp:231
thread_native_entry(Thread *) os_bsd.cpp:601
#+end_src
* 25.3.25
todo: run without intrinsic
** benchmarking aarch64
*** branch never taken (option 3)
#+begin_src bash
Benchmark                            (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionSimpleMax            100    2048  thrpt    8  3810.543 ? 98.505  ops/ms
#+end_src
*** branch always taken (option 2)
#+begin_src bash
Benchmark                            (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionSimpleMax            100    2048  thrpt    8  1757.789 ? 39.362  ops/ms
#+end_src
*** cmov (option 1)
#+begin_src bash
Benchmark                            (probability)  (size)   Mode  Cnt     Score    Error   Units
MinMaxVector.longReductionSimpleMax            100    2048  thrpt    8  1095.610 ? 13.587  ops/ms
#+end_src
** source date error
Attempt to run benchmark but had issues building test:

#+begin_src bash
/nix/store/5y040sypyg0amh0igxs9rnx5fmj0d88i-temurin-bin-23.0.2/bin/jar --create --date 1980-01-01T00:00:00Z --file /Users/galder/1/jdk-avoid-cmov-long-min-max/build/release-darwin-arm64/support/modules_libs/java.base/jrt-fs.jar --manifest /Users/galder/1/jdk-avoid-cmov-long-min-max/build/release-darwin-arm64/support/modules_libs/java.base/_the.jrt-fs.jar_manifest
...
date 1980-01-01T00:00:00Z is not within the valid range 1980-01-01T00:00:02Z to 2099-12-31T23:59:59Z
#+end_src

#+begin_src bash
bash configure \
   --disable-precompiled-headers \
   --with-boot-jdk=/nix/store/5y040sypyg0amh0igxs9rnx5fmj0d88i-temurin-bin-23.0.2 \
   --with-conf-name=release-darwin-arm64 \
   --with-jmh=build/jmh/jars \
   --with-devkit=/nix/store/vhsix1jn849mpxggwbw2zh1nbxpy0grc-Xcode16.2-MacOSX15 \
   --enable-hsdis-bundling --with-capstone=/nix/store/g9xz7lq27dsdvrg0i666nwc6322af9p1-capstone-5.0.5 --with-hsdis=capstone
...
checking what hotspot build time to use... 1980-01-01T00:00:00Z (from --with-source-date)
#+end_src

Nix:
#+begin_src bash
checking what source date to use... 315532800, from SOURCE_DATE_EPOCH
#+end_src

Leo:
#+begin_src bash
checking what source date to use... 1742909454, from 'current' (default)
#+end_src

Issue is that nix-shell sets ~SOURCE_DATE_EPOCH~:
#+begin_src bash
$ echo $SOURCE_DATE_EPOCH
315532800
#+end_src

Several ways to fix it.
Either pass in a source date, or unset ~SOURCE_DATE_EPOCH~ env variable:
https://espg.github.io/linux/nix.html

Cause: https://github.com/openjdk/jdk/pull/
** other way, branch always taken
#+begin_src asm
instruct maxL_reg_reg(iRegLNoSp dst, iRegL src1, iRegL src2)
%{
  match(Set dst (MaxL src1 src2));
  ins_cost(INSN_COST * 3);

  ins_encode %{
    Label done;
    __ mov(as_Register($dst$$reg), as_Register($src1$$reg));
    __ cmp(as_Register($src1$$reg), as_Register($src2$$reg));
    __ br(Assembler::GE, done);
    __ mov(as_Register($dst$$reg), as_Register($src2$$reg));
    __ bind(done);
  %}
  ins_pipe(pipe_cmp_branch);
%}
#+end_src

#+begin_src asm
  0x00000001382cfd68:   mov		x13, #0xb
  0x00000001382cfd7c:   mul		x14, x14, x13
  ...
  0x00000001382cfdb8:   mov		x0, x14             ; x0 (dst) <- x14 (src1, value)
  0x00000001382cfdbc:   cmp		x14, x12            ; x14 (src1, value) >= x12 (src2, max)
  0x00000001382cfdc0:   b.ge		#0x1382cfdc8        ; yes, it's always greater so branch taken
  0x00000001382cfdc4:   mov		x0, x12             ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@25 (line 24)
  0x00000001382cfdc8:   cmp		w11, #0x3fd
#+end_src
** one way v2, branch never taken
#+begin_src asm
instruct maxL_reg_reg(iRegLNoSp dst, iRegL src1, iRegL src2)
%{
  match(Set dst (MaxL src1 src2));
  ins_cost(INSN_COST * 3);

  ins_encode %{
    Label done;
    __ mov(as_Register($dst$$reg), as_Register($src2$$reg));
    __ cmp(as_Register($src2$$reg), as_Register($src1$$reg));
    __ br(Assembler::LT, done);
    __ mov(as_Register($dst$$reg), as_Register($src1$$reg));
    __ bind(done);
  %}
  ins_pipe(pipe_cmp_branch);
%}
#+end_src
#+begin_src asm
  0x00000001282cfd98:   mul		x12, x12, x13
  ...
  0x00000001282cfdb8:   mov		x0, x12             ; x0 (dst) <- x12 (value)
  0x00000001282cfdbc:   cmp		x12, x14            ; x12 (value), x14 (max)
  0x00000001282cfdc0:   b.lt		#0x1282cfdc8        ; value < max ? never taken branch
  0x00000001282cfdc4:   mov		x0, x14             ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@25 (line 24)
                                                            ; dst (dst) <- x14 max
#+end_src
** one way
Is this right?
#+begin_src asm
instruct maxL_reg_reg(iRegLNoSp dst, iRegL src1, iRegL src2)
%{
  match(Set dst (MaxL src1 src2));
  ins_cost(INSN_COST * 3);

  ins_encode %{
    Label done;
    __ mov(as_Register($dst$$reg), as_Register($src2$$reg));
    __ cmp(as_Register($dst$$reg), as_Register($src1$$reg));
    __ br(Assembler::LT, done);
    __ mov(as_Register($dst$$reg), as_Register($src1$$reg));
    __ bind(done);
  %}
  ins_pipe(pipe_cmp_branch);
%}
#+end_src
#+begin_src asm
  0x0000000137acfd68:   mov		x13, #0xb           ; x13 = 11
  ...
  0x0000000137acfd98:   mul		x12, x12, x13       ; value = 11 * data[i]
  ...
  0x0000000137acfdb8:   mov		x0, x12             ; mov dst <- src2 (value)
  0x0000000137acfdbc:   cmp		x0, x14             ; cmp dst (value), src1 (max)
  0x0000000137acfdc0:   b.lt		#0x137acfdc8        ; branch if (dst (value) < src1 (max)) ; branch won't happen because value always > max
  0x0000000137acfdc4:   mov		x0, x14             ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@25 (line 24)
                                                            ; mov dst <- src1 (max)
#+end_src
* 21.3.25
** branch one way
#+begin_src asm
instruct maxL_reg_reg(iRegLNoSp dst, iRegL src1, iRegL src2)
%{
  match(Set dst (MaxL src1 src2));
  ins_cost(INSN_COST * 3);

  ins_encode %{
    Label done;
    __ mov(as_Register($dst$$reg), as_Register($src2$$reg));
    __ cmp(as_Register($dst$$reg), as_Register($src1$$reg));
    __ br(Assembler::LT, done);
    __ mov(as_Register($dst$$reg), as_Register($src1$$reg));
    __ bind(done);
  %}
  ins_pipe(pipe_cmp_branch);
%}
#+end_src
** how to write branch code in backend
Create MyMax that does things manually.

Bytecode:
#+begin_src java
  static long test(long[]);
    descriptor: ([J)J
    flags: (0x0008) ACC_STATIC
    Code:
      stack=4, locals=8, args_size=1
         0: ldc2_w        #11                 // long -9223372036854775808l
         3: lstore_1
         4: iconst_0
         5: istore_3
         6: iload_3
         7: sipush        1024
        10: if_icmpge     46
        13: ldc2_w        #13                 // long 11l
        16: aload_0
        17: iload_3
        18: laload
        19: lmul
        20: lstore        4
        22: lload_1
        23: lload         4
        25: lcmp
        26: iflt          33
#+end_src

#+begin_src asm
 ;; 0x8000000000000000
 ;; 0xB
  0x000000012facfdd4:   mov		x12, #0xb
  0x000000012facfdd8:   mul		x11, x11, x12       ;*lmul {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - MyMax::test@19 (line 23)
                                                            ; x11 is value
  0x000000012facfddc:   mov		x8, #-0x8000000000000000
  0x000000012facfde0:   cmp		x11, x8             ; x8 is max
  0x000000012facfde4:   b.le		#0x12facff78        ;*iflt {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - MyMax::test@26 (line 24)
 ;; B5: #	out( B28 B6 ) <- in( B4 )  Freq: 0.999996
 ;; 0x1
  0x000000012facfde8:   mov		w2, #1
  0x000000012facfdec:   cmp		w10, #1
  ...
 ;; B29: #	out( B25 ) <- in( B4 )  Freq: 4.76836e-07
 ;; 0x8000000000000000
  0x000000012facff78:   mov		x14, #-0x8000000000000000
  0x000000012facff7c:   mov			w2, wzr
  0x000000012facff80:   mov		x0, x11
  0x000000012facff84:   b		#0x12facff04        ;*iflt {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - MyMax::test@26 (line 24)
#+end_src
** disable macro expansion and implement cmov in backend
Trying to add backend implementation for MinL/MaxL.
Used code in here as base to decide how to approach it:
https://github.com/openjdk/jdk/compare/master...galderz:jdk:topic.intrinsify-max-min-long.0528?expand=1
Removed macro expansion for the nodes.

Java code:
#+begin_src java
     1	import java.util.Arrays;
     2
     3	public class Test
     4	{
     5	    static final int RANGE = 1024;
     6	    static final int ITER = 10_000;
     7
     8	    // Initializes data with increasing values,
     9	    // so max one of the branches is the one that is always taken
    10	    static void init(long[] data)
    11	    {
    12	        for (int i = 0; i < RANGE; i++)
    13	        {
    14	            data[i] = i + 1;
    15	        }
    16	    }
    17
    18	    static long test(long[] data)
    19	    {
    20	        long max = Long.MIN_VALUE;
    21	        for (int i = 0; i < RANGE; i++)
    22	        {
    23	            final long value = 11 * data[i];
    24	            final long tmp = Math.max(max, value);
    25	            max = tmp;
    26	        }
    27	        return max;
    28	    }
    29
    30	    public static void main(String[] args)
    31	    {
    32	        long[] data = new long[RANGE];
    33	        init(data);
    34
    35	        long result = 0;
    36	        for (long i = 0; i < ITER; i++)
    37	        {
    38	            result = test(data);
    39	        }
    40
    41	        // Validate
    42	        if (result == 11 * Arrays.stream(data).max().getAsLong())
    43	        {
    44	            System.out.println("Success");
    45	        }
    46	        else
    47	        {
    48	            throw new AssertionError("Failed");
    49	        }
    50	    }
    51	}
#+end_src

Before, ideal graph:
#+begin_src bash
 467  CMoveL  === _ 466 430 415  [[ 469 471 ]]  #long !orig=[414],[360],[132],377 !jvms: Test::test @ bci:25 (line 24)
 469  CmpL  === _ 467 413  [[ 470 ]]
 470  Bool  === _ 469  [[ 471 ]] [lt]
#+end_src

Before, assemly:
#+begin_src asm
  0x0000000110607dfc:   csel		x0, x10, x0, lt     ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@25 (line 24)
#+end_src

After, ideal graph:
#+begin_src bash
 412  MaxL  === _ 414 413  [[ 360 ]]  !orig=132,377 !jvms: Test::test @ bci:25 (line 24)
#+end_src

After, assembly:
#+begin_src asm
  0x000000010e6d3db0:   csel		x0, x14, x12, gt    ;*invokestatic max {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@25 (line 24)
#+end_src
