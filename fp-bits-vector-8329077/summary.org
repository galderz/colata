* 17.02.2025
** floatToRawIntBits macos
Continue exploration in macos to understand assembly.
#+begin_src asm
 ;; B14: #	out( B14 B15 ) <- in( B13 B14 ) Loop( B14-B14 inner main of N71 strip mined) Freq: 1.04898e+08
  0x000000010cf740d0:   sbfiz		x12, x4, #2, #0x20  ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
                                                    <-- x12 = i * 4 calculates the memory offset of the i-th element in arrays

  0x000000010cf740d4:   add		x13, x2, x12        <-- x12 holds the base address of the floats
                                                  <-- adds x12 to x2, resulting in x13 pointing to floats[i]

  0x000000010cf740d8:   ldr		s17, [x13, #0x10]   ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@10 (line 9)
                                                  <-- loads a single precision float (s17) from floats[i]
                                                  <-- #0x10 offset means it is reading from x13 + 16 (could be unrolled loop behavior)

  0x000000010cf740dc:   add		x12, x10, x12       <-- x10 holds the base address of ints
                                                  <-- x12 (byte offset) is added to x10 computing ints[i] address

  0x000000010cf740e0:   str		s17, [x12, #0x10]   ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
                                                  <-- stores the float value as is into memory

 ;; merged ldr pair
  0x000000010cf740e4:   ldp		w14, w16, [x13, #0x14];*invokestatic floatToRawIntBits {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@13 (line 10)
                                                    <-- load pair (ldp) loads 2 consecutive 32-bit words (interpreted as floats)
                                                    <-- these get converted into int representations
                                                    <-- they're already in IEEE 754 bit format

  0x000000010cf740e8:   str		w14, [x12, #0x14]   ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
                                                  <-- stores w14 into (first float's bit representation) into ints[i]

  0x000000010cf740ec:   ldr		w0, [x13, #0x1c]    ;*invokestatic floatToRawIntBits {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@13 (line 10)
                                                  <-- loads another 32-bit float into w0

  0x000000010cf740f0:   str		w16, [x12, #0x18]   ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
                                                  <-- stores w16 into ints[i + 1]

  0x000000010cf740f4:   ldr		w14, [x13, #0x20]   ;*invokestatic floatToRawIntBits {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@13 (line 10)
                                                  <-- loads another 32-bit float into w14

  0x000000010cf740f8:   str		w0, [x12, #0x1c]    ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
                                                  <-- stores w0 into ints[i + 2]

  0x000000010cf740fc:   ldr		w5, [x13, #0x24]    ;*invokestatic floatToRawIntBits {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@13 (line 10)
                                                  <-- loads another 32-bit float into w5

  0x000000010cf74100:   str		w14, [x12, #0x20]   ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
                                                  <-- stores w14 into ints[i + 3]

 ;; merged ldr pair
  0x000000010cf74104:   ldp		w16, w14, [x13, #0x28];*invokestatic floatToRawIntBits {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@13 (line 10)
                                                  <-- loads 2 more floats into w16 and w14

 ;; merged str pair
  0x000000010cf74108:   stp		w5, w16, [x12, #0x24];*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
                                                  <-- stores two values at once into ints using store pair (stp)

  0x000000010cf7410c:   add		w4, w4, #8          ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@23 (line 7)
                                                  <-- increments i by 8 instead of 1

  0x000000010cf74110:   str		w14, [x12, #0x2c]   ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)

  0x000000010cf74114:   cmp		w4, w11             <-- compares w4 (current index) with w11 (array length)

  0x000000010cf74118:   b.lt		0x10cf740d0         ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@5 (line 7)
                                                    <-- if i < length, loop continues jumping back to the start
 ;; B15: #	out( B13 B16 ) <- in( B14 )  Freq: 10241.4
#+end_src
#+begin_src java
     2
     3	public class Test
     4	{
     5	    static void test(int[] ints, float[] floats)
     6	    {
     7	        for (int i = 0; i < ints.length; i++)
     8	        {
     9	            final float aFloat = floats[i];
    10	            final int bits = Float.floatToRawIntBits(aFloat);
    11	            ints[i] = bits;
    12	        }
    13	    }
    14
    15	    public static void main(String[] args)
    16	    {
    17	        final int[] ints = new int[10_000];
    18	        final float[] floats = new float[10_000];
    19	        init(ints);
    20
    21	        for (int i = 0; i < 100_000; i++)
    22	        {
    23	            test(ints, floats);
    24	        }
    25	    }
    26
    27	    static void init(int[] ints) {
    28	        final ThreadLocalRandom rand = ThreadLocalRandom.current();
    29	        for (int i = 0; i < ints.length; i++)
    30	        {
    31	            ints[i] = rand.nextInt();
    32	        }
    33	    }
    34	}
#+end_src
* 13.02.2025
** floatToRawIntBits macos
Fails with
#+begin_src bash
PackSet::print: 3 packs
 Pack: 0
    0:  617  LoadF  === 594 7 618  [[ 616 ]]  @float[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=5; #float (does not depend only on test, unknown control) !orig=527,235,[134] !jvms: Test::test @ bci:12 (line 9)
    1:  623  LoadF  === 594 7 624  [[ 622 ]]  @float[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=5; #float (does not depend only on test, unknown control) !orig=235,[134] !jvms: Test::test @ bci:12 (line 9)
    2:  527  LoadF  === 594 7 528  [[ 526 ]]  @float[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=5; #float (does not depend only on test, unknown control) !orig=235,[134] !jvms: Test::test @ bci:12 (line 9)
    3:  235  LoadF  === 594 7 132  [[ 135 ]]  @float[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=5; #float (does not depend only on test, unknown control) !orig=[134] !jvms: Test::test @ bci:12 (line 9)
 Pack: 1
    0:  616  MoveF2I  === _ 617  [[ 615 ]]  !orig=526,135 !jvms: Test::test @ bci:13 (line 9)
    1:  622  MoveF2I  === _ 623  [[ 614 ]]  !orig=135 !jvms: Test::test @ bci:13 (line 9)
    2:  526  MoveF2I  === _ 527  [[ 524 ]]  !orig=135 !jvms: Test::test @ bci:13 (line 9)
    3:  135  MoveF2I  === _ 235  [[ 156 ]]  !jvms: Test::test @ bci:13 (line 9)
 Pack: 2
    0:  615  StoreI  === 631 637 619 616  [[ 614 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=524,156,543 !jvms: Test::test @ bci:16 (line 9)
    1:  614  StoreI  === 631 615 620 622  [[ 524 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=156,543 !jvms: Test::test @ bci:16 (line 9)
    2:  524  StoreI  === 631 614 525 526  [[ 396 156 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=156,543 !jvms: Test::test @ bci:16 (line 9)
    3:  156  StoreI  === 631 524 154 135  [[ 637 394 159 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=543 !jvms: Test::test @ bci:16 (line 9)

WARNING: Removed pack: not implemented at any smaller size:
    0:  616  MoveF2I  === _ 617  [[ 615 ]]  !orig=526,135 !jvms: Test::test @ bci:13 (line 9)
    1:  622  MoveF2I  === _ 623  [[ 614 ]]  !orig=135 !jvms: Test::test @ bci:13 (line 9)
    2:  526  MoveF2I  === _ 527  [[ 524 ]]  !orig=135 !jvms: Test::test @ bci:13 (line 9)
    3:  135  MoveF2I  === _ 235  [[ 156 ]]  !jvms: Test::test @ bci:13 (line 9)

After SuperWord::split_packs_only_implemented_with_smaller_size
#+end_src
#+begin_src java
     1	import java.util.concurrent.ThreadLocalRandom;
     2
     3	public class Test
     4	{
     5	    static void test(int[] ints, float[] floats)
     6	    {
     7	        for (int i = 0; i < ints.length; i++)
     8	        {
     9	            final float aFloat = floats[i];
    10	            final int bits = Float.floatToRawIntBits(aFloat);
    11	            ints[i] = bits;
    12	        }
    13	    }
    14
    15	    public static void main(String[] args)
    16	    {
    17	        final int[] ints = new int[10_000];
    18	        final float[] floats = new float[10_000];
    19	        // init(ints);
    20
    21	        for (int i = 0; i < 100_000; i++)
    22	        {
    23	            test(ints, floats);
    24	        }
    25	    }
    34	}
#+end_src
You can see the unrolling and the assembly here:
#+begin_src asm
 ;; B14: #	out( B14 B15 ) <- in( B13 B14 ) Loop( B14-B14 inner main of N71 strip mined) Freq: 1.04898e+08
  0x000000010e5fc0d0:   sbfiz		x12, x4, #2, #0x20  ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
  0x000000010e5fc0d4:   add		x13, x2, x12
  0x000000010e5fc0d8:   ldr		s17, [x13, #0x10]   ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@10 (line 9)
  0x000000010e5fc0dc:   add		x12, x10, x12
  0x000000010e5fc0e0:   str		s17, [x12, #0x10]   ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
 ;; merged ldr pair
  0x000000010e5fc0e4:   ldp		w14, w16, [x13, #0x14];*invokestatic floatToRawIntBits {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@13 (line 10)
  0x000000010e5fc0e8:   str		w14, [x12, #0x14]   ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
  0x000000010e5fc0ec:   ldr		w0, [x13, #0x1c]    ;*invokestatic floatToRawIntBits {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@13 (line 10)
  0x000000010e5fc0f0:   str		w16, [x12, #0x18]   ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
  0x000000010e5fc0f4:   ldr		w14, [x13, #0x20]   ;*invokestatic floatToRawIntBits {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@13 (line 10)
  0x000000010e5fc0f8:   str		w0, [x12, #0x1c]    ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
  0x000000010e5fc0fc:   ldr		w5, [x13, #0x24]    ;*invokestatic floatToRawIntBits {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@13 (line 10)
  0x000000010e5fc100:   str		w14, [x12, #0x20]   ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
 ;; merged ldr pair
  0x000000010e5fc104:   ldp		w16, w14, [x13, #0x28];*invokestatic floatToRawIntBits {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@13 (line 10)
 ;; merged str pair
  0x000000010e5fc108:   stp		w5, w16, [x12, #0x24];*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
  0x000000010e5fc10c:   add		w4, w4, #8          ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@23 (line 7)
  0x000000010e5fc110:   str		w14, [x12, #0x2c]   ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
  0x000000010e5fc114:   cmp		w4, w11
  0x000000010e5fc118:   b.lt		0x10e5fc0d0         ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@5 (line 7)
 ;; B15: #	out( B13 B16 ) <- in( B14 )  Freq: 10241.4
#+end_src
* 29.01.2025
** floatToIntBits
floatToIntBits not vectorizing because of flow control:
#+begin_src java
public static int floatToIntBits(float value) {
    if (!isNaN(value)) {
        return floatToRawIntBits(value);
    }
    return 0x7fc00000;
}
#+end_src

#+begin_src bash
 336  AddI  === _ 651 188  [[ 651 337 460 345 ]]  !orig=[275],223 !jvms: Test::test @ bci:17 (line 7)
 337  CmpI  === _ 336 677  [[ 338 ]]  !orig=[150] !jvms: Test::test @ bci:5 (line 7)
 338  Bool  === _ 337  [[ 339 ]] [lt] !orig=[151] !jvms: Test::test @ bci:5 (line 7)

   7  Parm  === 3  [[ 171 149 318 25 29 32 33 37 262 106 413 95 16 208 268 176 444 350 619 ]] Memory  Memory: @BotPTR *+bot, idx=Bot; !orig=[89],[234],[128] !jvms: Test::test @ bci:2 (line 7)
 266  Bool  === _ 267  [[ 286 ]] [ne] !orig=196 !jvms: Test::test @ bci:13 (line 9)
 267  CmpF  === _ 268 268  [[ 266 ]]  !orig=195 !jvms: Test::test @ bci:13 (line 9)
 268  LoadF  === 472 7 269  [[ 265 267 267 ]]  @float[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #float !orig=192 !jvms: Test::test @ bci:12 (line 9)
 286  If  === 641 266  [[ 287 300 ]] P=0.900000, C=-1.000000 !orig=197 !jvms: Test::test @ bci:13 (line 9)
 287  IfFalse  === 286  [[ 288 ]] #0 !orig=200 !jvms: Test::test @ bci:13 (line 9)
 300  IfTrue  === 286  [[ 288 ]] #1 !orig=198 !jvms: Test::test @ bci:13 (line 9)

 288  Region  === 288 300 287  [[ 288 263 299 291 339 ]]  !orig=193 !jvms: Test::test @ bci:13 (line 9)
 339  CountedLoopEnd  === 288 338  [[ 660 153 ]] [lt] P=0.999902, C=112651.000000 !orig=[152] !jvms: Test::test @ bci:5 (line 7)
 634  CountedLoop  === 634 343 153  [[ 634 637 650 651 639 ]] inner stride: 2 main of N634 strip mined !orig=[344],[301],[261] !jvms: Test::test @ bci:12 (line 9)

VLoop::check_preconditions
    Loop: N634/N153  limit_check counted [int,int),+2 (10243 iters)  main rc  has_sfpt strip_mined
 634  CountedLoop  === 634 343 153  [[ 634 637 650 651 639 ]] inner stride: 2 main of N634 strip mined !orig=[344],[301],[261] !jvms: Test::test @ bci:12 (line 9)
VLoop::check_preconditions: fails because of control flow.
  cl_exit 339 339  CountedLoopEnd  === 288 338  [[ 660 153 ]] [lt] P=0.999902, C=112651.000000 !orig=[152] !jvms: Test::test @ bci:5 (line 7)
  cl_exit->in(0) 288 288  Region  === 288 300 287  [[ 288 263 299 291 339 ]]  !orig=193 !jvms: Test::test @ bci:13 (line 9)
  lpt->_head 634 634  CountedLoop  === 634 343 153  [[ 634 637 650 651 639 ]] inner stride: 2 main of N634 strip mined !orig=[344],[301],[261] !jvms: Test::test @ bci:12 (line 9)
    Loop: N634/N153  limit_check counted [int,int),+2 (10243 iters)  main rc  has_sfpt strip_mined
VLoop::check_preconditions: failed: control flow in loop not allowed
#+end_src
** stacktraces
#+begin_src bash
Compile::print_method(CompilerPhaseType, int, Node *) compile.cpp:5138
PhaseIdealLoop::do_unroll(IdealLoopTree *, Node_List &, bool) loopTransform.cpp:2019
IdealLoopTree::iteration_split_impl(PhaseIdealLoop *, Node_List &) loopTransform.cpp:3404
IdealLoopTree::iteration_split(PhaseIdealLoop *, Node_List &) loopTransform.cpp:3440
IdealLoopTree::iteration_split(PhaseIdealLoop *, Node_List &) loopTransform.cpp:3424
PhaseIdealLoop::build_and_optimize() loopnode.cpp:4918
PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN &, LoopOptsMode) loopnode.hpp:1113
PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN &, LoopOptsMode) loopnode.hpp:1111
PhaseIdealLoop::optimize(PhaseIterGVN &, LoopOptsMode) loopnode.hpp:1207
Compile::Optimize() compile.cpp:2395
Compile::Compile(ciEnv *, ciMethod *, int, Options, DirectiveSet *) compile.cpp:852
Compile::Compile(ciEnv *, ciMethod *, int, Options, DirectiveSet *) compile.cpp:686
C2Compiler::compile_method(ciEnv *, ciMethod *, int, bool, DirectiveSet *) c2compiler.cpp:142
CompileBroker::invoke_compiler_on_method(CompileTask *) compileBroker.cpp:2319
CompileBroker::compiler_thread_loop() compileBroker.cpp:1977
CompilerThread::thread_entry(JavaThread *, JavaThread *) compilerThread.cpp:68
JavaThread::thread_main_inner() javaThread.cpp:777
JavaThread::run() javaThread.cpp:762
Thread::call_run() thread.cpp:232
thread_native_entry(Thread *) os_bsd.cpp:612
#+end_src
* 28.01.2025
#+begin_src bash
   7  Parm  === 3  [[ 171 149 318 25 29 32 33 37 262 106 413 95 16 208 268 176 444 350 619 732 744 ]] Memory  Memory: @BotPTR *+bot, idx=Bot; !orig=[89],[234],[128] !jvms: Test::test @ bci:2 (line 7)
 199  ConI  === 0  [[ 299 373 436 642 ]]  #int:2143289344
 263  StoreI  === 288 621 264 299  |252  [[ 458 650 262 711 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=7;  Memory: @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=7; !orig=222 !jvms: Test::test @ bci:16 (line 9)
 265  MoveF2I  === _ 268  [[ 299 ]]  !orig=201 !jvms: Test::test @ bci:13 (line 9)
 266  Bool  === _ 267  [[ 286 ]] [ne] !orig=196 !jvms: Test::test @ bci:13 (line 9)
 267  CmpF  === _ 268 268  [[ 266 ]]  !orig=195 !jvms: Test::test @ bci:13 (line 9)
 268  LoadF  === 472 7 269  |257  [[ 265 267 267 ]]  @float[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #float !orig=192 !jvms: Test::test @ bci:12 (line 9)
 269  AddP  === _ 62 623 702  [[ 268 ]]  !orig=190 !jvms: Test::test @ bci:12 (line 9)
 286  If  === 641 266  [[ 287 300 ]] P=0.900000, C=-1.000000 !orig=197 !jvms: Test::test @ bci:13 (line 9)
 287  IfFalse  === 286  [[ 288 ]] #0 !orig=200 !jvms: Test::test @ bci:13 (line 9)
 288  Region  === 288 300 287  [[ 288 263 299 339 ]]  !orig=193 !jvms: Test::test @ bci:13 (line 9)
 299  Phi  === 288 199 265  [[ 263 ]]  #int !orig=194 !jvms: Test::test @ bci:13 (line 9)
 300  IfTrue  === 286  [[ 288 ]] #1 !orig=198 !jvms: Test::test @ bci:13 (line 9)
 339  CountedLoopEnd  === 288 725  [[ 660 153 ]] [lt] P=0.999902, C=112651.000000 !orig=[152] !jvms: Test::test @ bci:5 (line 7)
 472  IfTrue  === 471  [[ 268 761 619 ]] #1
#+end_src
