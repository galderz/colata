* 21.8.25
** dry run comparison
#+begin_src bash
Benchmark                                                             (COUNT)  (seed)   Mode  Cnt      Score   Error   Units
TypeVectorOperations.TypeVectorOperationsSuperWord.convertD2LBits         512       0  thrpt        4897.299          ops/ms (patch)
TypeVectorOperations.TypeVectorOperationsSuperWord.convertD2LBits         512       0  thrpt        4660.395          ops/ms (base)
#+end_src

#+begin_src bash
Benchmark                                                             (COUNT)  (seed)   Mode  Cnt      Base     Patch   Units   Diff
TypeVectorOperations.TypeVectorOperationsSuperWord.convertD2LBits         512       0  thrpt       4660.395  4897.299  ops/ms    +5%
#+end_src
* 20.8.25
x86:
#+begin_src bash
Test results: passed: 11; did not meet platform requirements: 1
#+end_src

aarch64:
#+begin_src bash
Test results: passed: 10; failed: 1; did not meet platform requirements: 1
#+end_src

failed aarch64:
#+begin_src bash
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/local/galder/src/jdk-fp-bits-vector/src/hotspot/cpu/aarch64/assembler_aarch64.hpp:3756), pid=111388, tid=111404
#  guarantee(false) failed: invalid immediate
#
# JRE version: OpenJDK Runtime Environment (26.0) (fastdebug build 26-internal-adhoc.ec2user.jdk-fp-bits-vector)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 26-internal-adhoc.ec2user.jdk-fp-bits-vector, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x485da4]  Assembler::sve_dup(FloatRegister, Assembler::SIMD_RegVariant, int)+0x124
#
# Core dump will be written. Default location: Core dumps may be processed with "/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h" (or dumping to /local/galder/src/jdk-fp-bits-vector/JTwork/scratch/core.111388)
#
Unsupported internal testing APIs have been used.

# An error report file with more information is saved as:
# /local/galder/src/jdk-fp-bits-vector/JTwork/scratch/hs_err_pid111388.log
#
# Compiler replay data is saved as:
# /local/galder/src/jdk-fp-bits-vector/JTwork/scratch/replay_pid111388.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
#+end_src
* 9.8.25
** reply to emanuel
I've done some testing on x86_64 and aarch64 and the tests pass.

I also made sure that the test output demonstrated execution of the expected IR rule as per the requirements of each platform.

- c7gn.2xlarge (graviton 3):

```bash
==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP
   jtreg:test/hotspot/jtreg/compiler/c2/irTests/ConvF2HFIdealizationTests.java
                                                         1     1     0     0     0
   jtreg:test/hotspot/jtreg/compiler/c2/irTests/TestFloat16ScalarOperations.java
                                                         1     1     0     0     0
   jtreg:test/hotspot/jtreg/compiler/loopopts/superword/TestCompatibleUseDefTypeSize.java
                                                         1     1     0     0     0
==============================
TEST SUCCESS

$ tail ConvF2HFIdealizationTests.jtr
Messages from Test VM
---------------------
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in test1: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true


----------System.err:(3/35)----------

JavaTest Message: Test complete.

result: Passed. Execution successful


test result: Passed. Execution successful

$ tail TestFloat16ScalarOperations.jtr
Messages from Test VM
---------------------
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testDivByPOT: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testMulByTWO: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testInexactFP16ConstantPatterns: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testSNaNFP16ConstantPatterns: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testQNaNFP16ConstantPatterns: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testExactFP16ConstantPatterns: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testRandomFP16ConstantPatternSet1: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testRandomFP16ConstantPatternSet2: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testRounding1: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testRounding2: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testMax: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testAddConstantFolding: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testDivConstantFolding: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testMin: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testMinConstantFolding: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testEliminateIntermediateHF2S: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testDivByOne: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testFMAConstantFolding: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testMaxConstantFolding: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testMul: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testconvF2HFAndS2HF: Feature constraint not met (applyIfCPUFeature): avx512_fp16, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testDiv: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testSqrtConstantFolding: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testSqrt: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testMulConstantFolding: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testFma: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testAdd1: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testAdd2: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testSubConstantFolding: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testSub: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true


----------System.err:(3/35)----------

JavaTest Message: Test complete.

result: Passed. Execution successful


test result: Passed. Execution successful
```

- `c7i.xlarge` Intel(R) Xeon(R) Platinum 8488C (saphire rapids):

```bash
==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP
   jtreg:test/hotspot/jtreg/compiler/c2/irTests/ConvF2HFIdealizationTests.java
                                                         1     1     0     0     0
   jtreg:test/hotspot/jtreg/compiler/c2/irTests/TestFloat16ScalarOperations.java
                                                         1     1     0     0     0
   jtreg:test/hotspot/jtreg/compiler/loopopts/superword/TestCompatibleUseDefTypeSize.java
                                                         1     1     0     0     0
==============================
TEST SUCCESS

$ tail ConvF2HFIdealizationTests.jtr
Messages from Test VM
---------------------
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in test1: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true


----------System.err:(3/35)----------

JavaTest Message: Test complete.

result: Passed. Execution successful


test result: Passed. Execution successful

$ tail TestFloat16ScalarOperations.jtr
Messages from Test VM
---------------------
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testDivByPOT: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testMulByTWO: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testInexactFP16ConstantPatterns: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testSNaNFP16ConstantPatterns: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testQNaNFP16ConstantPatterns: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testExactFP16ConstantPatterns: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testRandomFP16ConstantPatternSet1: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testRandomFP16ConstantPatternSet2: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testRounding1: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testRounding2: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testMax: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testAddConstantFolding: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testDivConstantFolding: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testMin: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testMinConstantFolding: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testEliminateIntermediateHF2S: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testDivByOne: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testFMAConstantFolding: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testMaxConstantFolding: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testMul: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testconvF2HFAndS2HF: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testDiv: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testSqrtConstantFolding: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testSqrt: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testMulConstantFolding: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testFma: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testAdd1: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testAdd2: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testSubConstantFolding: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testSub: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true


----------System.err:(3/35)----------

JavaTest Message: Test complete.

result: Passed. Execution successful


test result: Passed. Execution successful
```
* 8.8.25
** aws-2 intel v0
*** results
#+begin_src bash
$ cat /home/ec2-user/src/jdk-fp-bits-vector/build/fast-linux-x86_64/test-support/jtreg_test_hotspot_jtreg_compiler_c2_irTests_ConvF2HFIdealizationTests_java/compiler/c2/irTests/ConvF2HFIdealizationTests.jtr
Messages from Test VM
---------------------
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in test1: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true


----------System.err:(3/35)----------

JavaTest Message: Test complete.

result: Passed. Execution successful


test result: Passed. Execution successful

#+end_src

#+begin_src bash
$ cat /home/ec2-user/src/jdk-fp-bits-vector/build/fast-linux-x86_64/test-support/jtreg_test_hotspot_jtreg_compiler_c2_irTests_TestFloat16ScalarOperations_java/compiler/c2/irTests/TestFloat16ScalarOperations.jtr

Messages from Test VM
---------------------
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testDivByPOT: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testMulByTWO: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testInexactFP16ConstantPatterns: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testSNaNFP16ConstantPatterns: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testQNaNFP16ConstantPatterns: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testExactFP16ConstantPatterns: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testRandomFP16ConstantPatternSet1: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testRandomFP16ConstantPatternSet2: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testRounding1: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testRounding2: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testMax: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testAddConstantFolding: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testDivConstantFolding: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testMin: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testMinConstantFolding: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testEliminateIntermediateHF2S: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testDivByOne: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testFMAConstantFolding: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testMaxConstantFolding: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testMul: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testconvF2HFAndS2HF: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testDiv: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testSqrtConstantFolding: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testSqrt: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testMulConstantFolding: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testFma: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testAdd1: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testAdd2: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testSubConstantFolding: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true
[IREncodingPrinter] Disabling IR matching for rule 2 of 2 in testSub: Not all feature constraints are met (applyIfCPUFeatureAnd): fphp, true, asimdhp, true


----------System.err:(3/35)----------

JavaTest Message: Test complete.

result: Passed. Execution successful


test result: Passed. Execution successful
#+end_src
#+begin_src bash
==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP   
   jtreg:test/hotspot/jtreg/compiler/c2/irTests/ConvF2HFIdealizationTests.java
                                                         1     1     0     0     0   
   jtreg:test/hotspot/jtreg/compiler/c2/irTests/TestFloat16ScalarOperations.java
                                                         1     1     0     0     0   
   jtreg:test/hotspot/jtreg/compiler/loopopts/superword/TestCompatibleUseDefTypeSize.java
                                                         1     1     0     0     0   
==============================
TEST SUCCESS
#+end_src
*** environment
#+begin_src bash
[ec2-user@ip-172-31-36-29 fp-bits-vector-8329077]$ uname -a
Linux ip-172-31-36-29.ec2.internal 6.1.147-172.266.amzn2023.x86_64 #1 SMP PREEMPT_DYNAMIC Thu Aug  7 19:30:40 UTC 2025 x86_64 x86_64 x86_64 GNU/Linux
[ec2-user@ip-172-31-36-29 fp-bits-vector-8329077]$ lscpu
Architecture:                x86_64
  CPU op-mode(s):            32-bit, 64-bit
  Address sizes:             46 bits physical, 48 bits virtual
  Byte Order:                Little Endian
CPU(s):                      4
  On-line CPU(s) list:       0-3
Vendor ID:                   GenuineIntel
  Model name:                Intel(R) Xeon(R) Platinum 8488C
    CPU family:              6
    Model:                   143
    Thread(s) per core:      2
    Core(s) per socket:      2
    Socket(s):               1
    Stepping:                8
    BogoMIPS:                4800.00
    Flags:                   fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon rep_good nopl xtopology nonstop_tsc cpuid
                             aperfmperf tsc_known_freq pni pclmulqdq monitor ssse3 fma cx16 pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch cpuid_fault
                             invpcid_single ssbd ibrs ibpb stibp ibrs_enhanced fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb avx512cd sha_ni avx512bw avx512vl xsav
                             eopt xsavec xgetbv1 xsaves avx_vnni avx512_bf16 wbnoinvd ida arat avx512vbmi umip pku ospke waitpkg avx512_vbmi2 gfni vaes vpclmulqdq avx512_vnni avx512_bitalg tme avx512_vpopcntdq rdpid cldemote movdi
                             ri movdir64b md_clear serialize amx_bf16 avx512_fp16 amx_tile amx_int8 flush_l1d arch_capabilities
Virtualization features:
  Hypervisor vendor:         KVM
  Virtualization type:       full
Caches (sum of all):
  L1d:                       96 KiB (2 instances)
  L1i:                       64 KiB (2 instances)
  L2:                        4 MiB (2 instances)
  L3:                        105 MiB (1 instance)
NUMA:
  NUMA node(s):              1
  NUMA node0 CPU(s):         0-3
Vulnerabilities:
  Gather data sampling:      Not affected
  Indirect target selection: Not affected
  Itlb multihit:             Not affected
  L1tf:                      Not affected
  Mds:                       Not affected
  Meltdown:                  Not affected
  Mmio stale data:           Not affected
  Reg file data sampling:    Not affected
  Retbleed:                  Not affected
  Spec rstack overflow:      Not affected
  Spec store bypass:         Mitigation; Speculative Store Bypass disabled via prctl
  Spectre v1:                Mitigation; usercopy/swapgs barriers and __user pointer sanitization
  Spectre v2:                Mitigation; Enhanced / Automatic IBRS; IBPB conditional; PBRSB-eIBRS SW sequence; BHI BHI_DIS_S
  Srbds:                     Not affected
  Tsa:                       Not affected
  Tsx async abort:           Not affected
#+end_src
** aws-1 arm v1
#+begin_src bash
==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP
   jtreg:test/hotspot/jtreg/compiler/c2/irTests/ConvF2HFIdealizationTests.java
                                                         1     1     0     0     0
   jtreg:test/hotspot/jtreg/compiler/c2/irTests/TestFloat16ScalarOperations.java
                                                         1     1     0     0     0
   jtreg:test/hotspot/jtreg/compiler/loopopts/superword/TestCompatibleUseDefTypeSize.java
                                                         1     1     0     0     0
==============================
TEST SUCCESS
#+end_src

#+begin_src bash
$ cat /local/galder/src/jdk-fp-bits-vector/build/fast-linux-aarch64/test-support/jtreg_test_hotspot_jtreg_compiler_c2_irTests_ConvF2HFIdealizationTests_java/compiler/c2/irTests/ConvF2HFIdealizationTests.jtr

Messages from Test VM
---------------------
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in test1: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true


----------System.err:(3/35)----------

JavaTest Message: Test complete.

result: Passed. Execution successful


test result: Passed. Execution successful
#+end_src

#+begin_src bash
  $ cat /local/galder/src/jdk-fp-bits-vector/build/fast-linux-aarch64/test-support/jtreg_test_hotspot_jtreg_compiler_c2_irTests_TestFloat16ScalarOperations_java/compiler/c2/irTests/TestFloat16ScalarOperations.jtr
  

  Messages from Test VM
  ---------------------
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testDivByPOT: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testMulByTWO: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testInexactFP16ConstantPatterns: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testSNaNFP16ConstantPatterns: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testQNaNFP16ConstantPatterns: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testExactFP16ConstantPatterns: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testRandomFP16ConstantPatternSet1: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testRandomFP16ConstantPatternSet2: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testRounding1: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testRounding2: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testMax: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testAddConstantFolding: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testDivConstantFolding: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testMin: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testMinConstantFolding: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testEliminateIntermediateHF2S: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testDivByOne: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testFMAConstantFolding: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testMaxConstantFolding: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testMul: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testconvF2HFAndS2HF: Feature constraint not met (applyIfCPUFeature): avx512_fp16, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testDiv: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testSqrtConstantFolding: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testSqrt: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testMulConstantFolding: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testFma: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testAdd1: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testAdd2: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testSubConstantFolding: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true
  [IREncodingPrinter] Disabling IR matching for rule 1 of 2 in testSub: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true


  ----------System.err:(3/35)----------

  JavaTest Message: Test complete.

  result: Passed. Execution successful


  test result: Passed. Execution successful
#+end_src
** aws-1 arm v0
#+begin_src bash
Test selection 'test/hotspot/jtreg/compiler/c2/irTests/ConvF2HFIdealizationTests.java', will run:
- jtreg:test/hotspot/jtreg/compiler/c2/irTests/ConvF2HFIdealizationTests.java
Clean up dirs for jtreg_test_hotspot_jtreg_compiler_c2_irTests_ConvF2HFIdealizationTests_java

Running test 'jtreg:test/hotspot/jtreg/compiler/c2/irTests/ConvF2HFIdealizationTests.java'
Passed: compiler/c2/irTests/ConvF2HFIdealizationTests.java
Test results: passed: 1
Report written to /local/galder/src/jdk-fp-bits-vector/build/fast-linux-aarch64/test-results/jtreg_test_hotspot_jtreg_compiler_c2_irTests_ConvF2HFIdealizationTests_java/html/report.html
Results written to /local/galder/src/jdk-fp-bits-vector/build/fast-linux-aarch64/test-support/jtreg_test_hotspot_jtreg_compiler_c2_irTests_ConvF2HFIdealizationTests_java
Finished running test 'jtreg:test/hotspot/jtreg/compiler/c2/irTests/ConvF2HFIdealizationTests.java'
Test report is stored in build/fast-linux-aarch64/test-results/jtreg_test_hotspot_jtreg_compiler_c2_irTests_ConvF2HFIdealizationTests_java

==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP
   jtreg:test/hotspot/jtreg/compiler/c2/irTests/ConvF2HFIdealizationTests.java
                                                         1     1     0     0     0
==============================
TEST SUCCESS
#+end_src

#+begin_src bash
Messages from Test VM
---------------------
[IREncodingPrinter] Disabling IR matching for rule 1 of 2 in test1: None of the feature constraints met (applyIfCPUFeatureOr): avx512_fp16, true, zfh, true


----------System.err:(3/35)----------

JavaTest Message: Test complete.

result: Passed. Execution successful


test result: Passed. Execution successful
#+end_src
* 5.8.25
tier1-3 testing:
#+begin_src bash
==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP
>> jtreg:test/hotspot/jtreg:tier1                     3032  2874     1     0   157 <<
   jtreg:test/jdk:tier1                               2507  2469     0     0    38
   jtreg:test/langtools:tier1                         4664  4655     0     0     9
   jtreg:test/jaxp:tier1                                 0     0     0     0     0
   jtreg:test/lib-test:tier1                            38    38     0     0     0
   jtreg:test/hotspot/jtreg:tier2                      948   926     0     0    22
>> jtreg:test/jdk:tier2                               4321  4079     8     4   230 <<
   jtreg:test/langtools:tier2                           14    12     0     0     2
   jtreg:test/jaxp:tier2                               517   516     0     0     1
   jtreg:test/docs:tier2                                 4     0     0     0     4
   jtreg:test/hotspot/jtreg:tier3                      296   270     0     0    26
>> jtreg:test/jdk:tier3                               1573  1463     3     0   107 <<
   jtreg:test/langtools:tier3                            0     0     0     0     0
   jtreg:test/jaxp:tier3                                 0     0     0     0     0
============
#+end_src

#+begin_src bash
 895  LoadVector  === 519 7 775  [[ 896 ]]  @double[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=5; mismatched #vectorx<D,2> (does not depend only on test, unknown control) !orig=[774],[565],[249],[146] !jvms: DoubleToRawLongBits::test @ bci:10 (line 15)
 896  VectorCastD2X  === _ 895  [[ 897 ]]  #vectorx<J,2> !orig=[773],[564],[147] !jvms: DoubleToRawLongBits::test @ bci:13 (line 16)
 897  StoreVector  === 794 797 771 896  [[ 900 ]]  @long[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; mismatched  Memory: @long[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=[761],[562],[168],581 !jvms: DoubleToRawLongBits::test @ bci:22 (line 17)
#+end_src
* 24.7.25
** PR Draft
I'm adding support to vectorize `MoveD2L`, `MoveL2D`, `MoveF2I` and `MoveI2F` nodes.
The implementation follows a similar pattern to what is done with conversion (`Conv*`) nodes.
The tests in `TestCompatibleUseDefTypeSize` have been updated with the new expectations.

I've added a JMH benchmark which measures throughput (the higher the number the better) for methods that exercise these nodes.
On darwin/aarch64 it shows:

```bash
Benchmark                                (seed)  (size)   Mode  Cnt      Base      Patch   Units   Diff
VectorBitConversion.doubleToLongBits          0    2048  thrpt    8  1168.782   1157.717  ops/ms    -1%
VectorBitConversion.doubleToRawLongBits       0    2048  thrpt    8  3999.387   7353.936  ops/ms   +83%
VectorBitConversion.floatToIntBits            0    2048  thrpt    8  1200.338   1188.206  ops/ms    -1%
VectorBitConversion.floatToRawIntBits         0    2048  thrpt    8  4058.248  14792.474  ops/ms  +264%
VectorBitConversion.intBitsToFloat            0    2048  thrpt    8  3050.313  14984.246  ops/ms  +391%
VectorBitConversion.longBitsToDouble          0    2048  thrpt    8  3022.691   7379.360  ops/ms  +144%
```

The improvements observed are a result of vectorization.
The lack of vectorization in `doubleToLongBits` and `floatToIntBits` demonstrates that these changes do not affect their performance.
These methods do not vectorize because of flow control.

I've run the tier1-3 tests on linux/aarch64 and didn't observe any regressions.
* 22.7.25
completed all fp to bits vector and opposite conversions.
** tier1-3 test
#+begin_src bash
==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP
>> jtreg:test/hotspot/jtreg:tier1                     3032  2861     2     0   169 <<
   jtreg:test/jdk:tier1                               2507  2467     0     0    40
   jtreg:test/langtools:tier1                         4664  4655     0     0     9
   jtreg:test/jaxp:tier1                                 0     0     0     0     0
   jtreg:test/lib-test:tier1                            38    38     0     0     0
>> jtreg:test/hotspot/jtreg:tier2                      948   924     1     0    23 <<
>> jtreg:test/jdk:tier2                               4321  4076    11     4   230 <<
   jtreg:test/langtools:tier2                           14    12     0     0     2
   jtreg:test/jaxp:tier2                               517   516     0     0     1
   jtreg:test/docs:tier2                                 4     0     0     0     4
   jtreg:test/hotspot/jtreg:tier3                      296   275     0     0    21
>> jtreg:test/jdk:tier3                               1573  1459    33     0    81 <<
   jtreg:test/langtools:tier3                            0     0     0     0     0
   jtreg:test/jaxp:tier3                                 0     0     0     0     0
==============================
TEST FAILURE
#+end_src
** benchmark
*** base
#+begin_src bash
Benchmark                                (seed)  (size)   Mode  Cnt     Score    Error   Units
VectorBitConversion.doubleToLongBits          0    2048  thrpt    8  1168.782 ± 22.712  ops/ms
VectorBitConversion.doubleToRawLongBits       0    2048  thrpt    8  3999.387 ± 36.566  ops/ms
VectorBitConversion.floatToIntBits            0    2048  thrpt    8  1200.338 ±  6.618  ops/ms
VectorBitConversion.floatToRawIntBits         0    2048  thrpt    8  4058.248 ±  8.954  ops/ms
VectorBitConversion.intBitsToFloat            0    2048  thrpt    8  3050.313 ±  7.365  ops/ms
VectorBitConversion.longBitsToDouble          0    2048  thrpt    8  3022.691 ± 14.033  ops/ms
#+end_src
*** patch
#+begin_src bash
Benchmark                                (seed)  (size)   Mode  Cnt      Score     Error   Units
VectorBitConversion.doubleToLongBits          0    2048  thrpt    8   1157.717 ±  31.740  ops/ms
VectorBitConversion.doubleToRawLongBits       0    2048  thrpt    8   7353.936 ±  23.644  ops/ms
VectorBitConversion.floatToIntBits            0    2048  thrpt    8   1188.206 ±   9.352  ops/ms
VectorBitConversion.floatToRawIntBits         0    2048  thrpt    8  14792.474 ± 163.612  ops/ms
VectorBitConversion.intBitsToFloat            0    2048  thrpt    8  14984.246 ± 115.817  ops/ms
VectorBitConversion.longBitsToDouble          0    2048  thrpt    8   7379.360 ±  18.623  ops/ms
#+end_src
** hotspot compiler tests
hotspot compiler results:
#+begin_src bash
==============================
Test summary
==============================
   TEST                                              TOTAL  PASS  FAIL ERROR  SKIP
>> jtreg:test/hotspot/jtreg:hotspot_compiler          2015  1905     1     0   109 <<
==============================
#+end_src

Failure:
#+begin_src bash
compiler/loopopts/superword/TestCompatibleUseDefTypeSize.java: Test some cases that vectorize after the removal of the alignment boundaries code.
#+end_src

E.g.
#+begin_src bash
1) Method "static java.lang.Object[] compiler.loopopts.superword.TestCompatibleUseDefTypeSize.test10(long[],double[])" - [Failed IR rules: 1]:
   * @IR rule 1: "@compiler.lib.ir_framework.IR(phase={DEFAULT}, applyIfPlatformAnd={}, applyIfCPUFeatureOr={"sse4.1", "true", "asimd", "true", "rvv", "true"}, counts={"_#STORE_VECTOR#_", "= 0"}, failOn={}, applyIfPlatform={"64-bit", "true"}, applyIfPlatformOr={}, applyIfOr={}, applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeature={}, applyIfAnd={}, applyIfNot={})"
     > Phase "PrintIdeal":
       - counts: Graph contains wrong number of nodes:
         * Constraint 1: "(\\d+(\\s){2}(StoreVector.*)+(\\s){2}===.*)"
           - Failed comparison: [found] 8 = 0 [given]
             - Matched nodes (8):
               * 968  StoreVector  === 1020 987 846 967  |320  [[ 971 ]]  @double[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; mismatched  Memory: @double[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; !orig=[832],[635],[168],654 !jvms: TestCompatibleUseDefTypeSize::test10 @ bci:16 (line 461)
               * 971  StoreVector  === 1020 968 838 970  |320  [[ 974 ]]  @double[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; mismatched  Memory: @double[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; !orig=[834],[727],[635],[168],654 !jvms: TestCompatibleUseDefTypeSize::test10 @ bci:16 (line 461)
               * 974  StoreVector  === 1020 971 639 973  |320  [[ 977 ]]  @double[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; mismatched  Memory: @double[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; !orig=[635],[168],654 !jvms: TestCompatibleUseDefTypeSize::test10 @ bci:16 (line 461)
               * 977  StoreVector  === 1020 974 728 976  |320  [[ 1021 171 529 1117 ]]  @double[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; mismatched  Memory: @double[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; !orig=[727],[635],[168],654 !jvms: TestCompatibleUseDefTypeSize::test10 @ bci:16 (line 461)
               * 987  StoreVector  === 1020 988 1016 1012  |320  [[ 968 ]]  @double[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; mismatched  Memory: @double[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; !orig=977,[727],[635],[168],654 !jvms: TestCompatibleUseDefTypeSize::test10 @ bci:16 (line 461)
               * 988  StoreVector  === 1020 989 997 999  |320  [[ 987 ]]  @double[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; mismatched  Memory: @double[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; !orig=974,[635],[168],654 !jvms: TestCompatibleUseDefTypeSize::test10 @ bci:16 (line 461)
               * 989  StoreVector  === 1020 1004 993 990  |320  [[ 988 ]]  @double[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; mismatched  Memory: @double[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; !orig=971,[834],[727],[635],[168],654 !jvms: TestCompatibleUseDefTypeSize::test10 @ bci:16 (line 461)
               * 1004  StoreVector  === 1020 1021 1009 1005  |320  [[ 989 ]]  @double[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; mismatched  Memory: @double[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; !orig=968,[832],[635],[168],654 !jvms: TestCompatibleUseDefTypeSize::test10 @ bci:16 (line 461)
#+end_src
* 9.7.25
Run compiler tests
#+begin_src bash
>> jtreg:test/hotspot/jtreg:hotspot_compiler          1989  1888     1     0   100 <<
#+end_src

The failure above is:
compiler/loopopts/superword/TestCompatibleUseDefTypeSize.java: Test some cases that vectorize after the removal of the alignment boundaries code.

However, I would expect ~TestFPConversion~ to fail.
Why doesn't it fail?
Because that test focuses on single invocation,
  we need to invoke it in a loop.

I've created an IR test but for ~doubleToRawLongBits~ MoveD2L is not appearing.
Instead you're getting LoadL, why the difference?

In Test:
#+begin_src bash
MoveD2LNode::MoveD2LNode(Node *) movenode.hpp:146
LibraryCallKit::inline_fp_conversions(vmIntrinsicID) library_call.cpp:4924
LibraryCallKit::try_to_inline(int) library_call.cpp:531
LibraryIntrinsic::generate(JVMState *) library_call.cpp:119
Parse::do_call() doCall.cpp:677
Parse::do_one_bytecode() parse2.cpp:2723
Parse::do_one_block() parse1.cpp:1586
Parse::do_all_blocks() parse1.cpp:724
Parse::Parse(JVMState *, ciMethod *, float) parse1.cpp:628
Parse::Parse(JVMState *, ciMethod *, float) parse1.cpp:404
ParseGenerator::generate(JVMState *) callGenerator.cpp:97
Compile::Compile(ciEnv *, ciMethod *, int, Options, DirectiveSet *) compile.cpp:813
Compile::Compile(ciEnv *, ciMethod *, int, Options, DirectiveSet *) compile.cpp:702
C2Compiler::compile_method(ciEnv *, ciMethod *, int, bool, DirectiveSet *) c2compiler.cpp:141
CompileBroker::invoke_compiler_on_method(CompileTask *) compileBroker.cpp:2323
CompileBroker::compiler_thread_loop() compileBroker.cpp:1967
CompilerThread::thread_entry(JavaThread *, JavaThread *) compilerThread.cpp:67
JavaThread::thread_main_inner() javaThread.cpp:772
JavaThread::run() javaThread.cpp:757
Thread::call_run() thread.cpp:243
thread_native_entry(Thread *) os_bsd.cpp:598
#+end_src

LoadL also used in Test, but that only appears in PrintIdeal.
With BEFORE_LOOP_UNROLLING print ideal phase we see MoveD2L

Stacktrace for BEFORE_LOOP_UNROLLING:
#+begin_src bash
PhaseIdealLoop::do_unroll(IdealLoopTree *, Node_List &, bool) loopTransform.cpp:1846
IdealLoopTree::iteration_split_impl(PhaseIdealLoop *, Node_List &) loopTransform.cpp:3504
IdealLoopTree::iteration_split(PhaseIdealLoop *, Node_List &) loopTransform.cpp:3540
IdealLoopTree::iteration_split(PhaseIdealLoop *, Node_List &) loopTransform.cpp:3524
PhaseIdealLoop::build_and_optimize() loopnode.cpp:4893
PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN &, LoopOptsMode) loopnode.hpp:1169
PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN &, LoopOptsMode) loopnode.hpp:1167
PhaseIdealLoop::optimize(PhaseIterGVN &, LoopOptsMode) loopnode.hpp:1263
Compile::Optimize() compile.cpp:2476
Compile::Compile(ciEnv *, ciMethod *, int, Options, DirectiveSet *) compile.cpp:868
Compile::Compile(ciEnv *, ciMethod *, int, Options, DirectiveSet *) compile.cpp:702
C2Compiler::compile_method(ciEnv *, ciMethod *, int, bool, DirectiveSet *) c2compiler.cpp:141
CompileBroker::invoke_compiler_on_method(CompileTask *) compileBroker.cpp:2323
CompileBroker::compiler_thread_loop() compileBroker.cpp:1967
CompilerThread::thread_entry(JavaThread *, JavaThread *) compilerThread.cpp:67
JavaThread::thread_main_inner() javaThread.cpp:772
JavaThread::run() javaThread.cpp:757
Thread::call_run() thread.cpp:243
thread_native_entry(Thread *) os_bsd.cpp:598
#+end_src
* 8.7.25
Run tier1 tests. Some failures observed.
~test/hotspot/jtreg/compiler/loopopts/superword/TestCompatibleUseDefTypeSize.java~ failure could be related.

Benchmark results:
Base:
#+begin_src bash
Benchmark                                (seed)  (size)   Mode  Cnt     Score    Error   Units
VectorBitConversion.doubleToLongBits          0    2048  thrpt    8  1163.571 ± 15.828  ops/ms
VectorBitConversion.doubleToRawLongBits       0    2048  thrpt    8  3997.135 ± 10.972  ops/ms
VectorBitConversion.floatToIntBits            0    2048  thrpt    8  1182.669 ± 12.905  ops/ms
VectorBitConversion.floatToRawIntBits         0    2048  thrpt    8  4030.967 ± 11.085  ops/ms
#+end_src
Patch:
#+begin_src bash
Benchmark                                (seed)  (size)   Mode  Cnt      Score    Error   Units
VectorBitConversion.doubleToLongBits          0    2048  thrpt    8   1147.745 ± 10.558  ops/ms
VectorBitConversion.doubleToRawLongBits       0    2048  thrpt    8   7330.845 ± 74.741  ops/ms
VectorBitConversion.floatToIntBits            0    2048  thrpt    8   1132.290 ± 23.240  ops/ms
VectorBitConversion.floatToRawIntBits         0    2048  thrpt    8  14865.457 ± 75.184  ops/ms
#+end_src

After changes, output:
#+begin_src bash
 155  loadV16  === 210 13 150  [[ 128 ]] #80/0x0000000000000050vectorx<D,2> !jvms: Test::test @ bci:10 (line 15)
 130  reinterpret_same_size  === _ 154  [[ 129 ]] vectorx<D,2>
 129  storeV16  === 103 131 147 130  [[ 127 ]] #96/0x0000000000000060memory  Memory: @long[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; !jvms: Test::test @ bci:22 (line 17)
#+end_src

After changes, ideal:
#+begin_src bash
 895  LoadVector  === 519 7 775  [[ 896 ]]  @double[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=5; mismatched #vectorx<D,2> (does not depend only on test, unknown control) !orig=[774],[565],[249],[146] !jvms: Test::test @ bci:10 (line 15)
 896  VectorReinterpret  === _ 895  [[ 897 ]]  #vectorx<D,2> !orig=[773],[564],[147] !jvms: Test::test @ bci:13 (line 16)
 897  StoreVector  === 794 797 771 896  [[ 900 ]]  @long[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; mismatched  Memory: @long[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=[761],[562],[168],581 !jvms: Test::test @ bci:22 (line 17)
#+end_src

Without changes:
#+begin_src bash
 661  MoveD2L  === _ 662  [[ 655 ]]  !orig=147 !jvms: Test::test @ bci:13 (line 16)
#+end_src
* 4.7.25
Run a benchmark but no observable differences with base.
Performance is the same and the assembly looks about right.
The issue was with the use of ~Float~ instead of ~float~.
After fixing it:

#+begin_src bash
Benchmark                              (seed)  (size)   Mode  Cnt      Score    Error   Units
VectorBitConversion.floatToRawIntBits       0    2048  thrpt    8  14894.760 ± 57.778  ops/ms (patch)
VectorBitConversion.floatToRawIntBits       0    2048  thrpt    8   3978.344 ± 21.353  ops/ms (base)
#+end_src
* 1.7.25
Stacktrace to vector transform float to integer (F2I)
#+begin_src bash
VectorCastNode::opcode(int, BasicType, bool) vectornode.cpp:1567
VectorCastNode::implemented(int, unsigned int, BasicType, BasicType) vectornode.cpp:1577
SuperWord::implemented(const Node_List *, unsigned int) const superword.cpp:1634
SuperWord::max_implemented_size(const Node_List *) superword.cpp:1661
$_0::operator()(const Node_List *) const superword.cpp:1392
PackSet::split_packs<…>(const char *, $_0) superword.cpp:1346
SuperWord::split_packs_only_implemented_with_smaller_size() superword.cpp:1402
SuperWord::SLP_extract() superword.cpp:485
SuperWord::transform_loop() superword.cpp:413
PhaseIdealLoop::auto_vectorize(IdealLoopTree *, VSharedData &) loopopts.cpp:4457
PhaseIdealLoop::build_and_optimize() loopnode.cpp:4934
PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN &, LoopOptsMode) loopnode.hpp:1169
PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN &, LoopOptsMode) loopnode.hpp:1167
PhaseIdealLoop::optimize(PhaseIterGVN &, LoopOptsMode) loopnode.hpp:1263
Compile::optimize_loops(PhaseIterGVN &, LoopOptsMode) compile.cpp:2262
Compile::Optimize() compile.cpp:2511
Compile::Compile(ciEnv *, ciMethod *, int, Options, DirectiveSet *) compile.cpp:868
Compile::Compile(ciEnv *, ciMethod *, int, Options, DirectiveSet *) compile.cpp:702
C2Compiler::compile_method(ciEnv *, ciMethod *, int, bool, DirectiveSet *) c2compiler.cpp:141
CompileBroker::invoke_compiler_on_method(CompileTask *) compileBroker.cpp:2323
CompileBroker::compiler_thread_loop() compileBroker.cpp:1967
CompilerThread::thread_entry(JavaThread *, JavaThread *) compilerThread.cpp:67
JavaThread::thread_main_inner() javaThread.cpp:772
JavaThread::run() javaThread.cpp:757
Thread::call_run() thread.cpp:243
thread_native_entry(Thread *) os_bsd.cpp:598
#+end_src
* 17.2.25
** floatToRawIntBits macos
Continue exploration in macos to understand assembly.
#+begin_src asm
 ;; B14: #	out( B14 B15 ) <- in( B13 B14 ) Loop( B14-B14 inner main of N71 strip mined) Freq: 1.04898e+08
  0x000000010cf740d0:   sbfiz		x12, x4, #2, #0x20  ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
                                                    <-- x12 = i * 4 calculates the memory offset of the i-th element in arrays

  0x000000010cf740d4:   add		x13, x2, x12        <-- x12 holds the base address of the floats
                                                  <-- adds x12 to x2, resulting in x13 pointing to floats[i]

  0x000000010cf740d8:   ldr		s17, [x13, #0x10]   ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@10 (line 9)
                                                  <-- loads a single precision float (s17) from floats[i]
                                                  <-- #0x10 offset means it is reading from x13 + 16 (could be unrolled loop behavior)

  0x000000010cf740dc:   add		x12, x10, x12       <-- x10 holds the base address of ints
                                                  <-- x12 (byte offset) is added to x10 computing ints[i] address

  0x000000010cf740e0:   str		s17, [x12, #0x10]   ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
                                                  <-- stores the float value as is into memory

 ;; merged ldr pair
  0x000000010cf740e4:   ldp		w14, w16, [x13, #0x14];*invokestatic floatToRawIntBits {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@13 (line 10)
                                                    <-- load pair (ldp) loads 2 consecutive 32-bit words (interpreted as floats)
                                                    <-- these get converted into int representations
                                                    <-- they're already in IEEE 754 bit format

  0x000000010cf740e8:   str		w14, [x12, #0x14]   ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
                                                  <-- stores w14 into (first float's bit representation) into ints[i]

  0x000000010cf740ec:   ldr		w0, [x13, #0x1c]    ;*invokestatic floatToRawIntBits {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@13 (line 10)
                                                  <-- loads another 32-bit float into w0

  0x000000010cf740f0:   str		w16, [x12, #0x18]   ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
                                                  <-- stores w16 into ints[i + 1]

  0x000000010cf740f4:   ldr		w14, [x13, #0x20]   ;*invokestatic floatToRawIntBits {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@13 (line 10)
                                                  <-- loads another 32-bit float into w14

  0x000000010cf740f8:   str		w0, [x12, #0x1c]    ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
                                                  <-- stores w0 into ints[i + 2]

  0x000000010cf740fc:   ldr		w5, [x13, #0x24]    ;*invokestatic floatToRawIntBits {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@13 (line 10)
                                                  <-- loads another 32-bit float into w5

  0x000000010cf74100:   str		w14, [x12, #0x20]   ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
                                                  <-- stores w14 into ints[i + 3]

 ;; merged ldr pair
  0x000000010cf74104:   ldp		w16, w14, [x13, #0x28];*invokestatic floatToRawIntBits {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@13 (line 10)
                                                  <-- loads 2 more floats into w16 and w14

 ;; merged str pair
  0x000000010cf74108:   stp		w5, w16, [x12, #0x24];*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
                                                  <-- stores two values at once into ints using store pair (stp)

  0x000000010cf7410c:   add		w4, w4, #8          ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@23 (line 7)
                                                  <-- increments i by 8 instead of 1

  0x000000010cf74110:   str		w14, [x12, #0x2c]   ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)

  0x000000010cf74114:   cmp		w4, w11             <-- compares w4 (current index) with w11 (array length)

  0x000000010cf74118:   b.lt		0x10cf740d0         ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@5 (line 7)
                                                    <-- if i < length, loop continues jumping back to the start
 ;; B15: #	out( B13 B16 ) <- in( B14 )  Freq: 10241.4
#+end_src
#+begin_src java
     2
     3	public class Test
     4	{
     5	    static void test(int[] ints, float[] floats)
     6	    {
     7	        for (int i = 0; i < ints.length; i++)
     8	        {
     9	            final float aFloat = floats[i];
    10	            final int bits = Float.floatToRawIntBits(aFloat);
    11	            ints[i] = bits;
    12	        }
    13	    }
    14
    15	    public static void main(String[] args)
    16	    {
    17	        final int[] ints = new int[10_000];
    18	        final float[] floats = new float[10_000];
    19	        init(ints);
    20
    21	        for (int i = 0; i < 100_000; i++)
    22	        {
    23	            test(ints, floats);
    24	        }
    25	    }
    26
    27	    static void init(int[] ints) {
    28	        final ThreadLocalRandom rand = ThreadLocalRandom.current();
    29	        for (int i = 0; i < ints.length; i++)
    30	        {
    31	            ints[i] = rand.nextInt();
    32	        }
    33	    }
    34	}
#+end_src
* 13.2.25
** floatToRawIntBits macos
Fails with
#+begin_src bash
PackSet::print: 3 packs
 Pack: 0
    0:  617  LoadF  === 594 7 618  [[ 616 ]]  @float[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=5; #float (does not depend only on test, unknown control) !orig=527,235,[134] !jvms: Test::test @ bci:12 (line 9)
    1:  623  LoadF  === 594 7 624  [[ 622 ]]  @float[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=5; #float (does not depend only on test, unknown control) !orig=235,[134] !jvms: Test::test @ bci:12 (line 9)
    2:  527  LoadF  === 594 7 528  [[ 526 ]]  @float[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=5; #float (does not depend only on test, unknown control) !orig=235,[134] !jvms: Test::test @ bci:12 (line 9)
    3:  235  LoadF  === 594 7 132  [[ 135 ]]  @float[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=5; #float (does not depend only on test, unknown control) !orig=[134] !jvms: Test::test @ bci:12 (line 9)
 Pack: 1
    0:  616  MoveF2I  === _ 617  [[ 615 ]]  !orig=526,135 !jvms: Test::test @ bci:13 (line 9)
    1:  622  MoveF2I  === _ 623  [[ 614 ]]  !orig=135 !jvms: Test::test @ bci:13 (line 9)
    2:  526  MoveF2I  === _ 527  [[ 524 ]]  !orig=135 !jvms: Test::test @ bci:13 (line 9)
    3:  135  MoveF2I  === _ 235  [[ 156 ]]  !jvms: Test::test @ bci:13 (line 9)
 Pack: 2
    0:  615  StoreI  === 631 637 619 616  [[ 614 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=524,156,543 !jvms: Test::test @ bci:16 (line 9)
    1:  614  StoreI  === 631 615 620 622  [[ 524 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=156,543 !jvms: Test::test @ bci:16 (line 9)
    2:  524  StoreI  === 631 614 525 526  [[ 396 156 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=156,543 !jvms: Test::test @ bci:16 (line 9)
    3:  156  StoreI  === 631 524 154 135  [[ 637 394 159 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6;  Memory: @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact+any *, idx=6; !orig=543 !jvms: Test::test @ bci:16 (line 9)

WARNING: Removed pack: not implemented at any smaller size:
    0:  616  MoveF2I  === _ 617  [[ 615 ]]  !orig=526,135 !jvms: Test::test @ bci:13 (line 9)
    1:  622  MoveF2I  === _ 623  [[ 614 ]]  !orig=135 !jvms: Test::test @ bci:13 (line 9)
    2:  526  MoveF2I  === _ 527  [[ 524 ]]  !orig=135 !jvms: Test::test @ bci:13 (line 9)
    3:  135  MoveF2I  === _ 235  [[ 156 ]]  !jvms: Test::test @ bci:13 (line 9)

After SuperWord::split_packs_only_implemented_with_smaller_size
#+end_src
#+begin_src java
     1	import java.util.concurrent.ThreadLocalRandom;
     2
     3	public class Test
     4	{
     5	    static void test(int[] ints, float[] floats)
     6	    {
     7	        for (int i = 0; i < ints.length; i++)
     8	        {
     9	            final float aFloat = floats[i];
    10	            final int bits = Float.floatToRawIntBits(aFloat);
    11	            ints[i] = bits;
    12	        }
    13	    }
    14
    15	    public static void main(String[] args)
    16	    {
    17	        final int[] ints = new int[10_000];
    18	        final float[] floats = new float[10_000];
    19	        // init(ints);
    20
    21	        for (int i = 0; i < 100_000; i++)
    22	        {
    23	            test(ints, floats);
    24	        }
    25	    }
    34	}
#+end_src
You can see the unrolling and the assembly here:
#+begin_src asm
 ;; B14: #	out( B14 B15 ) <- in( B13 B14 ) Loop( B14-B14 inner main of N71 strip mined) Freq: 1.04898e+08
  0x000000010e5fc0d0:   sbfiz		x12, x4, #2, #0x20  ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
  0x000000010e5fc0d4:   add		x13, x2, x12
  0x000000010e5fc0d8:   ldr		s17, [x13, #0x10]   ;*faload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@10 (line 9)
  0x000000010e5fc0dc:   add		x12, x10, x12
  0x000000010e5fc0e0:   str		s17, [x12, #0x10]   ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
 ;; merged ldr pair
  0x000000010e5fc0e4:   ldp		w14, w16, [x13, #0x14];*invokestatic floatToRawIntBits {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@13 (line 10)
  0x000000010e5fc0e8:   str		w14, [x12, #0x14]   ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
  0x000000010e5fc0ec:   ldr		w0, [x13, #0x1c]    ;*invokestatic floatToRawIntBits {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@13 (line 10)
  0x000000010e5fc0f0:   str		w16, [x12, #0x18]   ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
  0x000000010e5fc0f4:   ldr		w14, [x13, #0x20]   ;*invokestatic floatToRawIntBits {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@13 (line 10)
  0x000000010e5fc0f8:   str		w0, [x12, #0x1c]    ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
  0x000000010e5fc0fc:   ldr		w5, [x13, #0x24]    ;*invokestatic floatToRawIntBits {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@13 (line 10)
  0x000000010e5fc100:   str		w14, [x12, #0x20]   ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
 ;; merged ldr pair
  0x000000010e5fc104:   ldp		w16, w14, [x13, #0x28];*invokestatic floatToRawIntBits {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@13 (line 10)
 ;; merged str pair
  0x000000010e5fc108:   stp		w5, w16, [x12, #0x24];*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
  0x000000010e5fc10c:   add		w4, w4, #8          ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@23 (line 7)
  0x000000010e5fc110:   str		w14, [x12, #0x2c]   ;*iastore {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@22 (line 11)
  0x000000010e5fc114:   cmp		w4, w11
  0x000000010e5fc118:   b.lt		0x10e5fc0d0         ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - Test::test@5 (line 7)
 ;; B15: #	out( B13 B16 ) <- in( B14 )  Freq: 10241.4
#+end_src
* 29.1.25
** floatToIntBits
floatToIntBits not vectorizing because of flow control:
#+begin_src java
public static int floatToIntBits(float value) {
    if (!isNaN(value)) {
        return floatToRawIntBits(value);
    }
    return 0x7fc00000;
}
#+end_src

#+begin_src bash
 336  AddI  === _ 651 188  [[ 651 337 460 345 ]]  !orig=[275],223 !jvms: Test::test @ bci:17 (line 7)
 337  CmpI  === _ 336 677  [[ 338 ]]  !orig=[150] !jvms: Test::test @ bci:5 (line 7)
 338  Bool  === _ 337  [[ 339 ]] [lt] !orig=[151] !jvms: Test::test @ bci:5 (line 7)

   7  Parm  === 3  [[ 171 149 318 25 29 32 33 37 262 106 413 95 16 208 268 176 444 350 619 ]] Memory  Memory: @BotPTR *+bot, idx=Bot; !orig=[89],[234],[128] !jvms: Test::test @ bci:2 (line 7)
 266  Bool  === _ 267  [[ 286 ]] [ne] !orig=196 !jvms: Test::test @ bci:13 (line 9)
 267  CmpF  === _ 268 268  [[ 266 ]]  !orig=195 !jvms: Test::test @ bci:13 (line 9)
 268  LoadF  === 472 7 269  [[ 265 267 267 ]]  @float[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #float !orig=192 !jvms: Test::test @ bci:12 (line 9)
 286  If  === 641 266  [[ 287 300 ]] P=0.900000, C=-1.000000 !orig=197 !jvms: Test::test @ bci:13 (line 9)
 287  IfFalse  === 286  [[ 288 ]] #0 !orig=200 !jvms: Test::test @ bci:13 (line 9)
 300  IfTrue  === 286  [[ 288 ]] #1 !orig=198 !jvms: Test::test @ bci:13 (line 9)

 288  Region  === 288 300 287  [[ 288 263 299 291 339 ]]  !orig=193 !jvms: Test::test @ bci:13 (line 9)
 339  CountedLoopEnd  === 288 338  [[ 660 153 ]] [lt] P=0.999902, C=112651.000000 !orig=[152] !jvms: Test::test @ bci:5 (line 7)
 634  CountedLoop  === 634 343 153  [[ 634 637 650 651 639 ]] inner stride: 2 main of N634 strip mined !orig=[344],[301],[261] !jvms: Test::test @ bci:12 (line 9)

VLoop::check_preconditions
    Loop: N634/N153  limit_check counted [int,int),+2 (10243 iters)  main rc  has_sfpt strip_mined
 634  CountedLoop  === 634 343 153  [[ 634 637 650 651 639 ]] inner stride: 2 main of N634 strip mined !orig=[344],[301],[261] !jvms: Test::test @ bci:12 (line 9)
VLoop::check_preconditions: fails because of control flow.
  cl_exit 339 339  CountedLoopEnd  === 288 338  [[ 660 153 ]] [lt] P=0.999902, C=112651.000000 !orig=[152] !jvms: Test::test @ bci:5 (line 7)
  cl_exit->in(0) 288 288  Region  === 288 300 287  [[ 288 263 299 291 339 ]]  !orig=193 !jvms: Test::test @ bci:13 (line 9)
  lpt->_head 634 634  CountedLoop  === 634 343 153  [[ 634 637 650 651 639 ]] inner stride: 2 main of N634 strip mined !orig=[344],[301],[261] !jvms: Test::test @ bci:12 (line 9)
    Loop: N634/N153  limit_check counted [int,int),+2 (10243 iters)  main rc  has_sfpt strip_mined
VLoop::check_preconditions: failed: control flow in loop not allowed
#+end_src
** stacktraces
#+begin_src bash
Compile::print_method(CompilerPhaseType, int, Node *) compile.cpp:5138
PhaseIdealLoop::do_unroll(IdealLoopTree *, Node_List &, bool) loopTransform.cpp:2019
IdealLoopTree::iteration_split_impl(PhaseIdealLoop *, Node_List &) loopTransform.cpp:3404
IdealLoopTree::iteration_split(PhaseIdealLoop *, Node_List &) loopTransform.cpp:3440
IdealLoopTree::iteration_split(PhaseIdealLoop *, Node_List &) loopTransform.cpp:3424
PhaseIdealLoop::build_and_optimize() loopnode.cpp:4918
PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN &, LoopOptsMode) loopnode.hpp:1113
PhaseIdealLoop::PhaseIdealLoop(PhaseIterGVN &, LoopOptsMode) loopnode.hpp:1111
PhaseIdealLoop::optimize(PhaseIterGVN &, LoopOptsMode) loopnode.hpp:1207
Compile::Optimize() compile.cpp:2395
Compile::Compile(ciEnv *, ciMethod *, int, Options, DirectiveSet *) compile.cpp:852
Compile::Compile(ciEnv *, ciMethod *, int, Options, DirectiveSet *) compile.cpp:686
C2Compiler::compile_method(ciEnv *, ciMethod *, int, bool, DirectiveSet *) c2compiler.cpp:142
CompileBroker::invoke_compiler_on_method(CompileTask *) compileBroker.cpp:2319
CompileBroker::compiler_thread_loop() compileBroker.cpp:1977
CompilerThread::thread_entry(JavaThread *, JavaThread *) compilerThread.cpp:68
JavaThread::thread_main_inner() javaThread.cpp:777
JavaThread::run() javaThread.cpp:762
Thread::call_run() thread.cpp:232
thread_native_entry(Thread *) os_bsd.cpp:612
#+end_src
* 28.1.25
#+begin_src bash
   7  Parm  === 3  [[ 171 149 318 25 29 32 33 37 262 106 413 95 16 208 268 176 444 350 619 732 744 ]] Memory  Memory: @BotPTR *+bot, idx=Bot; !orig=[89],[234],[128] !jvms: Test::test @ bci:2 (line 7)
 199  ConI  === 0  [[ 299 373 436 642 ]]  #int:2143289344
 263  StoreI  === 288 621 264 299  |252  [[ 458 650 262 711 ]]  @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=7;  Memory: @int[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=7; !orig=222 !jvms: Test::test @ bci:16 (line 9)
 265  MoveF2I  === _ 268  [[ 299 ]]  !orig=201 !jvms: Test::test @ bci:13 (line 9)
 266  Bool  === _ 267  [[ 286 ]] [ne] !orig=196 !jvms: Test::test @ bci:13 (line 9)
 267  CmpF  === _ 268 268  [[ 266 ]]  !orig=195 !jvms: Test::test @ bci:13 (line 9)
 268  LoadF  === 472 7 269  |257  [[ 265 267 267 ]]  @float[int:>=0] (java/lang/Cloneable,java/io/Serializable):exact+any *, idx=6; #float !orig=192 !jvms: Test::test @ bci:12 (line 9)
 269  AddP  === _ 62 623 702  [[ 268 ]]  !orig=190 !jvms: Test::test @ bci:12 (line 9)
 286  If  === 641 266  [[ 287 300 ]] P=0.900000, C=-1.000000 !orig=197 !jvms: Test::test @ bci:13 (line 9)
 287  IfFalse  === 286  [[ 288 ]] #0 !orig=200 !jvms: Test::test @ bci:13 (line 9)
 288  Region  === 288 300 287  [[ 288 263 299 339 ]]  !orig=193 !jvms: Test::test @ bci:13 (line 9)
 299  Phi  === 288 199 265  [[ 263 ]]  #int !orig=194 !jvms: Test::test @ bci:13 (line 9)
 300  IfTrue  === 286  [[ 288 ]] #1 !orig=198 !jvms: Test::test @ bci:13 (line 9)
 339  CountedLoopEnd  === 288 725  [[ 660 153 ]] [lt] P=0.999902, C=112651.000000 !orig=[152] !jvms: Test::test @ bci:5 (line 7)
 472  IfTrue  === 471  [[ 268 761 619 ]] #1
#+end_src
