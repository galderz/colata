include $(TOPDIR)/make/Capstone.gmk
# include $(TOPDIR)/make/JTreg.gmk

CONF ?= fast
BUILD_LOG ?= info

WORKTREE ?= topic

ifeq ($(BASE),latest)
  base_branch = master
  base_remote = upstream
  jdk_tree_name = jdk-$(ID)
  worktree_id = $(WORKTREE).$(ID)
else ifeq ($(BASE),21)
  BOOT_JDK_VERSION = 21
  base_branch = jdk21u-dev-master
  base_remote = jdk21u-dev
  jdk_tree_name = jdk-$(BASE).$(ID)
  worktree_id = backport.$(BASE).$(ID)
else
  jdk_tree_name = jdk-$(ID)
endif

JDK_HOME = jdk
# todo replace the default with boot-jdk
BOOT_JDK_HOME ?= $(opt)/boot-java-$(BOOT_JDK_VERSION)
CAPSTONE_hHOME ?= $(usr_home)

ant_home = $(opt)/ant
ant_bin = $(opt)/ant/bin/ant
boot_jdk_java = $(BOOT_JDK_HOME)/bin/java
call_java += $(java)
java = $(java_home)/bin/java
java_home = $(java_build_dir)/jdk
java_build_dir = $(JDK_HOME)/build/$(conf_name)
java_libs_dir = $(java_home)/lib/server
jmh = $(JDK_HOME)/build/jmh/jars/.jmh
# todo copy lldbinit only if darwin
lldbinit = $(TOPDIR)/make/.lldbinit
make += make
make += -s
modules_libs_dir = $(java_build_dir)/support/modules_libs/java.base/server
os = $(shell uname | tr A-Z a-z)

# ifeq ($(UNAME_S),Linux)
#   autoconf = /usr/bin/autoconf
# else ifeq ($(UNAME_S),Darwin)
#   autoconf = /opt/homebrew/bin/autoconf
# endif

CPU ?=
ifdef CPU
  cpu = $(CPU)
else
  cpu = $(shell uname -m | tr A-Z a-z)
endif
conf_name = $(CONF)-$(os)-$(cpu)

ifeq ($(ARCH),686)
  conf_args += --with-target-bits=32
endif

ifeq ($(CONF),slow)
  conf_args += --with-debug-level=slowdebug
  conf_args += --with-native-debug-symbols=internal
else ifeq ($(CONF),fast)
  conf_args += --with-debug-level=fastdebug
  conf_args += --with-native-debug-symbols=internal
endif

ifdef NO_WARNINGS_ERRORS
  conf_args += --disable-warnings-as-errors
endif

ifndef NO_HSDIS
  conf_args += --enable-hsdis-bundling
  conf_args += --with-capstone=$(CAPSTONE_HOME)
  conf_args += --with-hsdis=capstone
endif

java: $(java)

$(java): $(shell find $(JDK_HOME)/src -type f -name '*.java')
$(java): $(shell find $(JDK_HOME)/src -type f -name '*pp')
$(java): $(shell find $(JDK_HOME)/test -type f -name '*.java')
$(java): $(shell find $(JDK_HOME)/test -type f -name '*pp')
$(java): $(shell find $(JDK_HOME)/src -type f -name '*.ad')
$(java):
> pushd $(JDK_HOME)
> CONF=$(conf_name) LOG=$(BUILD_LOG) $(make) hotspot
ifeq ($(UNAME_S),Linux)
>  cp $(modules_libs_dir)/libjvm.so $(java_libs_dir)
else ifeq ($(UNAME_S),Darwin)
>  cp $(modules_libs_dir)/libjvm.dylib $(java_libs_dir)
>  rm -drf $(java_libs_dir)/libjvm.dylib.dSYM
>  cp -r $(modules_libs_dir)/libjvm.dylib.dSYM $(java_libs_dir) || true
endif
> popd
> touch $@

build-hotspot: $(java)
.PHONY: build-hotspot

build-jdk:
> pushd $(JDK_HOME)
> CONF=$(conf_name) LOG=$(BUILD_LOG) $(make) -s
> popd
> touch $(java)
.PHONY: build-jdk

build-graal-builder-image:
> pushd $(JDK_HOME)
> CONF=$(conf_name) LOG=$(BUILD_LOG) $(make) graal-builder-image
> touch $(java)
.PHONY: build-graal-builder-image

clean-jdk:
> pushd $(JDK_HOME)
> CONF=$(conf_name) $(make) clean
.PHONY: clean-jdk

# > cp $(lib_home)/libcapstone* $(JDK_HOME)/build/$(conf_name)/jdk/lib || true
# > cp $(capstone_dylib) . || true
# configure: $(boot_jdk_java) $(jmh) $(capstone_lib) $(jtreg_bin) $(gtest_opt) $(autoconf)
# >   --with-gtest=$(gtest_opt) \
# >   --with-jtreg=$(jtreg_home) \

configure: $(boot_jdk_java) $(jmh)
> pushd $(JDK_HOME)
> bash configure \
>   --disable-precompiled-headers \
>   --with-boot-jdk=$(BOOT_JDK_HOME) \
>   --with-conf-name=$(conf_name) \
>   --with-jmh=build/jmh/jars \
>   --with-devkit=$(DEVKIT_ROOT) \
>   $(conf_args)
> popd
> cp $(lldbinit) $(JDK_HOME)/build/$(conf_name)
.PHONY: configure

# $(autoconf):
# ifeq ($(UNAME_S),Linux)
# > $(call tools)
# else ifeq ($(UNAME_S),Darwin)
# > brew install autoconf
# endif

# todo trim it for linux
define tools
sudo dnf groupinstall -y "Development Tools"
sudo dnf install -y \
  alsa-lib-devel \
  cups-devel \
  fontconfig-devel \
  libXi-devel \
  libXrandr-devel \
  libXrender-devel \
  libXt-devel \
  libXtst-devel \
  perf \
  unzip \
  zip
endef

# tools: $(autoconf)
tools:
> $(call tools)
.PHONY: tools

$(boot_jdk_java):
> mkdir -p $(opt)
> $(TOPDIR)/make/download-jdk.sh $(BOOT_JDK_VERSION) $(opt)
> touch $@

boot-jdk: $(boot_jdk_java)
.PHONY: boot-jdk

compile-commands:
> cd $(JDK_HOME)
> CONF=$(conf_name) $(make) compile-commands
.PHONY: compile-commands

clion:
> $(boot_jdk_java) $(TOPDIR)/make/Clion.java $(JDK_HOME) $(conf_name)
.PHONY: clion

clear-logs:
> rm -f *.log
.PHONY: clear-logs

idea: $(ant_bin)
> cd $(JDK_HOME)
> ANT_HOME=$(HOME)/opt/ant CONF=$(conf_name) sh bin/idea.sh
.PHONY: idea

$(ant_bin):
> cd $(opt)
> wget https://dlcdn.apache.org//ant/binaries/apache-ant-1.10.14-bin.tar.gz
> tar -xzvpf apache-ant-1.10.14-bin.tar.gz
> ln -s apache-ant-1.10.14 ant

$(jmh):
> pushd $(JDK_HOME)
> sh make/devkit/createJMHBundle.sh
> popd
> touch $@

$(jtreg_bin): $(jtreg_opt)
> cd $<
> sh make/build.sh --jdk $(BOOT_JDK_HOME)

$(jtreg_opt):
> cd $(opt)
> git clone https://github.com/openjdk/jtreg

test: build-jdk
> cd $(JDK_HOME)
> mkdir -p $(java_build_dir)/images/test
> cp $(capstone_dylib) $(java_build_dir)/images/test || true
> CONF=$(conf_name) $(make) test TEST="$(TEST)"
.PHONY: test

micro: build-jdk
> cd $(JDK_HOME)
> mkdir -p $(java_build_dir)/images/test
> cp $(capstone_dylib) $(java_build_dir)/images/test || true
> CONF=$(conf_name) $(make) test TEST="$(TEST)" MICRO="$(MICRO)"
.PHONY: micro

micro-c1: build-jdk
> cd $(JDK_HOME)
> CONF=$(conf_name) $(make) test TEST="$(TEST)" MICRO="JAVA_OPTIONS=-XX:TieredStopAtLevel=1"
.PHONY: micro-c1

test-all: build-jdk
> cd $(JDK_HOME)
> CONF=$(conf_name) $(make) test TEST="hotspot_compiler hotspot_gc hotspot_serviceability hotspot_runtime tier1 tier2 tier3"
.PHONY: test-all

test-tier1: build-jdk
> cd $(JDK_HOME)
> CONF=$(conf_name) $(make) test TEST="tier1"
.PHONY: test-tier1

test-hotspot-compiler: build-jdk
> cd $(JDK_HOME)
> CONF=$(conf_name) $(make) test TEST="hotspot_compiler"
.PHONY: test-hotspot-compiler

test-hotspot-compiler-c1: build-jdk
> cd $(JDK_HOME)
> CONF=$(conf_name) $(make) test TEST="hotspot_compiler" JTREG="JAVA_OPTIONS=-XX:TieredStopAtLevel=1"
.PHONY: test-hotspot-compiler-c1-only

jtreg_args += -ignore:quiet
jtreg_args += -conc:8
jtreg_args += -dir:$(JDK_HOME)/test/hotspot/jtreg
jtreg_args += -compilejdk:$(java_home)
jtreg_args += -testjdk:$(java_home)
jtreg_args += -va
jtreg_args += -javaoptions:"-server"
jtreg_args += -timeout:4

test-jtreg: build-jdk
> cp $(TEST_FILE) $(JDK_HOME)/$(TEST_DIR)
> cd $(JDK_HOME)
> JAVA_HOME=$(BOOT_JDK_HOME) $(jtreg_bin) $(jtreg_args) $(JDK_HOME)/$(TEST_DIR)/$(TEST_FILE)
.PHONY: test-jtreg

igv:
> pushd $(JDK_HOME)/src/utils/IdealGraphVisualizer
> JAVA_HOME=$(opt)/java-21 $(opt)/boot-maven-3/bin/mvn install -DskipTests
> popd
> $(TOPDIR)/make/run-igv.sh $(JDK_HOME)/src/utils/IdealGraphVisualizer
.PHONY: igv

jcheck:
> cd $(JDK_HOME)
> git jcheck
.PHONY: jcheck

print-flags: $(java)
> $< -XX:+UnlockDiagnosticVMOptions -XX:+PrintFlagsFinal --version
.PHONY: print-flags

new-worktree:
> pushd $(HOME)/1/jdk
> git fetch $(base_remote)
> git pull $(base_remote)
> git worktree add -b $(worktree_id) ../$(jdk_tree_name) $(base_branch)
> popd
> ln -s $(HOME)/1/$(jdk_tree_name) jdk
.PHONY: new-worktree

checkout-worktree:
> cd $(HOME)/1/jdk
> git fetch origin
> git pull origin
> git worktree add -b $(worktree_id) ../$(jdk_tree_name) origin/$(worktree_id)
.PHONY: checkout-worktree

checkout-jdk:
> mkdir -p $(HOME)/1
> cd $(HOME)/1
> git clone https://github.com/galderz/jdk
