BOOT_JDK_HOME ?= $(opt)/boot-java-$(BOOT_JDK_VERSION)
CAPSTONE_HOME ?= $(usr_home)
CONF ?= fast

# info, debug and trace as options
# can be combined with cmdlines, e.g. LOG=info,cmdlines
LOG ?= info

ROOT ?= $(HOME)/src
WORKTREE ?= topic

benchmarks_jar = $(java_build_dir)/images/test/micro/benchmarks.jar
boot_jdk_java = $(BOOT_JDK_HOME)/bin/java
java = $(java_home)/bin/java
java_build_dir = $(JDK_HOME)/build/$(conf_name)
java_libs_dir = $(java_home)/lib/server
java_home = $(java_build_dir)/jdk
jmh = $(JDK_HOME)/build/jmh/jars/.jmh
lldbinit = $(TOPDIR)/make/.lldbinit
modules_libs_dir = $(java_build_dir)/support/modules_libs/java.base/server
os = $(shell uname | tr A-Z a-z)

ifeq ($(BASE),21)
  BOOT_JDK_VERSION = 21
  base_branch = jdk21u-dev-master
  base_remote = jdk21u-dev
  jdk_tree_name = jdk-$(BASE).$(ID)
  worktree_id = backport.$(BASE).$(ID)
else
  base_branch = master
  base_remote = upstream
  jdk_tree_name = jdk-$(ID)
  worktree_id = $(WORKTREE).$(ID)
endif

JDK_HOME ?= $(ROOT)/$(jdk_tree_name)

ifeq ($(CONF),slow)
  conf_args += --with-debug-level=slowdebug
  conf_args += --with-native-debug-symbols=internal
else ifeq ($(CONF),fast)
  conf_args += --with-debug-level=fastdebug
  conf_args += --with-native-debug-symbols=internal
endif

ifdef NO_WARNINGS_ERRORS
  conf_args += --disable-warnings-as-errors
endif

ifeq ($(os),linux)
  conf_args += --with-freetype-include=$(FREETYPE_INCLUDE)
  conf_args += --with-freetype-lib=$(FREETYPE_LIB)
endif

CPU ?=
ifdef CPU
  cpu = $(CPU)
else
  cpu = $(shell uname -m | tr A-Z a-z)
endif
conf_name = $(CONF)-$(os)-$(cpu)

$(java): $(shell find $(JDK_HOME)/src -type f -name '*.java')
$(java): $(shell find $(JDK_HOME)/src -type f -name '*pp')
$(java): $(shell find $(JDK_HOME)/test -type f -name '*.java')
$(java): $(shell find $(JDK_HOME)/test -type f -name '*pp')
$(java): $(shell find $(JDK_HOME)/src -type f -name '*.ad')
$(java):
> pushd $(JDK_HOME)
> CONF=$(conf_name) make hotspot
ifeq ($(os),linux)
>  cp $(modules_libs_dir)/libjvm.so $(java_libs_dir)
else ifeq ($(os),darwin)
>  cp $(modules_libs_dir)/libjvm.dylib $(java_libs_dir)
>  rm -drf $(java_libs_dir)/libjvm.dylib.dSYM
>  cp -r $(modules_libs_dir)/libjvm.dylib.dSYM $(java_libs_dir) || true
endif
> popd
> touch $@

ifndef NO_HSDIS
  conf_args += --enable-hsdis-bundling
  conf_args += --with-capstone=$(CAPSTONE_HOME)
  conf_args += --with-hsdis=capstone
endif

configure: $(boot_jdk_java) $(jmh)
> pushd $(JDK_HOME)
> bash configure \
>   --disable-precompiled-headers \
>   --with-boot-jdk=$(BOOT_JDK_HOME) \
>   --with-conf-name=$(conf_name) \
>   --with-jmh=build/jmh/jars \
>   --with-devkit=$(DEVKIT_ROOT) \
>   $(conf_args)
> popd
ifeq ($(UNAME_S),Darwin)
> cp $(lldbinit) $(JDK_HOME)/build/$(conf_name)
endif
.PHONY: configure

build-jdk:
> pushd $(JDK_HOME)
> CONF=$(conf_name) make -s
> popd
> touch $(java)
.PHONY: build-jdk

install-jmh:
> $(TOPDIR)/nix-make/install-jmh.sh $(JDK_HOME)
.PHONY: install-jmh

# todo depend on individual jars and run when any of those updated
$(jmh):
ifeq ($(JMH_SNAPSHOT),true)
> $(TOPDIR)/nix-make/install-jmh.sh $(JDK_HOME)
else
> pushd $(JDK_HOME)
> sh make/devkit/createJMHBundle.sh
> popd
endif
> touch $@

test: build-jdk
> cd $(JDK_HOME)
> CONF=$(conf_name) make exploded-test
.PHONY: test

$(benchmarks_jar): build-jdk
> pushd $(JDK_HOME)
> CONF=$(conf_name) make test-image
> popd

debug-jmh: $(java)
> $< -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005 -jar $(benchmarks_jar) $(JMH_ARGS)
.PHONY: debug-jmh

compile-commands:
> cd $(JDK_HOME)
> CONF=$(conf_name) make compile-commands
.PHONY: compile-commands

new-worktree:
> pushd $(ROOT)/jdk
> git fetch $(base_remote)
> git pull $(base_remote)
> git worktree add -b $(worktree_id) ../$(jdk_tree_name) $(base_branch)
> popd
.PHONY: new-worktree

checkout-worktree:
> cd $(ROOT)/jdk
> git fetch origin
> git pull
> git worktree add -b $(worktree_id) ../$(jdk_tree_name) origin/$(worktree_id)
.PHONY: checkout-worktree

remove-worktree:
> cd $(ROOT)/jdk
> git worktree remove ../$(jdk_tree_name)
.PHONY: remove-worktree

clion:
> $(boot_jdk_java) $(TOPDIR)/make/Clion.java $(JDK_HOME) $(conf_name)
.PHONY: clion

idea:
> cd $(JDK_HOME)
> CONF=$(conf_name) sh bin/idea.sh
.PHONY: idea

devkit:
> cd $(JDK_HOME)/make/devkit
> mkdir -p /tmp/usr-bin-tar
> ln -sf /usr/bin/tar /tmp/usr-bin-tar/
> PATH=/tmp/usr-bin-tar:$$PATH bash ./createMacosxDevkit.sh /Applications/XCode.app
.PHONY: devkit

store-devkit:
> cd $(JDK_HOME)/build/devkit
> nix-store --add-fixed --recursive sha256 $$(ls -d Xcode*/ | sed 's:/$$::' | sort | tail -n 1)
.PHONY: store-devkit

boot-jdk:
> mkdir -p $(opt)
> $(TOPDIR)/nix-make/download-jdk.sh $(BOOT_JDK_VERSION) $(opt)
> touch $@
.PHONY: boot-jdk

lldb: $(java)
> cd $(JDK_HOME)
> $DEVKIT_ROOT/Xcode/Contents/Developer/usr/bin/lldb build/$(conf_name)/jdk/bin/java
.PHONY: lldb

clear-logs:
> rm -f *.log
.PHONY: clear-logs

clean-jdk:
> pushd $(JDK_HOME)
> CONF=$(conf_name) make clean
.PHONY: clean-jdk
